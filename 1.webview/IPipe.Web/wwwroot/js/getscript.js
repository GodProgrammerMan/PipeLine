window.TILE_VERSION = { "ditu": { "normal": { "version": "088", "updateDate": "20191217" }, "satellite": { "version": "009", "updateDate": "20191217" }, "normalTraffic": { "version": "081", "updateDate": "20191217" }, "satelliteTraffic": { "version": "083", "updateDate": "20191217" }, "mapJS": { "version": "104", "updateDate": "20191217" }, "satelliteStreet": { "version": "083", "updateDate": "20191217" }, "earthVector": { "version": "001", "updateDate": "20191217" } }, "webapp": { "high_normal": { "version": "001", "updateDate": "20191217" }, "lower_normal": { "version": "002", "updateDate": "20191217" } }, "api_for_mobile": { "vector": { "version": "002", "updateDate": "20191217" }, "vectorIcon": { "version": "002", "updateDate": "20191217" } } }; window.MSV = { "mapstyle": { "updateDate": "20191210", "version": "001" } }; window.BMAP_AUTHENTIC_KEY = "bhb1z8SEID2CyM1HGyG2Pis9DQmY6G0H"; window.BMapGL = window.BMapGL || {}; (function (aI, c0) { var x = x || { version: "20150702", emptyFn: function () { } }; (function () { x._log = []; var i = 0; var fn = {}; x.BaseClass = function (fo) { fn[(this.hashCode = (fo || x.BaseClass.guid()))] = this }; x.BaseClass.guid = function () { return "mz_" + (i++).toString(36) }; x.BaseClass.create = function () { var fo = new x.BaseClass(); fo.decontrol(); return fo }; var e = x.instance = x.I = function (fo) { return fn[fo] }; x.BaseClass.prototype.dispose = function () { if (this.hashCode) { delete fn[this.hashCode] } for (var fo in this) { if (typeof this[fo] != "function") { delete this[fo] } } }; x.BaseClass.prototype.getHashCode = function () { if (!this.hashCode) { fn[(this.hashCode = x.BaseClass.guid())] = this } return this.hashCode }; x.BaseClass.prototype.decontrol = function () { delete fn[this.hashCode] }; x.BaseClass.prototype.toString = function () { return "[object " + (this._className || "Object") + "]" }; x.BaseClass.prototype._wlog = function (fp, fq) { var fo = x._log; if (fo.length > 100) { fo.reverse().length = 50; fo.reverse() } fo[fo.length] = "[" + fp + "][" + (this._className || "Object") + " " + this.hashCode + "] " + fq } })(); Function.prototype.inherits = function (fo, fn) { var e, fp, fr = this.prototype, fq = function () { }; fq.prototype = fo.prototype; fp = this.prototype = new fq(); if (typeof (fn) == "string") { fp._className = fn } for (e in fr) { fp[e] = fr[e] } this.prototype.constructor = fr.constructor; fr = fq = null; return fp }; x.BaseEvent = function (e, i) { this.type = e; this.returnValue = true; this.target = i || null; this.currentTarget = this.srcElement = null; this.cancelBubble = false; this.domEvent = null }; x.BaseClass.prototype.on = x.BaseClass.prototype.addEventListener = function (fn, i) { if (typeof i !== "function") { return this._wlog("error", "addEventListener:" + i + " is not a function") } if (!this._listeners) { this._listeners = {} } var e = this._listeners; if (fn.indexOf("on") !== 0) { fn = "on" + fn } if (typeof e[fn] !== "object") { e[fn] = {} } var fo = i.hashCode || x.BaseClass.guid(); i.hashCode = fo; if (e[fn][fo]) { this._wlog("warning", "repeat key:" + fo) } e[fn][fo] = i }; x.BaseClass.prototype.off = x.BaseClass.prototype.removeEventListener = function (fn, i) { if (typeof i == "function") { i = i.hashCode } else { if (typeof i != "string") { return } } if (!this._listeners) { this._listeners = {} } if (fn.indexOf("on") != 0) { fn = "on" + fn } var e = this._listeners; if (!e[fn]) { return } if (e[fn][i]) { delete e[fn][i] } }; x.BaseClass.prototype.fire = x.BaseClass.prototype.dispatchEvent = function (fo) { if (!this._listeners) { this._listeners = {} } var fn, e = this._listeners, fp = fo.type; fo.target = fo.srcElement = fo.target || fo.srcElement || this; fo.currentTarget = this; if (typeof this[fp] == "function") { this[fp](fo) } if (typeof e[fp] == "object") { for (fn in e[fp]) { if (typeof e[fp][fn] == "function") { e[fp][fn].call(this, fo) } } } return fo.returnValue }; x.BaseEvent.prototype.inherit = function (fn) { var i = this; this.domEvent = fn = window.event || fn; i.clientX = fn.clientX || fn.pageX; i.clientY = fn.clientY || fn.pageY; i.offsetX = fn.offsetX || fn.layerX; i.offsetY = fn.offsetY || fn.layerY; i.screenX = fn.screenX; i.screenY = fn.screenY; i.ctrlKey = fn.ctrlKey || fn.metaKey; i.shiftKey = fn.shiftKey; i.altKey = fn.altKey; return i }; x.Browser = (function () { var fn = navigator.userAgent; var fp = 0; var e = 0; var fq = 0; var i = 0; var fu = 0; var fs = 0; var ft = 0; var fr = 0; var fo = 0; var fv = 0; if (typeof window.opera === "object" && /Opera(\s|\/)(\d+(\.\d+)?)/.test(fn)) { fq = parseFloat(RegExp.$2) } else { if (/OPR(\/(\d+)(\..?)?)/.test(fn)) { fq = parseInt(RegExp.$2, 10) } else { if (/Edge\/((\d+)\.\d+)/.test(fn)) { fp = parseInt(RegExp.$2, 10) } else { if (/MSIE (\d+(\.\d+)?)/.test(fn)) { e = parseFloat(RegExp.$1) } else { if (fn.indexOf("Trident") > -1 && /rv:(\d+(\.\d+)?)/.test(fn)) { e = parseInt(RegExp.$1, 10) } else { if (/Firefox(\s|\/)(\d+(\.\d+)?)/.test(fn)) { fu = parseFloat(RegExp.$2) } else { if (navigator.vendor === "Netscape" && /Netscape(\s|\/)(\d+(\.\d+)?)/.test(fn)) { ft = parseFloat(RegExp.$2) } else { if (fn.indexOf("Safari") > -1 && /Version\/(\d+(\.\d+)?)/.test(fn)) { i = parseFloat(RegExp.$1) } } } } } } } } if (fn.indexOf("Trident") > -1 && /Trident\/(\d+(\.\d+)?)/.test(fn)) { fr = parseInt(RegExp.$1, 10) } else { if (!e && !fp && fn.indexOf("Gecko") > -1 && fn.indexOf("KHTML") === -1 && /rv\:(\d+(\.\d+)?)/.test(fn)) { fo = parseFloat(RegExp.$1) } else { if (!fp && /chrome\/(\d+(\.\d+)?)/i.test(fn)) { fs = parseFloat(RegExp.$1) } else { if (!fp && /AppleWebKit\/(\d+(\.\d+)?)/.test(fn)) { fv = parseInt(RegExp.$1, 10) } } } } var fw = { edge: fp, ie: e, firefox: fu, netscape: ft, opera: fq, safari: i, chrome: fs, gecko: fo, trident: fr, webkit: fv }; return fw })(); window.FeBrowser = x.Browser; x.Dom = {}; x.Dom.createDom = function (i, e) { if (x.isIE && e && e.name) { i = "<" + i + ' name="' + x.String.escapeHTML(e.name) + '">' } var fn = document.createElement(i); if (e) { x.Dom.setProperties(fn, e) } return fn }; x.Dom.getOffset = function (fo) { var fr = x.Dom.getOwnerDocument(fo); var fq = x.isGecko > 0 && fr.getBoxObjectFor && x.Dom.getStyle(fo, "position") == "absolute" && (fo.style.top === "" || fo.style.left === ""); var fs = { left: 0, top: 0 }; var i = (x.isIE && !x.isStrict) ? fr.body : fr.documentElement; if (fo == i) { return fs } var fn = null; var fp; if (fo.getBoundingClientRect) { fp = fo.getBoundingClientRect(); fs.left = fp.left + Math.max(fr.documentElement.scrollLeft, fr.body.scrollLeft); fs.top = fp.top + Math.max(fr.documentElement.scrollTop, fr.body.scrollTop); fs.left -= fr.documentElement.clientLeft; fs.top -= fr.documentElement.clientTop; if (x.isIE && !x.isStrict) { fs.left -= 2; fs.top -= 2 } } else { if (fr.getBoxObjectFor && !fq) { fp = fr.getBoxObjectFor(fo); var e = fr.getBoxObjectFor(i); fs.left = fp.screenX - e.screenX; fs.top = fp.screenY - e.screenY } else { fn = fo; do { fs.left += fn.offsetLeft; fs.top += fn.offsetTop; if (x.isWebkit > 0 && x.Dom.getStyle(fn, "position") == "fixed") { fs.left += fr.body.scrollLeft; fs.top += fr.body.scrollTop; break } fn = fn.offsetParent } while (fn && fn != fo); if (x.isOpera > 0 || (x.isWebkit > 0 && x.Dom.getStyle(fo, "position") == "absolute")) { fs.top -= fr.body.offsetTop } fn = fo.offsetParent; while (fn && fn != fr.body) { fs.left -= fn.scrollLeft; if (!x.isOpera || fn.tagName != "TR") { fs.top -= fn.scrollTop } fn = fn.offsetParent } } } return fs }; x.Dom.getOwnerDocument = function (e) { return e.nodeType == 9 ? e : e.ownerDocument || e.document }; x.Dom.setProperties = function (i, e) { x.each(e, function (fo, fn) { x.Dom._setProperty(i, fn, fo) }) }; x.Dom._setProperty = function (i, e, fn) { if (e == "style") { i.style.cssText = fn } else { if (e == "class") { i.className = fn } else { if (e == "for") { i.htmlFor = fn } else { if (e in x.Dom._DIRECT_ATTRIBUTE_MAP) { i.setAttribute(x.Dom._DIRECT_ATTRIBUTE_MAP[e], fn) } else { i[e] = fn } } } } }; x.Dom._DIRECT_ATTRIBUTE_MAP = { cellpadding: "cellPadding", cellspacing: "cellSpacing", colspan: "colSpan", rowspan: "rowSpan", valign: "vAlign", height: "height", width: "width", usemap: "useMap", frameborder: "frameBorder" }; x.G = function () { for (var fn = [], fo = arguments.length - 1; fo > -1; fo--) { var fp = arguments[fo]; fn[fo] = null; if (typeof fp == "object" && fp && fp.dom) { fn[fo] = fp.dom } else { if ((typeof fp == "object" && fp && fp.tagName) || fp == window || fp == document) { fn[fo] = fp } else { if (typeof fp == "string" && (fp = document.getElementById(fp))) { fn[fo] = fp } } } } return fn.length < 2 ? fn[0] : fn }; x.ac = function (e, i) { if (!(e = this.G(e))) { return } i = this.trim(i); if (!new RegExp("(^| )" + i.replace(/(\W)/g, "\\$1") + "( |$)").test(e.className)) { e.className = e.className.split(/\s+/).concat(i).join(" ") } }; x.addClassName = x.ac; x.each = function (fq, e) { if (typeof e != "function") { return fq } if (fq) { if (fq.length === undefined) { for (var fn in fq) { e.call(fq[fn], fq[fn], fn) } } else { for (var fo = 0, fp = fq.length; fo < fp; fo++) { e.call(fq[fo], fq[fo], fo) } } } return fq }; x.extend = function (fq, fo) { if (fq && fo && typeof (fo) == "object") { for (var fp in fo) { fq[fp] = fo[fp] } var fn = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"]; for (var e = 0, i; e < fn.length; e++) { i = fn[e]; if (Object.prototype.hasOwnProperty.call(fo, i)) { fq[i] = fo[i] } } } return fq }; x.hide = function () { x.each(arguments, function (e) { if (e = x.G(e)) { e.style.display = "none" } }) }; x.inherit = function (fs, fo, fn) { var fr = fs.prototype; var fq = function () { }; fq.prototype = fo.prototype; var fp = fs.prototype = new fq(); if (typeof fn == "string") { fp._className = fn } for (var e in fr) { fp[e] = fr[e] } fs.prototype.constructor = fr.constructor; fr = null; return fp }; x.isIE = 0; (function () { if (navigator.userAgent.indexOf("MSIE") > 0 && !window.opera) { /MSIE (\d+(\.\d+)?)/.test(navigator.userAgent); x.isIE = parseFloat(RegExp.$1) } })(); x.rc = function (e, i) { if (!(e = this.G(e))) { return } i = this.trim(i); var fn = e.className.replace(new RegExp("(^| +)" + i.replace(/(\W)/g, "\\$1") + "( +|$)", "g"), "$2"); if (e.className != fn) { e.className = fn } }; x.removeClassName = x.rc; x.show = function () { this.each(arguments, function (e) { if (e = x.G(e)) { e.style.display = "" } }) }; x.trim = function (e) { return e.replace(/(^[\s\t\xa0\u3000]+)|([\u3000\xa0\s\t]+$)/g, "") }; if (typeof HTMLElement != "undefined" && HTMLElement.prototype.__lookupGetter__ && !HTMLElement.prototype.__lookupGetter__("children") && !window.opera) { try { HTMLElement.prototype.__defineGetter__("children", function () { for (var fn = [], fo = 0, fq, fp = 0, e = this.childNodes.length; fp < e; fp++) { fq = this.childNodes[fp]; if (fq.nodeType == 1) { fn[fo++] = fq; if (fq.name) { if (!fn[fq.name]) { fn[fq.name] = [] } fn[fq.name][fn[fq.name].length] = fq } if (fq.id) { fn[fq.id] = fq } } } return fn }) } catch (eu) { } } if (typeof (HTMLElement) != "undefined" && !window.opera && HTMLElement.prototype && !HTMLElement.prototype.insertAdjacentHTML) { HTMLElement.prototype.insertAdjacentHTML = function (i, fn) { var fo = this.ownerDocument.createRange(); fo.setStartBefore(this); fo = fo.createContextualFragment(fn); switch (i) { case "beforeBegin": this.parentNode.insertBefore(fo, this); break; case "afterBegin": this.insertBefore(fo, this.firstChild); break; case "beforeEnd": this.appendChild(fo); break; case "afterEnd": if (!this.nextSibling) { this.parentNode.appendChild(fo) } else { this.parentNode.insertBefore(fo, this.nextSibling) } break } } } if (typeof HTMLElement != "undefined" && !window.opera) { HTMLElement.prototype.contains = function (e) { if (e == this) { return true } while (e = e.parentNode) { if (e == this) { return true } } return false } } if (!x.Browser.ie && typeof Event != "undefined" && !window.opera) { Event.prototype.__defineSetter__("returnValue", function (e) { if (!e) { this.preventDefault() } return e }); Event.prototype.__defineSetter__("cancelBubble", function (e) { if (e) { this.stopPropagation() } return e }) } x.each = function (fp, fo) { if (a7(fo)) { for (var fn = 0, e = fp.length; fn < e; fn++) { if (fo.call(fp, fp[fn], fn) === false) { break } } } return fp }; x.Platform = { x11: 0, macintosh: 0, windows: 0, android: 0, iphone: 0, ipad: 0 }; for (var ep in x.Platform) { if (x.Platform.hasOwnProperty(ep)) { x.Platform[ep] = new RegExp(ep, "i").test(window.navigator.userAgent) ? 1 : 0 } } if (typeof (x.Dom) === "undefined") { x.Dom = {} } x.Dom.getComputedStyle = function (i, e) { var fo = i.nodeType == 9 ? i : i.ownerDocument || i.document, fn; if (fo.defaultView && fo.defaultView.getComputedStyle) { fn = fo.defaultView.getComputedStyle(i, null); if (fn) { return fn[e] || fn.getPropertyValue(e) } } else { if (i.currentStyle) { return i.currentStyle[e] || "" } } return "" }; var aB = x.BaseEvent; var cK = x.BaseClass; cK.prototype.toString = function () { return this._className || "" }; x.on = function (fn, i, e) { if (!(fn = x.G(fn))) { return fn } i = i.replace(/^on/, ""); if (fn.addEventListener) { fn.addEventListener(i, e, false) } else { if (fn.attachEvent) { fn.attachEvent("on" + i, e) } } return fn }; x.un = function (fn, i, e) { if (!(fn = x.G(fn))) { return fn } i = i.replace(/^on/, ""); if (fn.removeEventListener) { fn.removeEventListener(i, e, false) } else { if (fn.detachEvent) { fn.detachEvent("on" + i, e) } } return fn }; x.hc = function (fo, fn) { if (!fo || !fo.className || typeof fo.className != "string") { return false } var i = -1; try { i = fo.className == fn || fo.className.search(new RegExp("(\\s|^)" + fn + "(\\s|$)")) } catch (fp) { return false } return i > -1 }; x.isEmptyObject = function (fn) { if (Object.prototype.toString.call(fn) === "[object Object]") { for (var e in fn) { return false } return true } else { return false } }; var dh = { mapStyleNameIdPair: { "default": 0, "grayed-out": 1 }, mapHost: "https://map.baidu.com", apiHost: "https://api.map.baidu.com", staticHost: "http://webmap0.bdimg.com", imgPath: "http://webmap0.bdimg.com/image/api/", tileDomain: ["https://maponline0.bdimg.com", "https://maponline1.bdimg.com", "https://maponline2.bdimg.com", "https://maponline3.bdimg.com"], optDomain: "http://10.120.25.45:8017", rasterTilePath: "/tile/", vectorTilePath: "/pvd/", originTilePath: ["https://pcor.baidu.com"], getIconSetPath: function (e) { var i = "map_icons2x/"; if (typeof e === "string" && this.mapStyleNameIdPair[e] > 0) { i = "map_icons2x_" + (this.mapStyleNameIdPair[e] - 1) + "/" } return "https://maponline0.bdimg.com/sty/" + i }, getMapStyleFiles: function (fn) { var fp = true; if (typeof fn === "string" && fn !== "default") { fp = false } var fq = fp ? "" : "_" + (this.mapStyleNameIdPair[fn] - 1); var i = dK(); var fo = "udt=" + i.udt + "&v=" + i.ver; var e = "https://maponline0.bdimg.com/sty/"; return [e + "icons_2x" + fq + ".js?" + fo, e + "fs" + fq + ".js?" + fo, e + "indoor_fs.js?" + fo] }, tvc: { ditu: { normal: { version: "088", updateDate: "20190618" }, satellite: { version: "009", updateDate: "20190618" }, normalTraffic: { version: "081", updateDate: "20190618" }, satelliteTraffic: { version: "083", updateDate: "20190618" }, mapJS: { version: "104", updateDate: "20190618" }, satelliteStreet: { version: "083", updateDate: "20190618" }, panoClick: { version: "1033", updateDate: "20180108" }, panoUdt: { version: "20180108", updateDate: "20180108" }, panoSwfAPI: { version: "20150123", updateDate: "20150123" }, panoSwfPlace: { version: "20141112", updateDate: "20141112" }, earthVector: { version: "001", updateDate: "20190618" } } }, msv: { mapstyle: { updateDate: "20190108", version: "001" } } }; dh.imgResources = { blankGIF: dh.staticHost + "/res/litemapapi/v1d1/images/blank.gif?20170501", markerPng: dh.staticHost + "/res/litemapapi/v1d1/images/marker.png?20170501", locPng: dh.staticHost + "/res/litemapapi/v1d1/images/loc.png?20180918", locNewPng: dh.staticHost + "/res/litemapapi/v1d1/images/loc_new.png?20190314", zoomPng: dh.staticHost + "/res/litemapapi/v1d1/images/zoombtn.png?20180918", mapLogoPng: dh.staticHost + "/res/litemapapi/v1d1/images/logo-2x.png?20190226" }; var dp = dh; var av = "ruler.cur"; if (x.Browser.ie || x.Browser.edge) { x.extend(dp, { distCursor: "url(" + dp.imgPath + av + "),crosshair", defaultCursor: "url(" + dp.imgPath + "openhand.cur),default", draggingCursor: "url(" + dp.imgPath + "closedhand.cur),move" }) } else { if (x.Browser.firefox) { x.extend(dp, { distCursor: "url(" + dp.imgPath + av + "),crosshair", defaultCursor: "-moz-grab", draggingCursor: "-moz-grabbing" }) } else { if (x.Browser.chrome || x.Browser.safari) { x.extend(dp, { distCursor: "url(" + dp.imgPath + av + ") 2 6,crosshair", defaultCursor: "url(" + dp.imgPath + "openhand.cur) 8 8,default", draggingCursor: "url(" + dp.imgPath + "closedhand.cur) 8 8,move" }); if (x.Platform.macintosh) { dp.defaultCursor = "-webkit-grab"; dp.draggingCursor = "-webkit-grabbing" } } else { x.extend(dp, { distCursor: "url(" + dp.imgPath + av + "),crosshair", defaultCursor: "url(" + dp.imgPath + "openhand.cur),default", draggingCursor: "url(" + dp.imgPath + "closedhand.cur),move" }) } } } aI = aI || {}; aI.version = "3.0"; aI._register = []; aI.register = function (e) { this._register[this._register.length] = e }; aI.guid = 1; aI.getGUID = function (e) { return (e || "") + aI.guid++ }; var eg = window.BMAP_AUTHENTIC_KEY || ""; aI.bmapVerifyCbk = function (e) { if (e && e.error !== 0) { if (typeof map !== "undefined") { map.getContainer().innerHTML = ""; map.__listeners = {} } aI = null; var i = "百度未授权使用地图API，可能是因为您提供的密钥不是有效的百度LBS开放平台密钥，或此密钥未对本应用的百度地图JavaScriptAPI授权。您可以访问如下网址了解如何获取有效的密钥：http://lbsyun.baidu.com/apiconsole/key#。"; switch (e.error) { case 101: i = "开发者禁用了该ak的jsapi服务权限。您可以访问如下网址了解如何获取有效的密钥：http://lbsyun.baidu.com/apiconsole/key#。"; break; case 102: i = "开发者Referer不正确。您可以访问如下网址了解如何获取有效的密钥：http://lbsyun.baidu.com/apiconsole/key#。"; break }alert(i) } }; aI.verify = function () { var e = dp.apiHost + "/?qt=verify&ak=" + eg + "&callback=" + c0 + ".bmapVerifyCbk"; e0.load(e) }; aI.apiLoad = aI.apiLoad || function () { }; function dT(i, e) { this._size = i; this._cache = []; this._totalGetTimes = 0; this._totalHitTimes = 0; this._options = { clearCallback: null, removeOldCallback: null }; e = e || {}; for (var fn in e) { if (e.hasOwnProperty(fn)) { this._options[fn] = e[fn] } } } dT.prototype.setData = function (fn, fo) { var e = this._cache; var i = this._size; if (i === 0) { return } if (e.length > i) { this._removeOld() } if (!e[fn]) { e.push(fo) } e[fn] = fo; fo._key_ = fn }; dT.prototype.getHitRate = function () { return Math.round(this._totalHitTimes / this._totalGetTimes * 1000) / 1000 }; dT.prototype.getData = function (i) { var e = this._cache[i]; if (e) { this._totalHitTimes++ } this._totalGetTimes++; return e }; dT.prototype.removeData = function (fp) { if (this._options.clearCallback) { this._options.clearCallback(this._cache[fp]) } var fn = this._cache; var fq = fn[fp]; for (var fo = 0, e = fn.length; fo < e; fo++) { if (fn[fo] === fq) { fn.splice(fo, 1); break } } delete fn[fp] }; dT.prototype._removeOld = function () { var e = this._cache; var fp = Math.round(this._size * 0.6); for (var fo = 0; fo < fp; fo++) { var fn = e[fo]._key_; if (this._options.clearCallback) { this._options.clearCallback(e[fn]) } delete e[fn] } e.splice(0, fp); if (this._options.removeOldCallback) { this._options.removeOldCallback() } }; dT.prototype.clear = function () { var fn = this._cache; for (var fp = 0, e = fn.length; fp < e; fp++) { var fo = fn[fp]._key_; if (this._options.clearCallback) { this._options.clearCallback(fn[fo]) } delete fn[fo] } this._cache = fn = [] }; dT.prototype.forEach = function (fo) { var fn = this._cache; for (var fq = 0, e = fn.length; fq < e; fq++) { var fp = fn[fq]._key_; fo(fn[fp]) } }; dT.prototype.getBatch = function (fp) { var e = []; for (var fo = 0, fn = fp.length; fo < fn; fo++) { if (this.getData(fp[fo])) { e[e.length] = this.getData(fp[fo]) } } return e }; dT.prototype.clearExcept = function (fq) { var fn = this._cache; for (var e = fn.length, fp = e - 1; fp >= 0; fp--) { var fo = this._cache[fp]._key_; if (!fq[fo]) { fn.splice(fp, 1); if (this._options.clearCallback) { this._options.clearCallback(fn[fo]) } delete fn[fo] } } }; dT.prototype.getDataCount = function () { return this._cache.length }; function V() { } x.extend(V.prototype, { centerAndZoomIn: function (ft, fn, fu) { var fr = this; if (!ft && !fn) { return } ft = ft || this.centerPoint; fn = fn || this.zoomLevel; fn = this._getProperZoom(fn).zoom; if (this.mapType === BMAP_EARTH_MAP) { if (!this._earth) { this.mapType = BMAP_NORMAL_MAP; this.temp.originMapType = BMAP_EARTH_MAP; function fs() { fr._earth = new aI.Earth(fr, { showRealSunlight: fr.config.showRealSunlight, showMilkyway: fr.config.showMilkyway, earthBackground: fr.config.earthBackground }); fr._proxyEarthEvents(); fr._changeEarthMapType(BMAP_EARTH_MAP); x.extend(fr, aI.EarthView.prototype); if (!fr._navigationCtrl && fr.config.showControls) { fr._navigationCtrl = new aI.NavigationControl3D(fr) } delete fr.temp.originMapType } cI.load("earth", function () { if (aI["FeatureStyle" + fr.config.style]) { fs() } else { fr.loadMapStyleFiles(function () { fs() }) } }) } } this.lastLevel = this.zoomLevel || fn; this.zoomLevel = fn; var fp = new aB("onload"); fp.point = ft; fp.zoom = fn; this.centerPoint = this.restrictCenter(new e5(ft.lng, ft.lat)); if (this.centerPoint.zoom) { this.zoomLevel = this.centerPoint.zoom } this.defaultZoomLevel = this.defaultZoomLevel || this.zoomLevel; this.defaultCenter = this.defaultCenter || this.centerPoint; if (!this.loaded && !(this.temp.originMapType === BMAP_EARTH_MAP)) { var i = this.config.defaultMaxBounds; var fq = new bT(i, "baidu", this.mapType); var fo = new bI({ mapType: this.mapType, copyright: fq, customLayer: false, baseLayer: true, tileTypeName: "web" }); fo._isInnerLayer = true; this.addTileLayer(fo); if (this.mapType === BMAP_SATELLITE_MAP && this._isHybridShow === true) { this._addHybirdMap() } } this.dispatchEvent(fp); this.loaded = true; fu = fu || {}; fu.callback && fu.callback() }, _setPlatformPosition: function (fu, ft, fx) { fx = fx || {}; if (fu === 0 && ft === 0 && !fx.point) { return } if (isNaN(fx.initMapOffsetX)) { fx.initMapOffsetX = this.offsetX } if (isNaN(fx.initMapOffsetY)) { fx.initMapOffsetY = this.offsetY } var fv = fu + fx.initMapOffsetX; var fs = ft + fx.initMapOffsetY; if (fx.point) { var i = this.restrictCenter(fx.point); if (!i.equals(this.centerPoint)) { this.centerPoint = i.clone(); this.fire(new aB("oncenter_changed")) } } else { var fo = this.offsetX - fv; var e = this.offsetY - fs; var fn = this.getZoomUnits(); var fr = this.centerPoint.lng; var fq = this.centerPoint.lat; var fp = new e5(fr, fq); this.centerPoint = this.restrictCenter(new e5(fp.lng + fo * fn, fp.lat - e * fn), fn); this.fire(new aB("oncenter_changed")); if (this.zoomLevel < 10) { fv = this.offsetX - (this.centerPoint.lng - fp.lng) / fn; fs = this.offsetY + (this.centerPoint.lat - fp.lat) / fn } } this.offsetX = fv; this.offsetY = fs; var fw = this.platform.style; fw.left = fv + "px"; fw.top = fs + "px"; this.maskLayer.style.left = -fv + "px"; this.maskLayer.style.top = -fs + "px"; if (fx.dispatchEvent !== false) { this.dispatchEvent(new aB("onmoving")) } }, zoomTo: function (e, fr, fv) { fv = fv || {}; fv.zoomCenter = fr; if (fv.noAnimation !== true) { this.deepZoomTo(e, fv); return } if (typeof e !== "number") { return } var fp = be[this.mapType]; if (!fp) { return } var fn = e; e = this._getProperZoom(e).zoom; if (e === this.zoomLevel) { var fs = new aB("onzoomexceeded"); fs.targetZoom = fn; this.dispatchEvent(fs); fv.callback && fv.callback(); return } this.lastLevel = this.zoomLevel; if (fr) { this.temp._cPoint = fr; this.temp._cPixel = this.pointToPixelIn(fr) } else { if (this.getInfoWindow()) { var fu = this.getInfoWindow().getPoint(); this.temp._cPixel = this.pointToPixelIn(fu); this.temp._cPoint = fu } } if (this.config.zoomCenter) { fr = this.config.zoomCenter; this.temp._cPoint = fr; this.temp._cPixel = this.pointToPixelIn(fr) } if (fr || this.temp.infoWin && this.temp.infoWin.isOpen()) { var i = this.temp._cPoint; var ft = this.temp._cPixel; var fo = this.getZoomUnits(e); var fq = new e5(i.lng + fo * (this.width / 2 - ft.x), i.lat - fo * (this.height / 2 - ft.y)); this.centerPoint = this.restrictCenter(fq, fo, e); if (this.centerPoint.zoom) { e = this.centerPoint.zoom } } if (fv.fireEvent !== false) { this.dispatchEvent(new aB("onzoomstart")) } if (e !== this.zoomLevel) { this.zoomLevel = e; this.dispatchEvent(new aB("onzooming")); this.dispatchEvent(new aB("onzoomstartcode")) } if (fv.fireEvent !== false) { this.dispatchEvent(new aB("onzoomend")) } if (fv.callback) { fv.callback() } }, deepZoomMedia: function (e) { var i = this; if (!i.temp.isStdCtrlBusy) { i.temp.isStdCtrlBusy = true; i.deepZoomTo(i.zoomLevel + e); setTimeout(function () { i.temp.isStdCtrlBusy = false }, 400) } }, deepZoomTo: function (fs, fo) { fo = fo || {}; var fq = fs - this.zoomLevel; var fp = this._getProperZoom(fs); if (fp.exceeded) { var e = new aB("onzoomexceeded"); e.targetZoom = fs; this.dispatchEvent(e); return } var i; if (fo.zoomCenter) { i = this.pointToPixelIn(fo.zoomCenter) } else { if (this.getInfoWindow()) { i = this.pointToPixelIn(this.getInfoWindow().getPoint(), { zoom: this.lastLevel }) } else { var i = new cP(this.width / 2, this.height / 2) } } this.lastLevel = this.zoomLevel; var fr = this.deepZoom || new aV(this); var fn = fq > 0 ? 1 : -1; fr.zoomMap(i, fq, fn, null, fo) }, flyToIn: function (ft, e) { if (e === this.zoomLevel) { this.panToIn(ft); return } var fq = this._getProperZoom(e); if (fq.exceeded) { var fu = new aB("onzoomexceeded"); fu.targetZoom = e; this.dispatchEvent(fu); return } var fs = e - this.zoomLevel; var fn = new cP(this.width / 2, this.height / 2); var i = this.pointToPixelIn(ft); var fr = new cH(i.x - fn.x, i.y - fn.y); this.lastLevel = this.zoomLevel; if (Math.abs(fs) >= 4 || Math.abs(fr.width) > this.width || Math.abs(fr.height) > this.height) { this.centerAndZoomIn(ft, e); return } var fp = this.deepZoom || new aV(this); var fo = fs > 0 ? 1 : -1; fp.zoomMap(i, fs, fo, fr) }, panToIn: function (i, fn) { fn = fn || {}; if (!i || i.equals(this.centerPoint)) { fn.callback && fn.callback(); return } var fo = this.pointToPixelIn(i); var e = Math.round(this.width / 2); var fp = Math.round(this.height / 2); if (Math.abs(e - fo.x) > this.width || Math.abs(fp - fo.y) > this.height || fn.noAnimation === true) { this._panToIn(e - fo.x, fp - fo.y, i); fn.callback && fn.callback() } else { this._panBy(e - fo.x, fp - fo.y, fn) } }, _panToIn: function (i, e, fo) { var fn = this.temp; if (fn.operating === true) { return } if (fn.dragAni) { fn.dragAni.stop(); fn.dragAni = null; this.dispatchEvent(new aB("onmoveend")) } this.dispatchEvent(new aB("onmovestart")); this._setPlatformPosition(i, e, { point: fo }); this.dispatchEvent(new aB("onmoveend")) }, panBy: function (i, e, fn) { fn = fn || {}; i = Math.round(i) || 0; e = Math.round(e) || 0; if (Math.abs(i) <= this.width && Math.abs(e) <= this.height && fn.noAnimation !== true) { this._panBy(i, e, fn) } else { this._panToIn(i, e); fn.callback && fn.callback() } }, _panBy: function (i, e, fp) { if (this.temp.operating === true) { return } fp = fp || {}; this.dispatchEvent(new aB("onmovestart")); var fo = this; var fn = fo.temp; fn.pl = fo.offsetX; fn.pt = fo.offsetY; if (fn.tlPan) { fn.tlPan.cancel() } if (fn.dragAni) { fn.dragAni.stop(); fn.dragAni = null; this.dispatchEvent(new aB("onmoveend")) } fn.tlPan = new l({ fps: fp.fps || fo.config.fps, duration: fp.duration || fo.config.actionDuration, transition: fp.transition || bq.easeInOutQuad, render: function (fq) { this.terminative = fo.temp.operating; if (fo.temp.operating) { return } fo._setPlatformPosition(Math.ceil(i * fq), Math.ceil(e * fq), { initMapOffsetX: fn.pl, initMapOffsetY: fn.pt }) }, finish: function (fq) { fo.dispatchEvent(new aB("onmoveend")); fo.temp.tlPan = false; if (fo.temp.stopArrow === true) { fo.temp.stopArrow = false; if (fo.temp.arrow !== 0) { fo._arrow() } } fp.callback && fp.callback() } }) }, getCenterIn: function () { return this.centerPoint }, getZoom: function () { return this.zoomLevel }, setTilt: function () { }, getTilt: function () { return this._tilt }, setHeading: function () { }, getHeading: function () { return this._heading }, restrictCenter: function (fs, fp, ft) { this.isRestrict = false; fp = fp || this.getZoomUnits(); ft = ft || this.zoomLevel; var fn = this.pixelToPointIn(new cP(0, 0), { center: fs, zoom: ft }); var fq = this.pixelToPointIn(new cP(0, this.height), { center: fs, zoom: ft }); if (this.zoomLevel < 5) { if (fn.lat > bV.MAX_LAT && fq.lat < bV.MIN_LAT) { this.isRestrict = true; var i = bV.MAX_LAT - fs.lat; var e = fs.lat - bV.MIN_LAT; var fr; if (i < e) { fr = i / (this.height / 2) } else { fr = e / (this.height / 2) } var fo = 18 - c2(fr); this.zoomLevel = Math.ceil(fo); fs.zoom = Math.ceil(fo); return fs } } if (fn.lat > bV.MAX_LAT) { this.isRestrict = true; fs.lat = bV.MAX_LAT - this.height / 2 * fp } else { if (fq.lat < bV.MIN_LAT) { this.isRestrict = true; fs.lat = bV.MIN_LAT + this.height / 2 * fp } } return fs } }); function bV(e, fn) { if (typeof e === "string") { e = document.getElementById(e) } cK.call(this); this.container = e; this.width = e.clientWidth; this.height = e.clientHeight; this.offsetX = 0; this.offsetY = 0; this._setStyle(e); e.unselectable = "on"; e.innerHTML = ""; x.ac(e, "bmap-container"); e.appendChild(this.render()); this._initDate = new Date(); this.platform = e.children[0]; this.maskLayer = this.platform.children[0]; this._panes = {}; this.centerPoint = new e5(0, 0); this.zoomLevel = 0; this._heading = 0; this._tilt = 0; this._bounds = new cw(); this.lastLevel = 0; this._lock = false; this._enableTiltZoom = 7; this._enableHeadingZoom = 7; this.defaultZoomLevel = null; this.defaultCenter = null; this.zoomEventStatus = "idle"; this.currentOperation = cy.idle; this._setConfig(fn); this._initMapRenderType(); this._animationInfo = {}; this._animationInfoUnstopable = {}; this.suspendLoad = false; this._customTileLabels = []; if (this._renderType === "webgl") { this._workerMgr = new ed(this); this._featureMgr = new bZ(); x.extend(this, bU.prototype); this.jobScheduler = new dV(this); this.benchmark = new M(); this._setupWebGLMap(); this.deviceInfo = { hardwareInfo: { renderer: "", vendor: "" } }; if (aA.ifSupportWebGL._renderer) { this.deviceInfo.hardwareInfo.renderer = aA.ifSupportWebGL._renderer; this.deviceInfo.hardwareInfo.vendor = aA.ifSupportWebGL._vendor } } else { x.extend(this, V.prototype) } if (!be[this.config.mapType]) { this.config.mapType = BMAP_NORMAL_MAP } if (this.config.mapType === BMAP_EARTH_MAP && !this.config.enableEarth) { if (this.forceEnableEarth() === false) { this.config.mapType = BMAP_NORMAL_MAP } } this.mapType = this.config.mapType; this.preMapType = null; if (this.config.enableEarth) { var fq = this.maskLayer.style; fq.opacity = 0; fq.background = "#000"; if (this.config.mapType === BMAP_EARTH_MAP) { fq.opacity = 1 } setTimeout(function () { fq.WebkitTransition = fq.transition = "opacity .4s" }, 100) } this._isHybridShow = this.config.showStreetLayer; this.temp = { operating: false, arrow: 0, lastDomMoveTime: 0, lastLoadTileTime: 0, lastMovingTime: 0, canKeyboard: false, I: function (i) { return x.I(i) }, curSpots: [], curSpotsArray: [], curAreaSpot: null, spotsGuid: 1, registerIndex: -1, hoverOnSpot: null, isStdCtrlBusy: false }; window.InstanceCore = this.temp.I; this.platform.style.cursor = this.config.defaultCursor; this._bind(); for (var fo = 0; fo < aI._register.length; fo++) { aI._register[fo](this) } this.temp.registerIndex = fo; var fp = this; if (this._renderType === "webgl") { cI.load("oppcgl", function () { fp._asyncRegister() }) } else { cI.load("oppc", function () { fp._asyncRegister() }) } if (this.config.mapType === "B_EARTH_MAP") { if (!aI.Earth) { cI.load("earth", function () { }) } else { fp._syncAndChangeMapType("B_EARTH_MAP") } } } bV.MAX_TILT = 87; bV.MAX_DRAG_TILT = 73; bV.MAX_DRAG_TILT_L2 = 50; bV.MIN_TILT = 0; bV.MAX_LAT = 19431424; bV.MIN_LAT = -16023552; bV.WORLD_SIZE_MC_HALF = 20037726.372307256; bV.WORLD_SIZE_MC = bV.WORLD_SIZE_MC_HALF * 2; bV.RIGHT_EDGE_POINT = new e5(bV.WORLD_SIZE_MC_HALF, 0); bV.LEFT_EDGE_POINT = new e5(-bV.WORLD_SIZE_MC_HALF, 0); bV.inherits(cK, "Map"); x.extend(bV.prototype, { render: function () { var e = H("div", { id: "platform" }); var fo = e.style; fo.overflow = "visible"; fo.position = "absolute"; fo.zIndex = 5; fo.top = fo.left = "0px"; var i = H("div", { id: "mask", "class": "BMap_mask" }); var fn = i.style; fn.position = "absolute"; fn.top = fn.left = "0px"; fn.zIndex = "9"; fn.overflow = "hidden"; fn.WebkitUserSelect = "none"; fn.width = this.width + "px"; fn.height = this.height + "px"; e.appendChild(i); return e }, _initMapRenderType: function () { var e = this.config.forceRenderType; if (e === "dom") { this._renderType = "dom"; return } else { if (e === "canvas") { if (aA.isModernBrowser) { this._renderType = "canvas"; return } } else { if (e === "webgl") { if (aA.ifSupportWebGL()) { this._renderType = "webgl"; return } } } } if (aA.ifSupportWebGL() && aA.ifEnableWebGLMap()) { this._renderType = "webgl"; return } if (aA.isModernBrowser && aA.ifEnableCanvas2dMap()) { this._renderType = "canvas"; return } this._renderType = "dom" }, _setConfig: function (i) { i = i || {}; this.config = { bottomOffset: 0, clickInterval: 200, enableDragging: true, enableKeyboard: false, enableDblclickZoom: true, enableContinuousZoom: true, enableWheelZoom: false, enablePinchZoom: true, enableRotateGestures: true, enableTiltGestures: true, fixCenterWhenPinch: false, enableAutoResize: true, zoomCenter: null, fps: 60, zoomerDuration: 240, actionDuration: 450, defaultCursor: dp.defaultCursor, draggingCursor: dp.draggingCursor, coordType: BMAP_COORD_MERCATOR, mapType: BMAP_NORMAL_MAP, drawer: BMAP_SYS_DRAWER, enableInertialDragging: true, drawMargin: 500, drawMarginGL: 500, enableFulltimeSpotClick: false, enableResizeOnCenter: false, isModernBrowser: aA.isModernBrowser, forceRenderType: "", textRenderType: d9() ? "canvas" : "image", ratio: ay() >= 1.5 ? 2 : 1, enableEarth: aA.ifEnableEarth(), defaultMaxBounds: new cw(new e5(-21364736, -10616832), new e5(23855104, 15859712)), showControls: false, showRealSunlight: true, showMilkyway: true, earthBackground: null, showStreetLayer: true, minZoom: null, maxZoom: null, style: "default", enableIconClick: false, autoSafeArea: false, ak: null, restrictCenter: true }; for (var fn in i) { if (i.hasOwnProperty(fn)) { this.config[fn] = i[fn]; if (fn === "fixCenterWhenResize") { this.config.enableResizeOnCenter = i[fn] } } } if (i.style) { if (i.style["styleId"]) { this.config.style = i.style["styleId"] } else { this.config.style = i.style["styleJson"] } } this._setTextRenderType(); this._displayOptions = { poi: true, poiText: true, poiIcon: true, overlay: true, layer: true, building: true, indoor: true, street: true, skyColors: ["rgb(226, 237, 248)", "rgb(186, 211, 252)"], isFlat: false }; if (i.displayOptions) { for (var e in i.displayOptions) { if (i.displayOptions.hasOwnProperty(e)) { this._displayOptions[e] = i.displayOptions[e] } } } if (this.config.restrictCenter === false) { this._enableTiltZoom = 0; this._enableHeadingZoom = 0 } }, getMinZoom: function () { var fn; if (be[this.mapType][this._renderType]) { fn = be[this.mapType][this._renderType].minZoom } else { fn = be[this.mapType].minZoom } if (this.config.minZoom !== null && this.config.minZoom >= fn) { fn = this.config.minZoom } if (this.mapType === "B_EARTH_MAP") { return fn } var i = this.getSize(); var e = this.worldSize(fn); while (e < i.width) { fn++; e = this.worldSize(fn) } return fn }, getMaxZoom: function () { var e; if (be[this.mapType][this._renderType]) { e = be[this.mapType][this._renderType].maxZoom } else { e = be[this.mapType].maxZoom } if (this.config.maxZoom !== null && this.config.maxZoom <= e) { e = this.config.maxZoom } return e }, _drawFrame: function () { this._webglMapScene._painter.draw() }, _setupWebGLMap: function () { var e = this; cI.load("mapgl", function () { e._asyncRegister() }) }, _setStyle: function (i) { var e = i.style; e.overflow = "hidden"; if (d4(i).position !== "absolute") { e.position = "relative" } e.backgroundImage = "url(" + dp.imgPath + "bg.png)"; e.textAlign = "left"; e.touchAction = e.MSTouchAction = "none" }, _bind: function () { var e = this; if (e._renderType !== "webgl") { e._watchSize = function () { var fn = e.getContainerSize(); if (e.width !== fn.width || e.height !== fn.height) { var fr = (fn.width - e.width) / 2; var ft = (fn.height - e.height) / 2; var fo = e.getZoomUnits(); var fq = e.centerPoint; if (fq && !e.config.enableResizeOnCenter) { e.centerPoint = new e5(fq.lng + fr * fo, fq.lat - ft * fo) } e.maskLayer.style.width = (e.width = fn.width) + "px"; e.maskLayer.style.height = (e.height = fn.height) + "px"; var fp = new aB("onresize"); fp.size = fn; e.dispatchEvent(fp); e.fire(new aB("onsize_changed")); var i = parseInt(e.platform.style.left, 10) || 0; var fs = parseInt(e.platform.style.top, 10) || 0; if (e.currentOperation !== "undefined" && e.currentOperation !== cy.idle && (e.offsetX !== i || e.offsetY !== fs)) { e._setPlatformPosition(i, fs) } } } } else { e._watchSize = function () { var i = e.getContainerSize(); if (e.width !== i.width || e.height !== i.height) { var fo = e.getSize(); e.maskLayer.style.width = (e.width = i.width) + "px"; e.maskLayer.style.height = (e.height = i.height) + "px"; if (ay() !== e.config.ratio) { e.config.ratio = ay() } var fp = new aB("onresize"); fp.size = i; e.dispatchEvent(fp); var fn = new aB("onsize_changed"); fn.size = i; fn.oldSize = fo; e.fire(fn) } } } if (e.config.enableAutoResize) { e.temp.autoResizeTimer = setInterval(e._watchSize, 16) } this.on("size_changed", function () { var i = e.getMinZoom(); if (e.zoomLevel < i) { e.setZoomIn(i, { noAnimation: true }) } }); this.on("zoom_changed", function () { this.dispatchEvent(new aB("onzooming")) }) }, addControl: function (e) { if (e && a7(e._i)) { e._i(this); this.dispatchEvent(new aB("onaddcontrol", e)) } }, removeControl: function (e) { if (e && a7(e.remove)) { e.remove(); this.dispatchEvent(new aB("onremovecontrol", e)) } }, addContextMenu: function (e) { if (e) { e.initialize(this); this.dispatchEvent(new aB("onaddcontextmenu", e)) } }, removeContextMenu: function (e) { if (e) { this.dispatchEvent(new aB("onremovecontextmenu", e)); e.remove() } }, addOverlay: function (i) { if (i && a7(i._i)) { var fn = new aB("onbeforeaddoverlay", i); fn.overlay = i; this.dispatchEvent(fn); i._i(this); fn = new aB("onaddoverlay", i); fn.overlay = i; this.dispatchEvent(fn) } }, removeOverlay: function (i) { if (i && a7(i.remove)) { var fn = new aB("onremoveoverlay", i); fn.overlay = i; i.remove(); this.dispatchEvent(fn) } }, clearOverlays: function () { this.dispatchEvent(new aB("onclearoverlays")) }, addTileLayer: function (fp) { if (!fp) { return } for (var fo = 0, e = this.tileMgr.tileLayers.length; fo < e; fo++) { var fn = this.tileMgr.tileLayers[fo]; if (fn === fp || fn.getMapType() === fp.getMapType()) { return } } fp.initialize(this); this.dispatchEvent(new aB("onaddtilelayer", fp)) }, removeTileLayer: function (e) { if (e) { e.remove(); this.dispatchEvent(new aB("onremovetilelayer", e)) } }, getTileLayer: function (e) { if (this.tileMgr) { return this.tileMgr.getTileLayer(e) } return null }, setMapType: function (e) { var i = this; if (this.mapType === e || this._mapTypeChanging) { return } if (e === BMAP_EARTH_MAP && !this.config.enableEarth) { return } if (this._earth && this._earth.getLock()) { return } this._mapTypeChanging = true; this.preMapType = this.mapType; this._boundsInPreMapType = this.getBoundsIn(); if (this.preMapType === BMAP_SATELLITE_MAP) { this._preStreetLayerShow = this._isHybridShow } if (e === BMAP_EARTH_MAP) { if (!aI.Earth) { cI.load("earth", function () { i._syncAndChangeMapType(e) }); return } i._syncAndChangeMapType(e) } else { if (this.preMapType !== BMAP_EARTH_MAP) { this._changeFlatMapType(e); this._mapTypeChanging = false } else { this._setMapTypeStatus(e, function (fn, fo) { var fp = i._earth.getEarthCanvas(); i._changeFlatMapType(e, this.preMapType); if (i._mapTypeChangAni) { i._mapTypeChangAni.stop() } i._mapTypeChangAni = dB.start({ el: fp, style: "opacity", startValue: 1, endValue: 0, duration: 200, callback: function () { i._mapTypeChangAni = null; i._mapTypeChanging = false } }); fn = cR.convertLL2MC(fn); if (i._renderType === "webgl") { x.extend(i, bU.prototype); i.setCenterIn(fn, { noAnimation: true }); i.setZoomIn(fo, { noAnimation: true }) } else { x.extend(i, V.prototype); i.centerAndZoomIn(fn, fo) } }) } } }, _changeFlatMapType: function (fr) { if (!fr || !be[fr]) { return } var fz = this.preMapType; this.mapType = fr; var fo = this.getTileLayer(fz); if (fo) { this.removeTileLayer(fo) } if (fz !== BMAP_EARTH_MAP || this._renderType !== "webgl" || this.baseLayerAdded !== true) { var fn = new cw(new e5(-21364736, -10616832), new e5(23855104, 15859712)); var fw = new bT(fn, "baidu", fr); var fy = this._renderType === "webgl" ? 2 : 1; var fp = new bI({ mapType: fr, copyright: fw, dataType: fy, customLayer: false, baseLayer: true, tileTypeName: "na" }); fp._isInnerLayer = true; this.addTileLayer(fp); if (this._renderType === "webgl" && !this.baseLayerAdded) { this.baseLayerAdded = true } } if (fz === BMAP_SATELLITE_MAP) { this._preStreetLayerShow = this._isHybridShow; this._removeHybirdMap() } else { if (fr === BMAP_SATELLITE_MAP) { if (this._preStreetLayerShow === true || typeof this._preStreetLayerShow === "undefined") { this._addHybirdMap() } } } var ft = this.tileMgr.tileLayers; for (var fs = 0, fq = ft.length; fs < fq; fs++) { var fu = ft[fs]; var fx = fu.tilesDiv; if (!fx) { continue } if (!fu._isInnerLayer && fx.style.visibility === "hidden") { fx.style.visibility = "" } } var fv = new aB("onmaptypechange"); fv.zoomLevel = this.zoomLevel; fv.mapType = fr; fv.exMapType = fz; this.dispatchEvent(fv) }, showStreetLayer: function (e) { e ? this._addHybirdMap() : this._removeHybirdMap() }, hideStreetLayer: function (e) { this._hideStreetLayerOptions = e; this._removeHybirdMap(e) }, _addHybirdMap: function () { this._isHybridShow = true; if (this.mapType === "B_EARTH_MAP") { if (this._earth) { this._earth.showStreetLayer() } return } if (this._hybridTileLayer) { this.addTileLayer(this._hybridTileLayer); var fq = new aB("onstreetlayer_show"); this.dispatchEvent(fq); return } var fp = new cw(new e5(-21364736, -10616832), new e5(23855104, 15859712)); var fn = new bT(fp, "", BMAP_HYBRID_MAP); var i = new bI({ copyright: fn, transparentPng: true, tileTypeName: "web" }); i._isInnerLayer = true; var fo = this.isCanvasMap(); i.getTilesUrl = function (fr, fw) { var fu = be.B_STREET_MAP; var fv = ad("ditu", "satelliteStreet"); var fs = fv.ver; var e = fv.udt; var ft = fu.tileUrls[Math.abs(fr.x + fr.y) % fu.tileUrls.length] + "?qt=vtile&x=" + (fr.x + "").replace(/-/gi, "M") + "&y=" + (fr.y + "").replace(/-/gi, "M") + "&z=" + fw + "&styles=sl&v=" + fs + "&udt=" + e + "$scaler=" + ay() + "&showtext=" + (fo ? 0 : 1); return ft }; this._isHybridShow = true; this.addTileLayer(i); this._hybridTileLayer = i; var fq = new aB("onstreetlayer_show"); this.dispatchEvent(fq) }, _removeHybirdMap: function (i) { this._isHybridShow = false; if (this.mapType === "B_EARTH_MAP") { if (this._earth) { this._earth.hideStreetLayer(i) } return } if (this._hybridTileLayer) { this.removeTileLayer(this._hybridTileLayer); var fn = new aB("onstreetlayer_hide"); this.dispatchEvent(fn) } }, isStreetLayerShow: function () { return this._isHybridShow }, getTileId: function (e, fq) { var fo = be[this.mapType]; if (typeof fo !== "object") { return null } var fn = fo.baseUnits * Math.pow(2, (fo.zoomLevelBase - fq)); var fp = parseInt(e.lng / fn, 10); var i = parseInt(e.lat / fn, 10); return { row: fp, column: i, level: fq } }, reset: function () { this.centerAndZoomIn(this.defaultCenter, this.defaultZoomLevel, true) }, setOptions: function (e) { e = e || {}; for (var fn in e) { if (e.hasOwnProperty(fn)) { var i = true; if (typeof e[fn] !== "object") { i = e[fn] !== this.config[fn] } this.config[fn] = e[fn]; if (fn === "fixCenterWhenResize") { this.config.enableResizeOnCenter = e[fn] } if (!i) { continue } switch (fn) { case "style": this.fire(new aB("onstyle_willchange")); var fo = this; this.loadMapStyleFiles(function () { fo.fire(new aB("onstyle_changed")) }); break; case "enableAutoResize": if (e[fn] === true) { this.enableAutoResize() } else { this.disableAutoResize() } break; case "displayOptions": this.setDisplayOptions(e[fn]); break } } } }, enableDragging: function () { this.config.enableDragging = true }, disableDragging: function () { this.config.enableDragging = false }, enableInertialDragging: function () { this.config.enableInertialDragging = true }, disableInertialDragging: function () { this.config.enableInertialDragging = false }, enableScrollWheelZoom: function () { this.config.enableWheelZoom = true }, disableScrollWheelZoom: function () { this.config.enableWheelZoom = false }, enableContinuousZoom: function () { this.config.enableContinuousZoom = true }, disableContinuousZoom: function () { this.config.enableContinuousZoom = false }, enableResizeOnCenter: function () { this.config.enableResizeOnCenter = true }, disableResizeOnCenter: function () { this.config.enableResizeOnCenter = false }, enableDoubleClickZoom: function () { this.config.enableDblclickZoom = true }, disableDoubleClickZoom: function () { this.config.enableDblclickZoom = false }, enableKeyboard: function () { this.config.enableKeyboard = true }, disableKeyboard: function () { this.config.enableKeyboard = false }, getSize: function () { return new cH(this.width, this.height) }, enablePinchToZoom: function () { this.config.enablePinchZoom = true }, disablePinchToZoom: function () { this.config.enablePinchZoom = false }, enableAutoResize: function () { this.config.enableAutoResize = true; this._watchSize(); if (!this.temp.autoResizeTimer) { this.temp.autoResizeTimer = setInterval(this._watchSize, 16) } }, disableAutoResize: function () { this.config.enableAutoResize = false; if (this.temp.autoResizeTimer) { clearInterval(this.temp.autoResizeTimer); this.temp.autoResizeTimer = null } }, checkResize: function () { this._watchSize() }, resize: function () { this._watchSize() }, getContainerSize: function () { return new cH(this.container.clientWidth, this.container.clientHeight) }, _getProperZoom: function (fn) { if (!fn) { fn = this.zoomLevel } var i = this.getMinZoom(); var e = this.getMaxZoom(); var fo = false; if (fn < i) { fo = true; fn = i } if (fn > e) { fo = true; fn = e } if (this._renderType !== "webgl") { fn = Math.round(fn) } return { zoom: fn, exceeded: fo } }, getContainer: function () { return this.container }, getZoomUnits: function (fn) { if (this.mapType === BMAP_EARTH_MAP) { return Math.pow(2, 18 - this._earth.getImageZoom()) } var e = be[this.mapType]; if (typeof e !== "object") { return null } var i = fn || this.zoomLevel; return Math.pow(2, (e.zoomLevelBase - i)) }, pointToPixelIn: function (fx, fz) { if (!fx) { return } fz = fz || {}; if (this.mapType === BMAP_EARTH_MAP) { var fo; if (!fx._llPt) { fo = cR.convertMC2LL(fx); fx._llPt = fo } fo = fx._llPt; var ft = null; var fn = null; if (typeof fz.zoom === "number") { var fw = this._earth; var fy = fw._getEarthZoomByImgZoom(fz.zoom); if (fy <= 3) { ft = fw._generateTmpPMatrix(fy) } fn = fw._generateTmpMVMatrix(fw.getCenter(), fy) } var fp = this._earth.fromLatLngToPixel(fo, { useRound: false, isCalcOnBack: true, matrixInfo: { modelViewMatrix: fn, projectionMatrix: ft } }); return fp } if ((this._heading % 360 === 0 && this._tilt === 0) || !this._webglMapCamera) { var fv = this.getZoomUnits(fz.zoom); var fr = fz.center || this.centerPoint; var i = this.width / 2; var fq = this.height / 2; var fu = (fx.lng - fr.lng) / fv + i; var fs = (fr.lat - fx.lat) / fv + fq; if (fz.useRound !== false) { fu = Math.round(fu); fs = Math.round(fs) } return new cP(fu, fs) } var e = this._webglMapCamera.fromMCToScreenPixel(fx.lng, fx.lat, fz); if (fz.useRound === false) { return e } e.x = Math.round(e.x); e.y = Math.round(e.y); return e }, pixelToPointIn: function (e, fv) { if (!e) { return } fv = fv || {}; if (this.mapType === BMAP_EARTH_MAP) { if (typeof fv.zoom === "number") { var ft = this._earth; var fq = null; var fn = null; var fu = ft._getEarthZoomByImgZoom(fv.zoom); if (fu <= 3) { fq = ft._generateTmpPMatrix(fu) } fn = ft._generateTmpMVMatrix(ft.getCenter(), fu) } var i = this._earth.fromPixelToLatLng(e, { matrixInfo: { modelViewMatrix: fn, projectionMatrix: fq } }); if (i === null) { return null } return cR.convertLL2MC(i) } if ((this._heading % 360 !== 0 || this._tilt > 0) && this._webglMapCamera) { return this._webglMapCamera.fromScreenPixelToMC(e.x, e.y, fv) } var fr = fv.center || this.centerPoint; var fs = this.getZoomUnits(fv.zoom); var fp = fr.lng + fs * (e.x - this.width / 2); var fo = fr.lat - fs * (e.y - this.height / 2); return new e5(fp, fo) }, pointToOverlayPixelIn: function (e, fo) { fo = fo || {}; var fn = this.pointToPixelIn(e, { zoom: fo.zoom, center: fo.center, forLabel: true, frustumTest: true }); if (!fn) { return } if (fo.fixPosition && this.mapType !== "B_EARTH_MAP") { var fp = this.getSize(); var i = this.worldSize(fo.zoom); if (fn.x > fp.width) { while (fn.x > fp.width) { fn.x -= i } } else { if (fn.x < 0) { while (fn.x < 0) { fn.x += i } } } } if (this._renderType === "webgl") { return fn } fn.x -= this.offsetX; fn.y -= this.offsetY; return fn }, overlayPixelToPointIn: function (i, e) { if (!i) { return } var fn = i.clone(); if (this._renderType !== "webgl") { fn.x += this.offsetX; fn.y += this.offsetY } return this.pixelToPointIn(fn, e) }, lnglatToMercator: function (e, fo) { var i = new e5(e, fo); var fn = cR.convertLL2MC(i); return [fn.lng, fn.lat] }, mercatorToLnglat: function (i, e) { if (isNaN(i) || isNaN(e)) { return [] } i = parseFloat(i); e = parseFloat(e); var fo = new e5(i, e); var fn = cR.convertMC2LL(fo); return [fn.lng, fn.lat] }, getBoundsIn: function () { var fB = arguments[0]; if (this.mapType === BMAP_EARTH_MAP && this._earth) { var fv = this._earth.getCustomBounds(); if (!fv) { return this.config.defaultMaxBounds } var fu = fv.getSouthWest(); var e = fv.getNorthEast(); if (fu.lng > e.lng) { e.lng = 180 } var fS = cR.convertLL2MC(fu); var fI = cR.convertLL2MC(e); var fy = this.config.defaultMaxBounds; var fH = Math.max(fS.lng, fy.sw.lng); var fG = Math.max(fS.lat, fy.sw.lat); var fA = Math.min(fI.lng, fy.ne.lng); var fz = Math.min(fI.lat, fy.ne.lat); var fD = new cw(new e5(fH, fG), new e5(fA, fz)); fD.pointBottomLeft = new e5(fH, fG); fD.pointBottomRight = new e5(fA, fG); fD.pointTopLeft = new e5(fH, fz); fD.pointTopRight = new e5(fA, fz); fD.setMinMax(); fD.makeNormalizedPoint(this._earth.getHeading()); return fD } fB = fB || {}; var fp = fB.margins || [0, 0, 0, 0]; var fN = this.pixelToPointIn({ x: fp[3], y: this.height - fp[2] }, fB); var fR = this.pixelToPointIn({ x: this.width - fp[1], y: fp[0] }, fB); var fF = typeof fB.heading === "number" ? fB.heading : (this._heading % 360); var fn = typeof fB.tilt === "number" ? fB.tilt : this._tilt; var fx = this._webglMapCamera; if ((fF === 0 && fn === 0) || !fx) { this._bounds.setSouthWest(fN); this._bounds.setNorthEast(fR); this._bounds.pointBottomLeft = fN; this._bounds.pointBottomRight = new e5(fR.lng, fN.lat); this._bounds.pointTopRight = fR; this._bounds.pointTopLeft = new e5(fN.lng, fR.lat); this._bounds.setMinMax(); this._bounds.makeNormalizedPoint(fF); return this._bounds } var fE = this.pixelToPointIn({ x: fp[3], y: fp[0] }, fB); var fo = fx.getPosition(); var fT = Math.sqrt(Math.pow(fE.lng - fo[0], 2) + Math.pow(fE.lat - fo[1], 2)); var fO = this.getZoomUnits(); var fV = fT / fO; var fL = fx._frustumSideLen; var ft = fx._fovy; if (fV > fL || (90 - fn) < ft / 2) { var fU = [fE.lng - fo[0], fE.lat - fo[1]]; if ((90 - fn) < ft / 2) { fU[0] = -fU[0]; fU[1] = -fU[1] } var fM = fL * fO; var fs = [fU[0] / fT * fM + fo[0], fU[1] / fT * fM + fo[1]]; var fJ = [fR.lng - fo[0], fR.lat - fo[1]]; if ((90 - fn) < ft / 2) { fJ[0] = -fJ[0]; fJ[1] = -fJ[1] } var fq = [fJ[0] / fT * fM + fo[0], fJ[1] / fT * fM + fo[1]]; fE.lng = fs[0]; fE.lat = fs[1]; fR.lng = fq[0]; fR.lat = fq[1] } var fC = this.pixelToPointIn({ x: this.width - fp[1], y: this.height - fp[2] }, fB); var fK = [fN, fR, fE, fC]; var fQ = fK[0].lng; var fW = fK[0].lat; var fr = fK[0].lng; var fw = fK[0].lat; for (var fP = 1; fP < 4; fP++) { if (fK[fP].lng < fQ) { fQ = fK[fP].lng } if (fK[fP].lng > fr) { fr = fK[fP].lng } if (fK[fP].lat < fW) { fW = fK[fP].lat } if (fK[fP].lat > fw) { fw = fK[fP].lat } } this._bounds.setSouthWest(new e5(fQ, fW)); this._bounds.setNorthEast(new e5(fr, fw)); this._bounds.pointTopLeft = fE; this._bounds.pointTopRight = fR; this._bounds.pointBottomRight = fC; this._bounds.pointBottomLeft = fN; this._bounds.makeNormalizedPoint(fF); this._bounds.setMinMax(); return this._bounds }, isLoaded: function () { return !!this.loaded }, _getBestLevel: function (i, fx) { var fq = 0; if (this._renderType === "webgl" && !d9()) { fq = 100 } var fr = fx.margins || [10, 10, 10, 10]; var fo = fx.zoomFactor || 0; var fs = fr[1] + fr[3]; var fp = fr[0] + fr[2]; var e = this.getMinZoom(); var fw = this.getMaxZoom(); var fv = i.toSpan(); var fu = fv.width / (this.width - fs - fq); var ft = fv.height / (this.height - fp - fq); var fn = 18 - c2(Math.max(fu, ft)); if (fn < e) { fn = e } if (fn > fw) { fn = fw } fn += fo; if (this._renderType !== "webgl") { fn = Math.floor(fn) } return fn }, getViewportIn: function (fz, fC) { if (this.mapType === BMAP_EARTH_MAP) { fz = fz || []; var fy = []; for (var fp = 0; fp < fz.length; fp++) { if (!fz[fp]) { continue } fy.push(cR.convertMC2LL(fz[fp])) } var fx = this._earth.getViewportIn(fy, fC); var fq = fx.center; var fr = fx.zoom; var fv = cR.convertLL2MC(fq); return { center: fv, zoom: fr } } var fB = { center: this.getCenterIn(), zoom: this.getZoom() }; if (!fz || fz.length === 0) { return fB } fC = fC || {}; var fn; if (fz instanceof cw) { fn = fz } else { var fu = fz; fn = new cw(); for (var fp = fu.length - 1; fp >= 0; fp--) { fn.extend(fu[fp]) } if (fn.isEmpty()) { return fB } } var e = fn.getCenter(); var fA = this._getBestLevel(fn, fC); if (fC.margins) { var ft = fC.margins; var fs = (ft[1] - ft[3]) / 2; var fw = (ft[0] - ft[2]) / 2; var fo = this.getZoomUnits(fA); e.lng = e.lng + fo * fs; e.lat = e.lat + fo * fw } return { center: e, zoom: fA } }, setViewportIn: function (fo, fp) { if (this.mapType === BMAP_EARTH_MAP) { var ft; if (fo && fo.center) { var fn = cR.convertMC2LL(fo.center); var fr = this._earth._getEarthZoomByImgZoom(fo.zoom, fn); ft = { center: fn, zoom: fr } } else { ft = []; for (var fq = 0; fq < fo.length; fq++) { var fs = cR.convertMC2LL(fo[fq]); ft[fq] = new bS(fs.lat, fs.lng) } } this._earth.setViewportIn(ft, fp); return } var e; if (fo && fo.center) { e = fo } else { e = this.getViewportIn(fo, fp) } fp = fp || {}; if (this._renderType === "webgl") { this.centerAndZoomIn(e.center, e.zoom, fp); return } if (e.zoom === this.zoomLevel && fp.enableAnimation !== false) { this.panToIn(e.center, { duration: 200, callback: fp.callback }) } else { this.centerAndZoomIn(e.center, e.zoom, fp) } }, addSpots: function (fn, i) { if (!fn || fn.length === 0) { return } i = i || {}; var fq = i.zIndex || 0; var fp = typeof i.enableMultiResponse === "undefined" ? true : !!i.enableMultiResponse; this.spotsPool = this.spotsPool || {}; var e = "sp" + (this.temp.spotsGuid++); this.spotsPool[e] = { spots: fn.slice(0), zIndex: fq, enableMultiResponse: fp }; var fo = this; cI.load("hotspot", function () { fo._asyncRegister() }); return e }, getSpots: function (e) { return this.spotsPool[e] && this.spotsPool[e].spots || [] }, removeSpots: function (e) { if (!e || !this.spotsPool[e]) { return } delete this.spotsPool[e] }, clearSpots: function () { delete this.spotsPool }, getIconByClickPosition: function (i) { if (!this.config.enableIconClick || !this._spotsMgr) { return null } var e = this._spotsMgr.getSpotsByScreenPosition(i); if (e[0] && e[0].userdata) { var fn = e[0].userdata; return { name: fn.name, uid: fn.uid, position: fn.iconPoint || e[0].pt } } return null }, setBounds: function (e) { be[this.mapType].bounds = e.clone() }, getCoordType: function () { return this.config.coordType }, getPanes: function () { return this._panes }, getInfoWindow: function () { if (this.temp.infoWin && this.temp.infoWin.isOpen()) { return this.temp.infoWin } return null }, getDistanceIn: function (fp, e) { if (!fp || !e) { return } if (this.mapType === BMAP_EARTH_MAP) { var fo = cR.convertMC2LL(fp); var fn = cR.convertMC2LL(e); return this._earth.getDistance(fo, fn) } var i = cR.getDistanceByMC(fp, e); return i }, getOverlays: function () { var fp = []; var fq = this._overlays; var fo = this._customOverlays; if (fq) { for (var fn in fq) { if (fq[fn] instanceof bK) { fp.push(fq[fn]) } } } if (fo) { for (var fn = 0, e = fo.length; fn < e; fn++) { fp.push(fo[fn]) } } return fp }, getMapType: function () { return this.mapType }, _asyncRegister: function () { for (var e = this.temp.registerIndex; e < aI._register.length; e++) { aI._register[e](this) } this.temp.registerIndex = e }, setDefaultCursor: function (e) { this.config.defaultCursor = e; if (this.platform) { this.platform.style.cursor = this.config.defaultCursor } }, getDefaultCursor: function () { return this.config.defaultCursor }, setDraggingCursor: function (e) { this.config.draggingCursor = e }, getDraggingCursor: function () { return this.config.draggingCursor }, _syncAndChangeMapType: function (e) { var i = this; if (i._renderType === "webgl" && i.getTilt() > bV.MAX_DRAG_TILT_L2) { i.setTilt(bV.MAX_DRAG_TILT_L2, { callback: function () { i._changeEarthMapType(e) } }) } else { i._changeEarthMapType(e) } }, _changeEarthMapType: function (fn) { var fo = this; var fr = fo.tileMgr.tileLayers; if (this._mapTypeChangAni) { this._mapTypeChangAni.stop() } var fq; if (this._earth) { fq = this._earth.getEarthCanvas() } if (!this._earth) { this.maskLayer.style.opacity = 1; this.maskLayer.style.zIndex = 999; this.maskLayer.style.background = "#000" } this._mapTypeChangAni = new l({ duration: 400, render: function (e) { if (!fo._earth) { return } fq.style.opacity = e }, finish: function () { for (var e = fr.length - 1, fs = e; fs >= 0; fs--) { var fu = fr[fs].tilesDiv; if (fu) { fu.style.visibility = "hidden" } if (fr[fs]._isInnerLayer && fo._renderType !== "webgl") { fo.removeTileLayer(fr[fs]) } } fo._mapTypeChangAni = null; fo._mapTypeChanging = false; function ft() { var fy = fo.getZoom() - 2; var fz = fo.getCenterIn(); var fw = cR.convertMC2LL(fz); fo._earth = new aI.Earth(fo, { center: fw, zoom: fy, showRealSunlight: fo.config.showRealSunlight, showMilkyway: fo.config.showMilkyway, earthBackground: fo.config.earthBackground }); fo._proxyEarthEvents(); var fv = fo.mapType; fo.mapType = fn; var fx = new aB("onmaptypechange"); fx.zoomLevel = this.zoomLevel; fx.mapType = fn; fx.exMapType = fv; fo.dispatchEvent(fx); fo._setMapTypeStatus(fn); x.extend(fo, aI.EarthView.prototype); if (!fo._navigationCtrl && fo.config.showControls) { fo._navigationCtrl = new dg(fo) } } if (!fo._earth) { if (aI["FeatureStyle" + fo.config.style]) { ft() } else { fo.loadMapStyleFiles(function () { ft() }) } } if (parseInt(fo.maskLayer.style.opacity, 10) === 1) { setTimeout(function () { fo.maskLayer.style.zIndex = 9; fo.maskLayer.style.opacity = 0 }, 1000) } } }); if (!this._earth) { return } var i = this.mapType; this.mapType = fn; var fp = new aB("onmaptypechange"); fp.zoomLevel = this.zoomLevel; fp.mapType = fn; fp.exMapType = i; this.dispatchEvent(fp); fo._setMapTypeStatus(fn); x.extend(fo, aI.EarthView.prototype) }, getMapStyleId: function () { if (typeof this.config.style === "string") { return this.config.style } return this.config.mapStyleId || "custom" }, _setMapTypeStatus: function (fn) { var fs = arguments[1]; if (fn === BMAP_EARTH_MAP) { var fq = this._earth.getEarthCanvas(); if (fq) { fq.style.display = "" } var ft = { noAnimation: true }; this._earth.setCenter(cR.convertMC2LL(this.centerPoint), ft); this._earth.setImageZoom(this.zoomLevel, ft); this._earth.setTilt(this.getTilt(), ft); this._earth.setHeading(this.getHeading(), ft) } else { if (this.preMapType === BMAP_EARTH_MAP && this._earth) { var fr = this._earth; var fo = fr.getMapZoom(); var fp = fr._imageRawZoom || fo; var i = fp - fo; var e = fr.getCenter(); if (this._renderType === "webgl") { this._tilt = fr.getTilt(); if (this.zoomLevel > 7) { this._heading = fr.getHeading(); fs && fs(e, fo); return } if (fr.getHeading() !== 0) { fr.setTilt(this.getTilt()); fr.setHeading(this.getHeading(), { callback: function () { fs && fs(e, fo) } }) } else { fs && fs(e, fo) } return } if (i < 0.1 && fr.getTilt() === 0 && fr.getHeading() === 0) { fs && fs(e, fo); return } fr.setTilt(0); fr.setHeading(0); fr.setZoom(fr.getZoom() - i, { callback: function () { fs && fs(e, fo) } }) } } }, _proxyEarthEvents: function () { var fq = this; var fr = this._earth; var e = false; fr.on("tilesload", function (i) { fq.fire(i) }); fr.on("centerandzoom", function (i) { fq.dispatchEvent(new aB("onmoveend")); fq.dispatchEvent(new aB("onzoomend")) }); function fp(i) { fq.fire(i) } var fn = ["zoomstart", "zoomend", "tilesload", "sunlighttime_change", "sunlighttime_clear", "centerandzoom", "animation_start", "animation_stop", "movestart", "moveend", "moving", "dragstart", "dragend", "dragging"]; for (var fo = 0; fo < fn.length; fo++) { fr.on(fn[fo], fp) } }, forceEnableEarth: function () { this.config.forceEnableEarth = true; this.config.enableEarth = aA.ifEnableEarth(true); this.dispatchEvent(new aB("forceenableearth")); return this.config.enableEarth }, setLock: function (e) { if (this.mapType === BMAP_EARTH_MAP) { this._earth.setLock(e) } this._lock = e }, getLock: function () { if (this.mapType === BMAP_EARTH_MAP) { return this._earth.getLock() } return this._lock }, getEarth: function () { return this._earth }, isSupportEarth: function () { return this.config.enableEarth }, isCanvasMap: function () { return !!(this._renderType === "canvas" && this.getMapType() !== "B_EARTH_MAP") }, getCanvasMapCoordByUid: function (fp) { if (this._renderType === "webgl") { var fq = this.tileMgr.tileLayers; for (var fo = 0; fo < fq.length; fo++) { if (fq[fo].labelProcessor) { return fq[fo].labelProcessor.getLabelByUid(fp, "") } } return null } var e = this.canvas2dMapMgr._labelClick; var fn = e.findLabelByUid(fp); return fn ? new e5(fn.iconPos.geoX, fn.iconPos.geoY) : null }, loadBizData: function (i) { var e = new aB("onloadbizdata"); e.data = i; this.dispatchEvent(e) }, unloadBizData: function () { var e = new aB("onunloadbizdata"); this.dispatchEvent(e) }, zoomIn: function (e) { this.setZoomIn(this.zoomLevel + 1, { zoomCenter: e }) }, zoomOut: function (e) { this.setZoomIn(this.zoomLevel - 1, { zoomCenter: e }) }, setCenterIn: function (e, i) { this.panToIn(e, i) }, getRenderType: function () { return this._renderType }, getSolarInfo: function (fo) { fo = fo || this._initDate; var fn = aQ(fo); var e = cR.convertLL2MC(new e5(fn[0], fn[1])); var fw = e.latLng; var fr = aI.Projection.convertMC2LL(this.centerPoint); var ft = fo.getUTCHours(); var fv = ft + 24 * fr.lng / 360; var fu = fv - 12; var fs = fu * 60 * 0.25; var fq = Math.asin(Math.sin(cr(fr.lat)) * Math.sin(cr(fw.lat)) + Math.cos(cr(fr.lat)) * Math.cos(cr(fw.lat)) * Math.cos(cr(fs))); var fp = Math.asin(Math.sin(cr(fs)) * Math.cos(cr(fw.lat)) / Math.cos(fq)); var i = "north"; if (fr.lat < fw.lat) { i = "south" } return { zenith: e, solarAltitude: fq, solarAzimuth: fp, centerPosition: i, position: e } }, setDisplayOptions: function (fn) { if (!fn) { return } for (var e in this._displayOptions) { if (this._displayOptions.hasOwnProperty(e)) { if (typeof fn[e] === "boolean" || (e === "skyColors" && typeof fn.skyColors === "object")) { this._displayOptions[e] = fn[e] } } } var i = this.getMapType(); if (i === bX.NORMAL) { this.fire(new aB("ondisplayoptions_changed")) } else { if (i === bX.EARTH && this._earth) { this._earth.fire(new aB("ondisplayoptions_changed")) } } }, getHorizonPosY: function (e) { if (!e || !this._webglMapCamera) { return null } var i = this._webglMapCamera.fromMCToScreenPixel(e.lng, e.lat, { heading: 0 }); return i.y }, getIndoorInfo: function () { if (!this._indoorMgr) { return } return this._indoorMgr.getData() }, showIndoor: function (e, fn) { var i = new aB("onindoor_status_changed"); i.uid = e; i.floor = fn; this.fire(i) }, addAreaSpot: function (e, fn) { if (!e || e.length === 0) { return } fn = fn || {}; this.areaSpots = this.areaSpots || {}; var i = fn.id || ("sp" + (this.temp.spotsGuid++)); this.areaSpots[i] = { spot: e, userData: fn.userData }; return i }, getAreaSpot: function (e) { if (this.areaSpots && this.areaSpots[e]) { return this.areaSpots[e] } return null }, removeAreaSpot: function (e) { if (!e || !this.areaSpots[e]) { return } delete this.areaSpots[e] }, clearAreaSpots: function () { this.areaSpots = {} }, resetSpotStatus: function () { this.fire(new aB("onspot_status_reset")) }, hightlightSpotByUid: function (e, fn) { var i = new aB("onspot_highlight"); i.uid = e; i.tilePosStr = fn; this.fire(i) }, setZoomIn: function (i, e) { e = e || {}; this.zoomTo(i, e.zoomCenter || null, e) }, getCurrentMaxTilt: function () { var e = this.zoomLevel; if (this.mapType === "B_EARTH_MAP") { return bV.MAX_DRAG_TILT_L2 } if (this.config.restrictCenter === false) { return bV.MAX_DRAG_TILT } if (e >= 19) { return bV.MAX_DRAG_TILT } else { if (e <= 18) { if (e < this._enableTiltZoom) { if (e >= this._enableTiltZoom - 2) { return (1 - (this._enableTiltZoom - e) / 2) * bV.MAX_DRAG_TILT_L2 } return 0 } return bV.MAX_DRAG_TILT_L2 } else { return (bV.MAX_DRAG_TILT - bV.MAX_DRAG_TILT_L2) * (e - 18) + bV.MAX_DRAG_TILT_L2 } } }, worldSize: function (i) { var e = i || this.zoomLevel; return bV.WORLD_SIZE_MC / Math.pow(2, 18 - e) }, setTrafficOn: function () { this.addTileLayer(bk) }, setTrafficOff: function () { this.removeTileLayer(bk) }, showOverlayContainer: function () { this.setDisplayOptions({ overlay: true }) }, hideOverlayContainer: function () { this.setDisplayOptions({ overlay: false }) }, addLabelsToMapTile: function (fn) { for (var e = 0; e < fn.length; e++) { if (typeof fn[e].type === "undefined") { fn[e].type = "fixed" } if (typeof fn[e].rank !== "number") { fn[e].rank = 50000 } fn[e].pt = fn[e].position; fn[e].custom = true; fn[e].processedInZoom = 0; this._customTileLabels.push(fn[e]) } this.dispatchEvent(new aB("onadd_tile_labels")) }, removeLabelsFromMapTile: function (fn) { for (var fo = 0; fo < fn.length; fo++) { for (var e = 0; e < this._customTileLabels.length; e++) { if (this._customTileLabels[e].uid === fn[fo]) { this._customTileLabels.splice(e, 1) } } } this.dispatchEvent(new aB("onremove_tile_labels")) }, clearLabels: function () { this._customTileLabels.length = 0; this.dispatchEvent(new aB("onclear_labels")) }, loadMapStyleFiles: function (ft) { var fo = this.config.style; var fq = this; this._setTextRenderType(); if (typeof fo === "string") { if (aI["FeatureStyle" + fo]) { fq.fire(new aB("onstyle_loaded")); ft(); return } e0.load(dp.getMapStyleFiles(fo), function () { aI["FeatureStyle" + fo] = window.FeatureStyle; aI["iconSetInfo" + fo] = window.iconSetInfo_high; aI.indoorStyle = window.indoorStyle; fq.fire(new aB("onstyle_loaded")); ft() }) } else { var fp = eg; var fs = aI.getGUID("custom"); this.config.mapStyleId = fs; var fn = {}; var fq = this; x.extend(fn, fo); window.styleCbk = function (fu) { var fv = Math.floor(fq.getZoom()); f.onStyleDataBack(fu, fv, fs, fn, fp); aI.customStyleLoaded = true; fq.fire(new aB("onstyle_loaded")); ft() }; aI.customStyleInfo = { zoomRegion: {}, zoomStyleBody: [], zoomFrontStyle: {} }; var e = Math.floor(this.getZoom()); var fr = f.getStyleUrl(fo, fp, "styleCbk", e); if (!aI.iconSetInfoCustom) { var i = dp.getMapStyleFiles("default"); i.splice(1, 1); e0.load(i, function () { aI.iconSetInfoCustom = window.iconSetInfo_high; aI.indoorStyle = window.indoorStyle; e0.load(fr) }) } else { e0.load(fr) } } }, _setTextRenderType: function () { if (d9()) { this.config.textRenderType = "canvas" } else { if (typeof this.config.style === "string") { this.config.textRenderType = "image" } else { this.config.textRenderType = "canvas" } } }, destroy: function () { this.fire(new aB("ondestroy")) }, centerAndZoom: function (e, fo, fn) { var i = cR.convertLL2MC(e); this.centerAndZoomIn(i, fo, fn) }, pointToPixel: function (e, fn) { var i = cR.convertLL2MC(e); var fo = {}; x.extend(fo, fn); if (fo && fo.center) { fo.center = cR.convertLL2MC(fo.center) } return this.pointToPixelIn(i, fo) }, pixelToPoint: function (fn, i) { var fo = {}; x.extend(fo, i); if (fo && fo.center) { fo.center = cR.convertLL2MC(fo.center) } var e = this.pixelToPointIn(fn, fo); return cR.convertMC2LL(e) }, pointToOverlayPixel: function (e, fn) { var i = cR.convertLL2MC(e); var fo = {}; x.extend(fo, fn); if (fo && fo.center) { fo.center = cR.convertLL2MC(fo.center) } return this.pointToOverlayPixelIn(i, fo) }, overlayPixelToPoint: function (fn, i) { var fo = {}; x.extend(fo, i); if (fo && fo.center) { fo.center = cR.convertLL2MC(fo.center) } var e = this.overlayPixelToPointIn(fn, fo); return cR.convertMC2LL(e) }, setViewport: function (fn, fo) { var e; if (fn && fn.center) { e = {}; x.extend(e, fn); e.center = cR.convertLL2MC(e.center) } else { e = []; for (var fp = 0; fp < fn.length; fp++) { e[fp] = cR.convertLL2MC(fn[fp]) } } this.setViewportIn(e, fo) }, getViewport: function (fq, fo) { var fn; if (fq && fq.length) { fn = []; for (var fp = 0; fp < fq.length; fp++) { fn[fp] = cR.convertLL2MC(fq[fp]) } } var e = this.getViewportIn(fn, fo); e.center = cR.convertMC2LL(e.center); return e }, getDistance: function (fp, fn) { var i = cR.convertLL2MC(fp); var fo = cR.convertLL2MC(fn); var e = this.getDistanceIn(i, fo); return e }, setCenter: function (e, fn) { var i = cR.convertLL2MC(e); this.setCenterIn(i, fn) }, setZoom: function (fn, e) { var i = {}; x.extend(i, e); if (i && i.zoomCenter) { i.zoomCenter = cR.convertLL2MC(i.zoomCenter) } this.setZoomIn(fn, i) }, flyTo: function (e, fn) { var i = cR.convertLL2MC(e); this.flyToIn(i, fn) }, panTo: function (e, fn) { var i = cR.convertLL2MC(e); this.panToIn(i, fn) }, getCenter: function () { var e = this.getCenterIn(); return cR.convertMC2LL(e) }, getBounds: function () { var e = this.getBoundsIn(); var i = new cw(cR.convertMC2LL(e.getSouthWest()), cR.convertMC2LL(e.getNorthEast())); return i }, setMapStyleV2: function (e) { this.setOptions({ style: e.styleJson }) }, setViewAnimation: function (e) { e._start(this) }, cancelViewAnimation: function (e) { e._cancel(this) } }); var bX = { NORMAL: "B_NORMAL_MAP", EARTH: "B_EARTH_MAP", SATELLITE: "B_STREET_MAP" }; aI.MapTypeId = bX; window.BMAP_NORMAL_MAP = "B_NORMAL_MAP"; window.BMAP_SATELLITE_MAP = "B_SATELLITE_MAP"; window.BMAP_HYBRID_MAP = "B_STREET_MAP"; window.BMAP_EARTH_MAP = "B_EARTH_MAP"; window.BMAP_COORD_MERCATOR = 1; window.BMAP_SYS_DRAWER = 0; window.BMAP_SVG_DRAWER = 1; window.BMAP_VML_DRAWER = 2; window.BMAP_CANVAS_DRAWER = 3; var f = { getStyleUrl: function (fn, fp, fo, e) { this.styleJson = fn; var i = dp.apiHost + "/custom/v2/mapstyle?ak=" + fp + "&callback=" + fo + "&"; i += "is_all=true&is_new=1&"; i += "styles=" + encodeURIComponent(this.styleJson2styleStringV2(fn, e)); return i }, styleJson2styleStringV2: function (fo, fy) { var fz = { featureType: "t", elementType: "e", visibility: "v", color: "c", lightness: "l", saturation: "s", weight: "w", level: "z", hue: "h", fontsize: "f" }; var fA = { all: "all", geometry: "g", "geometry.fill": "g.f", "geometry.stroke": "g.s", labels: "l", "labels.text.fill": "l.t.f", "labels.text.stroke": "l.t.s", "labels.text": "l.t", "labels.icon": "l.i" }; var fB = []; var ft = false; var fv = false; var fn = false; var fu = false; var e = false; aI.customStyleInfo.zoomFrontStyle[fy] = {}; for (var fp = 0; !!fo[fp]; fp++) { var fx = fo[fp]; if (this.isOnlyZoomStyler(fx)) { continue } aI.customStyleInfo.zoomRegion = this.getZoomRegion(fx, aI.customStyleInfo.zoomRegion); if (!this.isSelectZoom(fx, fy)) { continue } if ((fx.featureType === "land" || fx.featureType === "all" || fx.featureType === "background") && typeof fx.elementType === "string" && (fx.elementType === "geometry" || fx.elementType === "geometry.fill" || fx.elementType === "all") && fx.stylers) { if (fx.stylers["color"]) { aI.customStyleInfo.zoomFrontStyle[fy]["bmapLandColor"] = fx.stylers["color"]; aI.customStyleInfo.zoomFrontStyle[fy].landColor = true; aI.bmapLandColor = fx.stylers["color"]; ft = true } if (fx.stylers["visibility"] && fx.stylers["visibility"] === "off") { aI.customStyleInfo.zoomFrontStyle[fy]["bmapLandColor"] = "#00000000"; aI.customStyleInfo.zoomFrontStyle[fy].landColor = true; aI.bmapLandColor = "#00000000"; ft = true } } if (fx.featureType === "railway" && typeof fx.elementType === "string" && fx.stylers) { if (fx.stylers["color"]) { if (fx.elementType === "geometry") { aI.bmapRailwayFillColor = fx.stylers["color"]; fv = true; aI.bmapRailwayStrokeColor = fx.stylers["color"]; fn = true; aI.customStyleInfo.zoomFrontStyle[fy]["bmapRailwayFillColor"] = fx.stylers["color"]; aI.customStyleInfo.zoomFrontStyle[fy]["bmapRailwayStrokeColor"] = fx.stylers["color"]; aI.customStyleInfo.zoomFrontStyle[fy].railwayFillColor = true; aI.customStyleInfo.zoomFrontStyle[fy].railwayStrokeColor = true } if (fx.elementType === "geometry.fill") { aI.bmapRailwayFillColor = fx.stylers["color"]; fv = true; aI.customStyleInfo.zoomFrontStyle[fy]["bmapRailwayFillColor"] = fx.stylers["color"]; aI.customStyleInfo.zoomFrontStyle[fy].railwayFillColor = true } if (fx.elementType === "geometry.stroke") { aI.bmapRailwayStrokeColor = fx.stylers["color"]; fn = true; aI.customStyleInfo.zoomFrontStyle[fy]["bmapRailwayStrokeColor"] = fx.stylers["color"]; aI.customStyleInfo.zoomFrontStyle[fy].railwayStrokeColor = true } } if (fx.stylers["visibility"]) { aI.bmapRailwayVisibility = fx.stylers["visibility"]; fu = true; aI.customStyleInfo.zoomFrontStyle[fy]["bmapRailwayVisibility"] = fx.stylers["visibility"]; aI.customStyleInfo.zoomFrontStyle[fy].railwayVisibility = true } } if (fx.featureType === "roadarrow" && fx.elementType === "labels.icon" && fx.stylers) { aI.bmapRoadarrowVisibility = fx.stylers["visibility"]; aI.customStyleInfo.zoomFrontStyle[fy]["bmapRoadarrowVisibility"] = fx.stylers["visibility"]; aI.customStyleInfo.zoomFrontStyle[fy].roadarrowVisibility = true; e = true } var fq = {}; x.extend(fq, fx); var fs = fq.stylers; delete fq.stylers; x.extend(fq, fs); var fr = []; for (var fw in fz) { if (fq[fw]) { if (this.isEditorZoomKeys(fw)) { continue } if (fw === "elementType") { fr.push(fz[fw] + ":" + fA[fq[fw]]) } else { switch (fq[fw]) { case "poilabel": fq[fw] = "poi"; break; case "districtlabel": fq[fw] = "label"; break }fr.push(fz[fw] + ":" + fq[fw]) } } } if (fr.length > 2) { fB.push(fr.join("|")) } } if (!aI.customStyleInfo.zoomFrontStyle[fy].landColor && aI.customStyleInfo.zoomFrontStyle[fy]["bmapLandColor"]) { delete aI.customStyleInfo.zoomFrontStyle[fy]["bmapLandColor"] } if (!aI.customStyleInfo.zoomFrontStyle[fy].railwayFillColor && aI.customStyleInfo.zoomFrontStyle[fy]["bmapRailwayFillColor"]) { delete aI.customStyleInfo.zoomFrontStyle[fy]["bmapRailwayFillColor"] } if (!aI.customStyleInfo.zoomFrontStyle[fy].railwayStrokeColor && aI.customStyleInfo.zoomFrontStyle[fy]["bmapRailwayStrokeColor"]) { delete aI.customStyleInfo.zoomFrontStyle[fy]["bmapRailwayStrokeColor"] } if (!aI.customStyleInfo.zoomFrontStyle[fy].railwayVisibility && aI.customStyleInfo.zoomFrontStyle[fy]["bmapRailwayVisibility"]) { delete aI.customStyleInfo.zoomFrontStyle[fy]["bmapRailwayVisibility"] } if (!aI.customStyleInfo.zoomFrontStyle[fy].roadarrowVisibility && aI.customStyleInfo.zoomFrontStyle[fy]["bmapRoadarrowVisibility"]) { delete aI.customStyleInfo.zoomFrontStyle[fy]["bmapRoadarrowVisibility"] } return fB.join(",") }, isOnlyZoomStyler: function (e) { var i = {}; x.extend(i, e.stylers); delete i.curZoomRegionId; delete i.curZoomRegion; delete i.level; if (x.isEmptyObject(i)) { return true } else { return false } }, isSelectZoom: function (i, e) { var fn = i.stylers["level"]; if (fn === undefined) { return true } else { if (fn === e + "") { return true } else { return false } } }, isEditorZoomKeys: function (e) { var i = { curZoomRegionId: true, curZoomRegion: true }; if (i[e]) { return true } else { return false } }, getZoomRegion: function (e, i) { var fo = e.stylers["level"]; var fn = {}; x.extend(fn, i); if (fo === undefined) { return fn } else { fn[parseInt(fo, 10)] = true; return fn } }, onStyleDataBack: function (fp, fu, ft, e, fr) { if (fp.status !== 0) { return } if (fp.data.style.length === 3) { if (!aI.customStyleInfo.baseFs) { aI.customStyleInfo.baseFs = fp.data.style } aI.StyleBody = fp.data.style[2] } else { aI.StyleBody = fp.data.style } var fs = aI.customStyleInfo.baseFs; if (!x.isEmptyObject(aI.customStyleInfo.zoomRegion)) { this.updateZoomFeatureStyle(aI.StyleBody, fu); this.updateFrontFeatureStyle(fu); var fn = this.calcuOtherZoomRegion(aI.customStyleInfo.zoomRegion, fu); for (var fq in fn) { var fo = {}; x.extend(fo, e); this.getOtherZoomStyles(fq, fr, fo) } } else { aI["FeatureStyle" + ft] = fs; this.updateFrontFeatureStyle(fu) } }, updateZoomFeatureStyle: function (fq, fp) { aI.customStyleInfo.zoomStyleBody[fp] = fq; if (!aI.customStyleInfo.zoomRegion[fp]) { var fo = 3; var e = 21; for (var fn = fo; fn <= e; fn++) { if (!aI.customStyleInfo.zoomRegion[fn]) { aI.customStyleInfo.zoomStyleBody[fn] = fq } } } }, getOtherZoomStyles: function (fq, fr, fp) { var fo = this; var fn = fq; var e = (Math.random() * 100000).toFixed(0); window["_cbk" + e] = function (fs) { if (fs.data.style.length === 3) { fs = fs.data.style[2] } else { fs = fs.data.style } fo.updateZoomFeatureStyle(fs, fn); fo.updateFrontFeatureStyle(fn); delete window["_cbk" + e] }; var i = dp.apiHost + "/custom/v2/mapstyle?ak=" + fr + "&callback=_cbk" + e + "&"; i += "is_all=true&is_new=1&"; if (fp.styleJson) { i += "styles=" + encodeURIComponent(this.styleJson2styleStringV2(fp.styleJson, fn)) } else { if (fp.styleId) { i += "styles=" + encodeURIComponent(this.styleJson2styleStringV2(fo.styleJson, fn)) } } e0.load(i) }, updateFrontFeatureStyle: function (fp) { if (!aI.customStyleInfo.zoomRegion[fp]) { var fo = 3; var e = 21; for (var fn = fo; fn <= e; fn++) { if (!aI.customStyleInfo.zoomRegion[fn]) { if (!aI.customStyleInfo.zoomFrontStyle[fn]) { aI.customStyleInfo.zoomFrontStyle[fn] = {} } aI.customStyleInfo.zoomFrontStyle[fn]["bmapLandColor"] = aI.customStyleInfo.zoomFrontStyle[fp]["bmapLandColor"]; aI.customStyleInfo.zoomFrontStyle[fn]["bmapRailwayFillColor"] = aI.customStyleInfo.zoomFrontStyle[fp]["bmapRailwayFillColor"]; aI.customStyleInfo.zoomFrontStyle[fn]["bmapRailwayStrokeColor"] = aI.customStyleInfo.zoomFrontStyle[fp]["bmapRailwayStrokeColor"] } } } }, calcuOtherZoomRegion: function (fr, fq) { var fn = {}; x.extend(fn, fr); if (fn[fq]) { var fp = 3; var e = 21; for (var fo = fp; fo <= e; fo++) { if (!fn[fo]) { fn[fo] = true; break } } delete fn[fq] } else { } return fn } }; function a4(i, e, fo, fn) { this.cx = 3 * i; this.bx = 3 * (fo - i) - this.cx; this.ax = 1 - this.cx - this.bx; this.cy = 3 * e; this.by = 3 * (fn - e) - this.cy; this.ay = 1 - this.cy - this.by; this.p1x = i; this.p1y = fn; this.p2x = fo; this.p2y = fn } a4.prototype.sampleCurveX = function (e) { return ((this.ax * e + this.bx) * e + this.cx) * e }; a4.prototype.sampleCurveY = function (e) { return ((this.ay * e + this.by) * e + this.cy) * e }; a4.prototype.sampleCurveDerivativeX = function (e) { return (3 * this.ax * e + 2 * this.bx) * e + this.cx }; a4.prototype.solveCurveX = function (e, ft) { if (typeof ft === "undefined") { ft = 0.000001 } var fs; var fr; var fp; var fn; var fo; for (fp = e, fo = 0; fo < 8; fo++) { fn = this.sampleCurveX(fp) - e; if (Math.abs(fn) < ft) { return fp } var fq = this.sampleCurveDerivativeX(fp); if (Math.abs(fq) < 0.000001) { break } fp = fp - fn / fq } fs = 0; fr = 1; fp = e; if (fp < fs) { return fs } if (fp > fr) { return fr } while (fs < fr) { fn = this.sampleCurveX(fp); if (Math.abs(fn - e) < ft) { return fp } if (e > fn) { fs = fp } else { fr = fp } fp = (fr - fs) * 0.5 + fs } return fp }; a4.prototype.solve = function (e, i) { return this.sampleCurveY(this.solveCurveX(e, i)) }; var bq = {}; function l(fn) { var e = { duration: 1000, fps: 30, delay: 0, transition: bq.linear, dropLastAnimation: false }; if (fn) { for (var fo in fn) { e[fo] = fn[fo] } } if (fn.beginTime) { this._beginTime = fn.beginTime } this._callbacks = []; this._options = e; if (e.delay) { var fp = this; setTimeout(function () { fp._doStart() }, e.delay) } else { this._doStart() } } l.INFINITE = "INFINITE"; l.prototype._doStart = function () { if (window.requestAnimationFrame) { var e = this; e._timer = window.requestAnimationFrame(function (i) { e._loop(i) }) } else { this._beginTime = new Date().getTime(); if (this._options.duration === l.INFINITE) { this._endTime = null } else { this._endTime = this._beginTime + this._options.duration } this._loop() } }; l.prototype._loop = function (fo) { var fr = this; fo = fo || new Date().getTime(); if (!this._beginTime) { this._beginTime = fo } if (!this._endTime && typeof this._options.duration === "number") { this._endTime = this._beginTime + this._options.duration } if (fr._endTime !== null && fo >= fr._endTime) { if (fr._options.dropLastAnimation === false) { fr._options.render(fr._options.transition(1), 1, fo) } if (typeof fr._options.finish === "function") { fr._options.finish(fo, this) } for (var fq = 0, e = fr._callbacks.length; fq < e; fq++) { fr._callbacks[fq]() } return } var fp; if (typeof fr._options.duration === "number") { fp = (fo - fr._beginTime) / fr._options.duration; fr.schedule = fr._options.transition(fp) } else { fp = fo - fr._beginTime; fr.schedule = 0 } fr._options.render(fr.schedule, fp, fo); if (!fr.terminative) { if (window.requestAnimationFrame) { fr._timer = requestAnimationFrame(function fn(i) { fr._loop(i) }) } else { fr._timer = setTimeout(function () { fr._loop() }, 1000 / fr._options.fps) } } }; l.prototype.stop = function (i, e) { this.terminative = true; if (this._timer) { if (window.cancelAnimationFrame) { cancelAnimationFrame(this._timer) } else { clearTimeout(this._timer) } this._timer = null; if (typeof this._options.onStop === "function") { this._options.onStop(e) } } if (i) { this._endTime = this._beginTime; this._loop() } }; l.prototype.cancel = function () { this.stop() }; l.prototype.append = function (e) { this._callbacks.push(e); return this }; bq = { _p1: 1, _p2: 1 * 1.525, linear: function (e) { return e }, reverse: function (e) { return 1 - e }, easeInQuad: function (e) { return e * e }, easeInCubic: function (e) { return Math.pow(e, 3) }, easeInBiquad: function (e) { return Math.pow(e, 4) }, easeInBack: function (e) { return e * e * ((bq._p1 + 1) * e - bq._p1) }, easeOutQuad: function (e) { return -(e * (e - 2)) }, easeOutCubic: function (e) { return Math.pow((e - 1), 3) + 1 }, easeOutBiquad: function (e) { return 1 - Math.pow((e - 1), 4) }, easeOutBack: function (e) { return ((e = e - 1) * e * ((bq._p1 + 1) * e + bq._p1) + 1) }, easeInOutQuad: function (e) { if (e < 0.5) { return e * e * 2 } else { return -2 * (e - 2) * e - 1 } }, easeInOutCubic: function (e) { if (e < 0.5) { return Math.pow(e, 3) * 4 } else { return Math.pow(e - 1, 3) * 4 + 1 } }, easeInOutBiquad: function (e) { if (e < 0.5) { return Math.pow(e, 4) * 8 } else { return 1 - (Math.pow(e - 1, 4) * 8) } }, easeInOutSine: function (e) { return (1 - Math.cos(Math.PI * e)) / 2 } }; bq.ease = (function () { var e = new a4(0.4, 0, 0.6, 1); return function (i) { return e.solve(i) } })(); bq["ease-in"] = bq.easeInQuad; bq["ease-out"] = bq.easeOutQuad; var dB = { start: function (fu) { var fo = fu.el; var e = fu.style; var i = fu.startValue; var fr = fu.endValue; var fp = fu.duration || 1400; var fq = fu.transition || bq.linear; var ft = fu.callback; var fs = fr - i; var fn = fu.unit || ""; return new l({ fps: 60, duration: fp, transition: fq, render: function (fv) { fo.style[e] = i + fs * fv + fn }, finish: function () { ft && ft() } }) } }; function bG(fp, fn) { this.keyframes = fp; var e = { duration: 1000, delay: 0, transition: bq.linear, interation: 1 }; if (fn) { for (var fo in fn) { e[fo] = fn[fo] } } this._options = e } bG.prototype._start = function (fo) { var i = this; i.map = fo; this._initStatus(i.map); var fn = this._options.duration; var e = this._options.interation; var fp = this._options.transition; var fq = 0; window.timeN = new Date().getTime(); console.log("start:" + new Date().getTime()); this.animation = new l({ duration: fn, transition: fp, start: function (fr) { }, render: function (fs, fr) { if (fs === 0) { i._initStatus(i.map) } else { i._setViewByRate(fs) } }, finish: function (fs, fr) { if (++fq < e || e === "INFINITE") { delete fr._beginTime; delete fr._endTime; fr._doStart() } delete window.timeN } }) }; bG.prototype._getTotalDuration = function (e, i) { if (e === l.INFINITE) { return l.INFINITE } else { return e * i } }; bG.prototype._initStatus = function (e) { if (this.keyframes[0]) { e.setCenter(this.keyframes[0].center, { noAnimation: true }); e.setZoom(this.keyframes[0].zoom, { noAnimation: true }); e.setTilt(this.keyframes[0].tilt, { noAnimation: true }); e.setHeading(this.keyframes[0].heading, { noAnimation: true }) } }; bG.prototype._setViewByRate = function (fo) { for (var e = 0; e < this.keyframes.length - 1; e++) { var fp = this.keyframes[e]; var fn = this.keyframes[e + 1]; if (fo >= fp.percentage && fo < fn.percentage) { this.map.setHeading(this._getHeadingDelta(fp, fn, fo), { noAnimation: true }); this.map.setTilt(this._getTiltDelta(fp, fn, fo), { noAnimation: true }); this.map.setCenter(this._getCenterDelta(fp, fn, fo), { noAnimation: true }); this.map.setZoom(this._getZoomDelta(fp, fn, fo), { noAnimation: true }) } } }; bG.prototype._getHeadingDelta = function (fn, i, e) { var fp = (e - fn.percentage) / (i.percentage - fn.percentage); var fo = fn.heading + (i.heading - fn.heading) * fp; return fo }; bG.prototype._getTiltDelta = function (fn, i, e) { var fp = (e - fn.percentage) / (i.percentage - fn.percentage); var fo = fn.tilt + (i.tilt - fn.tilt) * fp; return fo }; bG.prototype._getCenterDelta = function (fn, i, e) { var fp = (e - fn.percentage) / (i.percentage - fn.percentage); var fo = fn.center.add(i.center.sub(fn.center).mult(fp)); return fo }; bG.prototype._getZoomDelta = function (fo, fn, i) { var fp = (i - fo.percentage) / (fn.percentage - fo.percentage); var e = fo.zoom + (fn.zoom - fo.zoom) * fp; return e }; bG.prototype._cancel = function (e) { this.animation.cancel() }; var cX = undefined; var bP = { is64Bit: function () { if (/Windows/.test(navigator.userAgent)) { if (/Win64; x64/.test(navigator.userAgent)) { return true } else { if (/WOW64/.test(navigator.userAgent)) { return true } else { return false } } } return true }, isIOS112: function bH(e) { return /11_2/.test(navigator.userAgent) }, canUseWebAssembly: function (i) { if (cX !== undefined) { i && i(cX); return } if (window.WebAssembly && this.is64Bit()) { if (!aN()) { cX = true; i && i(cX) } else { if (this.isIOS112()) { cX = false; i && i(cX) } else { var e = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 6, 129, 128, 128, 128, 0, 0, 7, 145, 128, 128, 128, 0, 2, 6, 109, 101, 109, 111, 114, 121, 2, 0, 4, 109, 97, 105, 110, 0, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 65, 42, 11]); WebAssembly.instantiate(e).then(function (fn) { cX = true; i && i(cX) }, function (fn) { cX = false; i && i(cX) }) } } } else { cX = false; i && i(cX) } } }; var ce = {}; aI.Utils = ce; function b0(e) { return e.style } function b6(i) { if (x.Browser.ie > 0) { i.unselectable = "on"; i.selectstart = function () { return false }; i.onmousedown = function (fn) { fn.preventDefault(); return false } } else { var e = b0(i); e.MozUserSelect = "none"; e.WebkitUserSelect = "none"; i.addEventListener("mousedown", function (fn) { fn.preventDefault() }, false) } } function eT(e) { return e && e.parentNode && e.parentNode.nodeType !== 11 } function cq(i, e) { i.insertAdjacentHTML("beforeEnd", e); return i.lastChild } function fc(fn, i) { var fo = document.createElement("div"); fo.innerHTML = i; var e = fo.childNodes[0]; return fn.parentNode.insertBefore(e, fn) } function g(i) { i = i || window.event; i.stopPropagation ? i.stopPropagation() : i.cancelBubble = true } function a6(i) { i = i || window.event; i.preventDefault ? i.preventDefault() : i.returnValue = false; return false } function bY(i) { g(i); return a6(i) } function dS() { var e = document.documentElement; var i = document.body; if (e && (e.scrollTop || e.scrollLeft)) { return [e.scrollTop, e.scrollLeft] } else { if (i) { return [i.scrollTop, i.scrollLeft] } else { return [0, 0] } } } function dF(fp) { if (!fp) { return } fp.onload = fp.onerror = null; var fn = fp.attributes, fo, e, fq; if (fn) { e = fn.length; for (fo = 0; fo < e; fo += 1) { fq = fn[fo].name; if (typeof fp[fq] === "function") { fp[fq] = null } } } fn = fp.children; if (fn) { e = fn.length; for (fo = 0; fo < e; fo += 1) { dF(fp.children[fo]) } } } function aX(i, fr, fq) { var fp = fr.lng - fq.lng; var fo = fr.lat - fq.lat; if (fp === 0) { return Math.abs(i.lng - fr.lng) } if (fo === 0) { return Math.abs(i.lat - fr.lat) } var fn = fo / fp; var e = fr.lat - fn * fr.lng; return Math.abs(fn * i.lng - i.lat + e) / Math.sqrt(fn * fn + 1) } function eJ(i, e) { if (!i || !e) { return } return Math.round(Math.sqrt(Math.pow(i.x - e.x, 2) + Math.pow(i.y - e.y, 2))) } function a2(i, e) { if (!i || !e) { return 0 } return Math.round(Math.sqrt(Math.pow(i.lng - e.lng, 2) + Math.pow(i.lat - e.lat, 2))) } function bQ(fn, i) { var e = Math.round((fn.x + i.x) / 2); var fo = Math.round((fn.y + i.y) / 2); return new cP(e, fo) } function eY(e, fn) { var i = []; fn = fn || function (fp) { return fp }; for (var fo in e) { i.push(fo + "=" + fn(e[fo])) } return i.join("&") } function H(fn, i, fq) { var fr = document.createElement(fn); if (fq) { fr = document.createElementNS(fq, fn) } i = i || {}; for (var fo in i) { var fp = { "for": "htmlFor", "class": "cssClass" }[fo] || fo; if (fo === "style") { fr.style.cssText = i[fo]; continue } if (fo === "class") { x.ac(fr, i[fo]); continue } if (fr.setAttribute) { fr.setAttribute(fp, i[fo]) } else { try { fr[fp] = i[fo] } catch (fr) { } } } return fr } function d4(e) { if (e.currentStyle) { return e.currentStyle } else { if (e.ownerDocument && e.ownerDocument.defaultView) { return e.ownerDocument.defaultView.getComputedStyle(e, null) } } } function a7(e) { return typeof e === "function" } var e1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="; function eO(fp) { var fn = ""; var fw; var fu; var fs = ""; var fv; var ft; var fr; var fq = ""; var fo = 0; var e = /[^A-Za-z0-9+/=]/g; if (!fp || e.exec(fp)) { return fp } fp = fp.replace(/[^A-Za-z0-9+/=]/g, ""); do { fv = e1.indexOf(fp.charAt(fo++)); ft = e1.indexOf(fp.charAt(fo++)); fr = e1.indexOf(fp.charAt(fo++)); fq = e1.indexOf(fp.charAt(fo++)); fw = (fv << 2) | (ft >> 4); fu = ((ft & 15) << 4) | (fr >> 2); fs = ((fr & 3) << 6) | fq; fn = fn + String.fromCharCode(fw); if (fr !== 64) { fn = fn + String.fromCharCode(fu) } if (fq !== 64) { fn = fn + String.fromCharCode(fs) } fw = fu = fs = ""; fv = ft = fr = fq = "" } while (fo < fp.length); return fn } (function (e) { if (!e.Utils) { e.Utils = {} } var i = e.Utils; i.format = (function () { function fn(fr, fq, fs) { var fp = fs[+fq]; return typeof (fp) === "function" ? fp(fq) : fp } function fo(fr, fq, fs) { var fu = fq; var fv = []; var fp = fq.split(":"); if (fp.length === 2) { fu = fp[0]; fv.push(fp[1]) } var ft = typeof (fs[fu]); if (ft === "function") { return fs[fu].apply(undefined, fv) } else { if (ft === "undefined") { return fr } else { return String(fs[fu]) } } } return function (fp, fq) { var fs = fq.splice ? fn : fo; var fr = fp.splice ? fp.join("") : fp; return fr.replace(/{([a-zA-Z0-9_$:.]+)}/g, function (fu, ft) { return fs(fu, ft, fq) }) } })(); i.ErrorMonitor = function (fo, fn, fp) { }; bP.canUseWebAssembly(function (fn) { i.canUseWebAssembly = fn }) })(aI); function d9() { return (aN() || c1()) } function aN() { var e = navigator.userAgent; if (e.indexOf("iPhone") > -1 || e.indexOf("iPad") > -1) { return true } return false } function c1() { var e = navigator.userAgent; if (e.indexOf("Android") > -1) { return true } return false } function cr(e) { return e * Math.PI / 180 } function b1(e) { return e / Math.PI * 180 } function ct(e, fp) { var fo = Math.pow(10, fp); if (typeof e === "number") { return Math.round(e * fo) / fo } for (var fn = 0; fn < e.length; fn++) { e[fn] = ct(e[fn], fp) } return e } function dO(fn, i, e) { if (fn < i) { fn = i } else { if (fn > e) { fn = e } } return fn } function d5(e, i) { while (e < 0) { e += i } return e % i } function cG(i, e) { return (i >= 0 && e >= 0) || (i < 0 && e < 0) } function ax(i) { if (i._gl) { return i._gl } var e = { alpha: true, antialias: false, failIfMajorPerformanceCaveat: false, preserveDrawingBuffer: false, stencil: false }; var fn = i.getContext("webgl", e) || i.getContext("experimental-webgl", e); i._gl = fn; return fn } function c6(fo, fn) { for (var e = 0; e < fn.length; e++) { x.on(fo, fn[e], g) } } function fm(i, fn, e) { fn[e] = i.getUniformLocation(fn, e) } function dm(fp, fq, e, fn, i) { var fo = ""; switch (i) { case "mat4": fp.uniformMatrix4fv(fq[e], false, fn); return; case "v3": fo = "uniform3fv"; break; case "f": fo = "uniform1f"; break; case "i": fo = "uniform1i"; break }if (fo === "") { throw "error" } fp[fo](fq[e], fn) } function D(fw, e) { while (fw < 0) { fw += 360 } fw = fw % 360; var fo = e.width; var fv = e.height; var fr = fo; var fn = fv; if (fw < 90) { var i = Math.sin(cr(fw)) * fo; var ft = Math.sin(cr(fw)) * fv; var fu = Math.cos(cr(fw)) * fo; var fq = Math.cos(cr(fw)) * fv; var fr = Math.ceil(fu + ft); var fn = Math.ceil(i + fq) } else { if (fw < 180) { var fw = fw - 90; var i = Math.sin(cr(fw)) * fo; var ft = Math.sin(cr(fw)) * fv; var fu = Math.cos(cr(fw)) * fo; var fq = Math.cos(cr(fw)) * fv; var fr = Math.ceil(i + fq); var fn = Math.ceil(fu + ft) } else { if (fw < 270) { var fw = fw - 180; var i = Math.sin(cr(fw)) * fo; var ft = Math.sin(cr(fw)) * fv; var fu = Math.cos(cr(fw)) * fo; var fq = Math.cos(cr(fw)) * fv; var fr = Math.ceil(fu + ft); var fn = Math.ceil(i + fq) } else { var fw = fw - 270; var i = Math.sin(cr(fw)) * fo; var ft = Math.sin(cr(fw)) * fv; var fu = Math.cos(cr(fw)) * fo; var fq = Math.cos(cr(fw)) * fv; var fr = Math.ceil(i + fq); var fn = Math.ceil(fu + ft) } } } var fs = fr - fo; var fp = fn - fv; return [0 - fs / 2, 0 - fp / 2, fo + fs / 2, fv + fp / 2] } function eA(e) { if (e.toDataURL() === eA._blankData) { return true } return false } function et(fp, fo, fn) { var i = [fn.lng - fp.lng, fn.lat - fp.lat]; var e = [fo.lng - fp.lng, fo.lat - fp.lat]; return i[0] * e[1] - i[1] * e[0] } function bm(fq, fp, fn) { var e; var fr; var fo; var i; if (fq.lng < fp.lng) { e = fq.lng; fo = fp.lng } else { e = fp.lng; fo = fq.lng } if (fq.lat < fp.lat) { fr = fq.lat; i = fp.lat } else { fr = fp.lat; i = fq.lat } if (fn.lng < e || fn.lng > fo || fn.lat < fr || fn.lat > i) { return false } return true } function ev(fs, fr, fq, fo) { var fp = et(fq, fo, fs); var fn = et(fq, fo, fr); var i = et(fs, fr, fq); var e = et(fs, fr, fo); if (fp * fn < 0 && i * e < 0) { return true } else { if (fp === 0 && bm(fq, fo, fs)) { return true } else { if (fn === 0 && bm(fq, fo, fr)) { return true } else { if (i === 0 && bm(fs, fr, fq)) { return true } else { if (e === 0 && bm(fs, fr, fo)) { return true } else { return false } } } } } } function fa(fn, i) { var e = i.parentNode; if (e.lastChild === i) { e.appendChild(fn) } else { e.insertBefore(fn, i.nextSibling) } } function fe(fu, fv) { if (fv === 0) { return fu } var ft = 0; var fr = 0; if (!fu) { throw "异常" } if (fu.length === 0) { return [] } for (var fp = 1, fn = fu.length - 1; fp < fn; fp++) { var fs = aX(fu[fp], fu[0], fu[fu.length - 1]); if (fs > ft) { fr = fp; ft = fs } } var e = []; if (ft >= fv) { var fx = fu.slice(0, fr); var fw = fu.slice(fr, fu.length); var fq = fe(fx, fv); var fo = fe(fw, fv); for (var fp = 0, fn = fq.length; fp < fn; fp++) { e.push(fq[fp]) } for (var fp = 0, fn = fo.length; fp < fn; fp++) { e.push(fo[fp]) } } else { e.push(fu[0]); e.push(fu[fu.length - 1]) } return e } function c2(e) { if (Math.log2) { return Math.log2(e) } return Math.log(e) / Math.LN2 } function aK(fn, i, e) { return Math.min(e, Math.max(i, fn)) } function bE(e, i) { if (!i) { return e } var fq = i[0]; var fp = i[1]; var fo = i[2]; var fn = i[3]; var fs = []; var fr = []; fs[0] = fn * e[0] + fo * e[2]; fs[1] = e[1]; fs[2] = -fo * e[0] + fn * e[2]; fr[0] = fs[0]; fr[1] = fp * fs[1] - fq * fs[2]; fr[2] = fq * fs[1] + fp * fs[2]; return fr } var ak = Math.PI / 180; var y = 180 / Math.PI; function aQ(fn) { var i = (fn - Date.UTC(2000, 0, 1, 12)) / 86400000 / 36525; var e = (d3.utcDay.floor(fn) - fn) / 86400000 * 360 - 180; return [e - I(i) * y, ex(i) * y] } function I(fo) { var fp = eb(fo); var i = cs(fo); var fn = S(fo); var fq = Math.tan(d8(fo) / 2); fq *= fq; return fq * Math.sin(2 * fn) - 2 * fp * Math.sin(i) + 4 * fp * fq * Math.sin(i) * Math.cos(2 * fn) - 0.5 * fq * fq * Math.sin(4 * fn) - 1.25 * fp * fp * Math.sin(2 * i) } function ex(e) { return Math.asin(Math.sin(d8(e)) * Math.sin(eM(e))) } function eM(e) { return aD(e) - (0.00569 + 0.00478 * Math.sin((125.04 - 1934.136 * e) * ak)) * ak } function aD(e) { return S(e) + cu(e) } function cs(e) { return (357.52911 + e * (35999.05029 - 0.0001537 * e)) * ak } function S(i) { var e = (280.46646 + i * (36000.76983 + i * 0.0003032)) % 360; return (e < 0 ? e + 360 : e) / 180 * Math.PI } function cu(i) { var e = cs(i); return (Math.sin(e) * (1.914602 - i * (0.004817 + 0.000014 * i)) + Math.sin(e + e) * (0.019993 - 0.000101 * i) + Math.sin(e + e + e) * 0.000289) * ak } function d8(e) { return dv(e) + 0.00256 * Math.cos((125.04 - 1934.136 * e) * ak) * ak } function dv(e) { return (23 + (26 + (21.448 - e * (46.815 + e * (0.00059 - e * 0.001813))) / 60) / 60) * ak } function eb(e) { return 0.016708634 - e * (0.000042037 + 1.267e-7 * e) } function ay() { return window.devicePixelRatio || 1 } function ae(fn) { var i; var e; var fo; if (fn >= 0) { fo = Math.floor(fn / 65536) * 65536; i = fo; e = fn - fo } else { fo = Math.floor(-fn / 65536) * 65536; i = -fo; e = fn + fo } return [i, e] } function A(e) { if (e.lng >= 0 && e.lat >= 0) { return new e5(e.lng - 10000000, e.lat - 6000000) } if (e.lng >= 0 && e.lat < 0) { return new e5(e.lng - 10000000, e.lat + 6000000) } if (e.lng < 0 && e.lat >= 0) { return new e5(e.lng + 10000000, e.lat - 6000000) } if (e.lng < 0 && e.lat < 0) { return new e5(e.lng + 10000000, e.lat + 6000000) } } var dL = null; if (window.performance && window.performance.now) { dL = function () { return performance.now() } } else { if (Date.now) { dL = function () { return Date.now() } } else { dL = function () { return (new Date).getTime() } } } function aZ(fo, e, i) { var fn = "mouseWheel"; if (x.Platform.macintosh) { if (!isNaN(fo) && (fo < 10 || fo !== 120) && (e % 1 === 0 && e < 5)) { fn = "padScroll" } if (x.Browser.firefox && (e % 1 === 0 && e < 5 && i === 0)) { fn = "padScroll" } } if (x.Browser.safari && fo === 12) { fn = "mouseWheel" } return fn } function b2(fx, fs) { var fw = fx[0]; var fv = fx[1]; var fo = false; for (var fr = 0, fq = fs.length - 2; fr < fs.length; fr += 2) { var fu = fs[fr]; var fp = fs[fr + 1]; var ft = fs[fq]; var fn = fs[fq + 1]; var e = ((fp > fv) !== (fn > fv)) && (fw < (ft - fu) * (fv - fp) / (fn - fp) + fu); if (e) { fo = !fo } fq = fr } return fo } function bB(fn, e, i, fo) { fo = fo || 0.4; if (fn > i) { fn = Math.pow(fn - i + 1, fo) + i - 1 } else { if (fn < e) { fn = e - Math.pow(e - fn + 1, fo) + 1 } } return fn } function el(fs) { var fq = ""; for (var fn = 0; fn < fs.length; fn++) { var ft = fs.charCodeAt(fn) << 1; var e = ft.toString(2); var fp = e.length; var fw = e; if (fp < 8) { fw = "00000000" + e; fw = fw.substr(e.length, 8) } fq += fw } var fu = 5 - fq.length % 5; var fo = []; for (var fn = 0; fn < fu; fn++) { fo[fn] = "0" } fq = fo.join("") + fq; var fv = []; for (var fn = 0; fn < fq.length / 5; fn++) { var ft = fq.substr(fn * 5, 5); var fr = parseInt(ft, 2) + 50; fv.push(String.fromCharCode(fr)) } return fv.join("") + fu.toString() } function ad(fn, i) { var e = aI.TILE_VERSION || window.TILE_VERSION; if (!e || !e[fn] || !e[fn][i] || !e[fn][i].version || !e[fn][i].updateDate) { e = dp.tvc } return { ver: e[fn][i].version, udt: e[fn][i].updateDate } } function dK() { var e = aI.MSV || window.MSV; if (!e || !e.mapstyle || !e.mapstyle.updateDate || !e.mapstyle.version) { e = dp.msv } return { ver: e.mapstyle.version, udt: e.mapstyle.updateDate } } function cU(e, fp) { var fo = e.slice(0); for (var fn = 0; fn < fo.length; fn++) { fo[fn] += fp } return fo } var aw = null; function aP(e) { if (aw) { return } e.fire(new aB("onloadtile")); aw = setTimeout(function () { aw = null }, 1000) } function dl() { if (bs("//map.baidu.com") || bs("//maps.baidu.com") || bs("//ditu.baidu.com")) { return true } return false } ce.inMapHost = dl(); if (typeof window._inMapHost === "boolean") { ce.inMapHost = window._inMapHost } function bs(i) { var fn = window.location; var e = document.createElement("a"); e.href = i; return e.hostname === fn.hostname && e.port === fn.port && e.protocol === fn.protocol } function cI() { } x.extend(cI, { Request: { INITIAL: -1, WAITING: 0, LOADED: 1, COMPLETED: 2 }, Dependency: { poly: ["marker"], infowindow: ["marker"], groundOverlay: ["marker"], simpleInfowindow: ["marker"], hotspot: ["poly"], tools: ["marker", "poly"], mapgl: ["glcommon", "poly"], earth: ["glcommon"] }, MD5Mapping: { control: "opuv54", marker: "wb222j", poly: "i0dhwd", infowindow: "3own2e", simpleInfowindow: "ff1qns", groundOverlay: "$groundOverlay$", hotspot: "yio5bc", menu: "sqiyij", tools: "3zwtjd", oppc: "w3soxo", oppcgl: "5nctjm", mapgl: "x0ryop", markeranimation: "vbpjvy", earth: "50b5mn", glcommon: "ftdvzr" }, Config: { baseUrl: dp.apiHost + "/getmodules?v=1.0&type=webgl", jsModPath: (ce.inMapHost ? "" : dp.mapHost) + "/res/newui/", timeout: 5000 }, delayFlag: false, Module: { modules: {}, modulesNeedToLoad: [] }, _getMd5ModsStr: function (fq) { var fp = []; for (var fs = 0, fn = fq.length; fs < fn; fs++) { var fr = fq[fs]; var e = this.MD5Mapping[fr]; var fo = "$" + fr + "$"; if (e !== fo) { fp.push(fr + "_" + e) } } return fp.join(",") }, load: function (i, fq, fo) { var e = this.getModuleInfo(i); if (e.status === this.Request.COMPLETED) { if (fo === true) { fq() } } else { if (e.status === this.Request.INITIAL) { this.combine(i); this.addToLoadQueue(i); var fn = this; if (fn.delayFlag === false) { fn.delayFlag = true; setTimeout(function () { var fr = fn.Config.baseUrl + "&mod=" + fn._getMd5ModsStr(fn.Module.modulesNeedToLoad); e0.load(fr); fn.Module.modulesNeedToLoad.length = 0; fn.delayFlag = false }, 1) } e.status = this.Request.WAITING; function fp(ft) { var fs = fn.getModuleInfo(i); if (fs.status !== fn.Request.COMPLETED) { if (window.map) { var fr = new aB("onmod_timeout"); fr.timeout = ft / 1000; fr.moduleName = i; window.map.fire(fr) } } } setTimeout(fp, this.Config.timeout, this.Config.timeout); setTimeout(fp, this.Config.timeout * 2, this.Config.timeout * 2) } e.callbacks.push(fq) } }, combine: function (e) { if (e && this.Dependency[e]) { var fo = this.Dependency[e]; for (var fn = 0; fn < fo.length; fn++) { this.combine(fo[fn]); if (!this.Module.modules[fo[fn]]) { this.addToLoadQueue(fo[fn]) } } } }, addToLoadQueue: function (e) { var i = this.getModuleInfo(e); if (i.status === this.Request.INITIAL) { i.status = this.Request.WAITING; this.Module.modulesNeedToLoad.push(e) } }, run: function (fn, fo) { var fs = this.getModuleInfo(fn); var fv = this.Dependency[fn]; if (fv) { for (var fq = 0; fq < fv.length; fq++) { var fr = this.getModuleInfo(fv[fq]); if (fr.status !== this.Request.COMPLETED) { fr.modsNeedToRun.push({ name: fn, code: fo }); return } } } try { eval(fo) } catch (ft) { return } fs.status = this.Request.COMPLETED; for (var fq = 0, fp = fs.callbacks.length; fq < fp; fq++) { fs.callbacks[fq]() } fs.callbacks.length = 0; for (fq = 0; fq < fs.modsNeedToRun.length; fq++) { var fu = fs.modsNeedToRun[fq]; this.run(fu.name, fu.code) } fs.modsNeedToRun.length = 0 }, getModuleInfo: function (i) { var e; if (!this.Module.modules[i]) { this.Module.modules[i] = { status: this.Request.INITIAL, callbacks: [], modsNeedToRun: [] } } e = this.Module.modules[i]; return e } }); window._jsload = function (fp, fq) { var i = cI.getModuleInfo(fp); i.status = cI.Request.LOADED; if (fq !== "") { cI.run(fp, fq) } else { if (window.map) { var e = new aB("ongetmodules_fail"); e.moduleName = fp; window.map.fire(e) } var fn = document.createElement("script"); var fo = cI.MD5Mapping[fp]; fn.src = cI.Config.jsModPath + fp + "_" + fo + ".js"; document.getElementsByTagName("head")[0].appendChild(fn) } }; function M() { this._timeData = {} } var du; if (typeof window !== "undefined") { du = window } else { du = self } M.prototype.mark = function (e) { this._timeData[e] = this._getTime() }; M.prototype.getMark = function (e) { return this._timeData[e] }; M.prototype.getTime = function (i, e) { return parseFloat((this._timeData[e] - this._timeData[i]).toFixed(2)) }; M.prototype.print = function () { }; M.prototype.clear = function () { this._timeData = {} }; if (du.performance && du.performance.now) { M.prototype._getTime = function () { return performance.now() } } else { M.prototype._getTime = function () { return Date.now() } } !function (i, fn) { fn(i.d3 = i.d3 || {}) }(window, function (f0) { function gi(gq, gr, go, gp) { function e(i) { return gq(i = new Date(+i)), i } return e.floor = e, e.ceil = function (i) { return gq(i = new Date(i - 1)), gr(i, 1), gq(i), i }, e.round = function (i) { var gs = e(i), gt = e.ceil(i); return gt - i > i - gs ? gs : gt }, e.offset = function (i, gs) { return gr(i = new Date(+i), null == gs ? 1 : Math.floor(gs)), i }, e.range = function (gt, i, gs) { var gu = []; if (gt = e.ceil(gt), gs = null == gs ? 1 : Math.floor(gs), !(i > gt && gs > 0)) { return gu } do { gu.push(new Date(+gt)) } while (gr(gt, gs), gq(gt), i > gt); return gu }, e.filter = function (i) { return gi(function (gs) { for (; gq(gs), !i(gs);) { gs.setTime(gs - 1) } }, function (gs, gt) { for (; --gt >= 0;) { for (; gr(gs, 1), !i(gs);) { } } }) }, go && (e.count = function (i, gs) { return f2.setTime(+i), f6.setTime(+gs), gq(f2), gq(f6), Math.floor(go(f2, f6)) }, e.every = function (i) { return i = Math.floor(i), isFinite(i) && i > 0 ? i > 1 ? e.filter(gp ? function (gs) { return gp(gs) % i === 0 } : function (gs) { return e.count(0, gs) % i === 0 }) : e : null }), e } function f7(e) { return gi(function (i) { i.setDate(i.getDate() - (i.getDay() + 7 - e) % 7), i.setHours(0, 0, 0, 0) }, function (i, go) { i.setDate(i.getDate() + 7 * go) }, function (i, go) { return (go - i - (go.getTimezoneOffset() - i.getTimezoneOffset()) * f1) / gf }) } function fZ(e) { return gi(function (i) { i.setUTCDate(i.getUTCDate() - (i.getUTCDay() + 7 - e) % 7), i.setUTCHours(0, 0, 0, 0) }, function (i, go) { i.setUTCDate(i.getUTCDate() + 7 * go) }, function (i, go) { return (go - i) / gf }) } var f2 = new Date, f6 = new Date, gd = gi(function () { }, function (i, go) { i.setTime(+i + go) }, function (i, go) { return go - i }); gd.every = function (e) { return e = Math.floor(e), isFinite(e) && e > 0 ? e > 1 ? gi(function (i) { i.setTime(Math.floor(i / e) * e) }, function (i, go) { i.setTime(+i + go * e) }, function (i, go) { return (go - i) / e }) : gd : null }; var gm = gd.range, gk = 1000, f1 = 60000, gh = 3600000, f9 = 86400000, gf = 604800000, ft = gi(function (e) { e.setTime(Math.floor(e / gk) * gk) }, function (i, go) { i.setTime(+i + go * gk) }, function (i, go) { return (go - i) / gk }, function (e) { return e.getUTCSeconds() }), gj = ft.range, f8 = gi(function (e) { e.setTime(Math.floor(e / f1) * f1) }, function (i, go) { i.setTime(+i + go * f1) }, function (i, go) { return (go - i) / f1 }, function (e) { return e.getMinutes() }), fB = f8.range, fV = gi(function (i) { var go = i.getTimezoneOffset() * f1 % gh; 0 > go && (go += gh), i.setTime(Math.floor((+i - go) / gh) * gh + go) }, function (i, go) { i.setTime(+i + go * gh) }, function (i, go) { return (go - i) / gh }, function (e) { return e.getHours() }), ge = fV.range, fL = gi(function (e) { e.setHours(0, 0, 0, 0) }, function (i, go) { i.setDate(i.getDate() + go) }, function (i, go) { return (go - i - (go.getTimezoneOffset() - i.getTimezoneOffset()) * f1) / f9 }, function (e) { return e.getDate() - 1 }), fs = fL.range, fI = f7(0), fK = f7(1), fo = f7(2), fG = f7(3), fv = f7(4), fY = f7(5), f5 = f7(6), fq = fI.range, fX = fK.range, fz = fo.range, fU = fG.range, ga = fv.range, fW = fY.range, gl = f5.range, gc = gi(function (e) { e.setDate(1), e.setHours(0, 0, 0, 0) }, function (i, go) { i.setMonth(i.getMonth() + go) }, function (i, go) { return go.getMonth() - i.getMonth() + 12 * (go.getFullYear() - i.getFullYear()) }, function (e) { return e.getMonth() }), gn = gc.range, fF = gi(function (e) { e.setMonth(0, 1), e.setHours(0, 0, 0, 0) }, function (i, go) { i.setFullYear(i.getFullYear() + go) }, function (i, go) { return go.getFullYear() - i.getFullYear() }, function (e) { return e.getFullYear() }); fF.every = function (e) { return isFinite(e = Math.floor(e)) && e > 0 ? gi(function (i) { i.setFullYear(Math.floor(i.getFullYear() / e) * e), i.setMonth(0, 1), i.setHours(0, 0, 0, 0) }, function (i, go) { i.setFullYear(i.getFullYear() + go * e) }) : null }; var fy = fF.range, f3 = gi(function (e) { e.setUTCSeconds(0, 0) }, function (i, go) { i.setTime(+i + go * f1) }, function (i, go) { return (go - i) / f1 }, function (e) { return e.getUTCMinutes() }), fN = f3.range, fM = gi(function (e) { e.setUTCMinutes(0, 0, 0) }, function (i, go) { i.setTime(+i + go * gh) }, function (i, go) { return (go - i) / gh }, function (e) { return e.getUTCHours() }), fJ = fM.range, fH = gi(function (e) { e.setUTCHours(0, 0, 0, 0) }, function (i, go) { i.setUTCDate(i.getUTCDate() + go) }, function (i, go) { return (go - i) / f9 }, function (e) { return e.getUTCDate() - 1 }), fE = fH.range, fD = fZ(0), fC = fZ(1), fA = fZ(2), fx = fZ(3), fw = fZ(4), fr = fZ(5), fp = fZ(6), fn = fD.range, fT = fC.range, gg = fA.range, f4 = fx.range, gb = fw.range, fS = fr.range, fR = fp.range, fQ = gi(function (e) { e.setUTCDate(1), e.setUTCHours(0, 0, 0, 0) }, function (i, go) { i.setUTCMonth(i.getUTCMonth() + go) }, function (i, go) { return go.getUTCMonth() - i.getUTCMonth() + 12 * (go.getUTCFullYear() - i.getUTCFullYear()) }, function (e) { return e.getUTCMonth() }), fP = fQ.range, fu = gi(function (e) { e.setUTCMonth(0, 1), e.setUTCHours(0, 0, 0, 0) }, function (i, go) { i.setUTCFullYear(i.getUTCFullYear() + go) }, function (i, go) { return go.getUTCFullYear() - i.getUTCFullYear() }, function (e) { return e.getUTCFullYear() }); fu.every = function (e) { return isFinite(e = Math.floor(e)) && e > 0 ? gi(function (i) { i.setUTCFullYear(Math.floor(i.getUTCFullYear() / e) * e), i.setUTCMonth(0, 1), i.setUTCHours(0, 0, 0, 0) }, function (i, go) { i.setUTCFullYear(i.getUTCFullYear() + go * e) }) : null }; var fO = fu.range; f0.timeInterval = gi, f0.timeMillisecond = gd, f0.timeMilliseconds = gm, f0.utcMillisecond = gd, f0.utcMilliseconds = gm, f0.timeSecond = ft, f0.timeSeconds = gj, f0.utcSecond = ft, f0.utcSeconds = gj, f0.timeMinute = f8, f0.timeMinutes = fB, f0.timeHour = fV, f0.timeHours = ge, f0.timeDay = fL, f0.timeDays = fs, f0.timeWeek = fI, f0.timeWeeks = fq, f0.timeSunday = fI, f0.timeSundays = fq, f0.timeMonday = fK, f0.timeMondays = fX, f0.timeTuesday = fo, f0.timeTuesdays = fz, f0.timeWednesday = fG, f0.timeWednesdays = fU, f0.timeThursday = fv, f0.timeThursdays = ga, f0.timeFriday = fY, f0.timeFridays = fW, f0.timeSaturday = f5, f0.timeSaturdays = gl, f0.timeMonth = gc, f0.timeMonths = gn, f0.timeYear = fF, f0.timeYears = fy, f0.utcMinute = f3, f0.utcMinutes = fN, f0.utcHour = fM, f0.utcHours = fJ, f0.utcDay = fH, f0.utcDays = fE, f0.utcWeek = fD, f0.utcWeeks = fn, f0.utcSunday = fD, f0.utcSundays = fn, f0.utcMonday = fC, f0.utcMondays = fT, f0.utcTuesday = fA, f0.utcTuesdays = gg, f0.utcWednesday = fx, f0.utcWednesdays = f4, f0.utcThursday = fw, f0.utcThursdays = gb, f0.utcFriday = fr, f0.utcFridays = fS, f0.utcSaturday = fp, f0.utcSaturdays = fR, f0.utcMonth = fQ, f0.utcMonths = fP, f0.utcYear = fu, f0.utcYears = fO, Object.defineProperty(f0, "__esModule", { value: !0 }) }); function em(e) { this._elemType = e; this._objCollection = {} } em.prototype.get = function () { var i = null; for (var e in this._objCollection) { if (this._objCollection[e] && this._objCollection[e]._free === true) { this._objCollection[e]._free = false; return this._objCollection[e] } } i = H(this._elemType); e = aI.getGUID("obj_pool_"); this._objCollection[e] = i; return i }; em.prototype.free = function (e) { if (!e) { return } e._free = true; if (e.tagName.toLowerCase() === "img") { e.src = ""; e.crossOrigin = null; e.onload = e.onerror = null } }; em.prototype.clear = function () { for (var e in this._objCollection) { if (this._objCollection[e] && this._objCollection[e].tagName.toLowerCase === "img") { this._objCollection[e].onload = this._objCollection[e].onerror = null } } this._objCollection = {} }; var e0 = (function (e) { function i(fq, fn, fp) { var fo = H("script", { src: fq, type: "text/javascript", charset: "utf-8" }); if (fo.addEventListener) { fo.addEventListener("load", function (fs) { var fr = fs.target; fr.parentNode.removeChild(fr); fn && fn() }, false); fo.addEventListener("error", function (fr) { fp && fp(null) }, false) } else { if (fo.attachEvent) { fo.attachEvent("onreadystatechange", function (fs) { var fr = window.event.srcElement; if (fr && (fr.readyState === "loaded" || fr.readyState === "complete")) { fr.parentNode.removeChild(fr) } fn && fn() }) } } e.getElementsByTagName("head")[0].appendChild(fo) } return { load: function (fr, fn, fo) { if (typeof fr === "string") { i(fr, fn, fo) } else { if (fr.length > 0) { var fq = fr.length; for (var fp = 0; fp < fq; fp++) { i(fr[fp], function () { fq--; if (fq === 0 && fn) { fn() } }) } } } } } })(window.document); function bF() { } bF.instances = {}; bF.getInstance = function (i, fn) { if (bF.instances[i]) { return bF.instances[i] } var e = new b4(i, fn); bF.instances[i] = e; return e }; function b4(e, i) { this._name = e; this._baseZoom = 18; this._opts = { tileSize: 256 }; x.extend(this._opts, i || {}) } b4.mapZoomBaseIndex = [0, 0, 0, 8, 7, 7, 6, 6, 5, 5, 4, 3, 3, 3, 2, 2, 1, 1, 0, 0, 0, 0]; b4.baseScaleZoom = [19, 17, 15, 12, 10, 9, 7, 5, 3]; b4.baseScaleZoomMercatorSize = [512, 2048, 4096, 32768, 65536, 262144, 1048576, 4194304, 8388608]; b4.mapZoomBaseZoomMapping = [0, 0, 0, 3, 5, 5, 7, 7, 9, 9, 10, 12, 12, 12, 15, 15, 17, 17, 19, 19, 19, 19]; b4.mapZoomStartZoomMapping = [0, 0, 0, 3, 4, 4, 6, 6, 8, 8, 10, 11, 11, 11, 14, 14, 16, 16, 18, 18, 18, 18]; b4.baseScaleTileSize = [1024, 1024, 512, 512, 256, 512, 512, 512, 256]; b4.mapZoomTileSize = [0, 0, 0, 256, 256, 512, 256, 512, 256, 512, 256, 256, 512, 1024, 256, 512, 512, 1024, 512, 1024, 2048, 4096]; b4.baseZoomInfo = { "3": [3], "5": [4, 5], "7": [6, 7], "9": [8, 9], "10": [10], "12": [11, 12, 13], "15": [14, 15], "17": [16, 17], "19": [18, 19, 20, 21] }; b4.prototype = { getName: function () { return this._name }, getTileSize: function (e) { e = Math.floor(e); if (e < 3) { e = 3 } if (this._name === "na") { return b4.mapZoomTileSize[e] } return this._opts.tileSize }, getBaseTileSize: function (i) { i = Math.floor(i); if (this._name === "na") { var e = b4.mapZoomBaseZoomMapping[i]; return b4.mapZoomTileSize[e] } return this._opts.tileSize }, getDataZoom: function (e) { e = Math.floor(e); if (this._name === "na") { return b4.mapZoomBaseZoomMapping[e] } return e }, getZoomUnits: function (e) { return Math.pow(2, (this._baseZoom - e)) }, getMercatorSize: function (fn, i) { if (this._name === "na") { fn = Math.floor(fn); var e = b4.mapZoomBaseIndex[fn]; return b4.baseScaleZoomMercatorSize[e] } return this._opts.tileSize * this.getZoomUnits(i) }, getBaseZoom: function () { return this._baseZoom }, getParentTile: function (fo, fu, ft, fn, i) { if (this._name === "na") { var fp = b4.baseZoomInfo[ft]; fn--; if (fp.indexOf(fn) > -1) { return { col: fo, row: fu, zoom: ft, useZoom: fn } } else { var fr = b4.mapZoomBaseIndex[ft]; var fq = b4.baseScaleZoom[fr + 1]; if (!fq) { return null } var fs = this.getFactorByZooms(fq, ft); var e = b4.baseZoomInfo[fq]; return { col: Math.floor(fo / fs), row: Math.floor(fu / fs), zoom: fq, useZoom: e[e.length - 1] } } return null } if (ft - 1 < i) { return null } return { col: Math.floor(fo / 2), row: Math.floor(fu / 2), zoom: ft - 1, useZoom: ft - 1 } }, getChildTiles: function (fp, fr, e, fn, fy, fE) { if (this._name === "na") { var fo = b4.baseZoomInfo[e]; fn += fE; if (fo.indexOf(fn) > -1) { return [{ col: fp, row: fr, zoom: e, useZoom: fn }] } else { var fC = 0; var fz = e; while (fC < fE) { var fD = b4.mapZoomBaseIndex[fz]; var ft = b4.baseScaleZoom[fD - 1]; if (!ft) { return null } var fu = b4.baseZoomInfo[ft]; if (fu[fE - 1]) { var fv = []; var fx = this.getFactorByZooms(e, ft); var i = fp * fx; var fw = fr * fx; for (var fB = 0; fB < fx; fB++) { var fq = i + fB; for (var fA = 0; fA < fx; fA++) { var fs = fw + fA; fv.push({ col: fq, row: fs, zoom: ft, useZoom: fu[fE - 1] }) } } return fv } fC += fu.length; if (fE === fu.length) { fz = ft } } } return null } var fv = []; if (e + fE > fy) { return null } var fx = Math.pow(2, fE); var i = fp * fx; var fw = fr * fx; var ft = e + fE; var fv = []; for (var fB = 0; fB < 2; fB++) { var fq = i + fB; for (var fA = 0; fA < 2; fA++) { var fs = fw + fA; fv.push({ col: fq, row: fs, zoom: ft, useZoom: ft }) } } return fv }, getFactorByZooms: function (i, fo) { var fn = b4.mapZoomBaseIndex[i]; var fp = b4.mapZoomBaseIndex[fo]; var e = b4.baseScaleZoomMercatorSize[fn]; var fq = b4.baseScaleZoomMercatorSize[fp]; return e / fq } }; var aA = {}; var P = ["swiftshader", "microsoft basic render driver"]; var bp = ["intel", "nvidia", "amd", "apple", "geforce"]; function cd(e) { e = e.toLowerCase(); if (P.indexOf(e) >= 0) { return true } if (e.indexOf("mobile") >= 0) { return true } return false } function dN(fn) { fn = fn.toLowerCase(); for (var e = 0; e < bp.length; e++) { if (fn.indexOf(bp[e]) >= 0) { return true } } return false } function cC(e) { if (!e) { return false } if (cd(e)) { return false } if (dN(e)) { return true } return false } aA.ifEnableEarth = function (i) { var e = aA.ifEnableEarth; if (!i && typeof e._enable === "boolean") { return e._enable } if (aA.ifSupportWebGL()) { e._enable = true; return true } e._enable = false; return false }; aA.ifEnableWebGLMap = function (i) { var e = aA.ifEnableWebGLMap; if (!i && typeof e._enable === "boolean") { return e._enable } if (aA.ifSupportWebGL()) { if (ce.inMapHost) { e._enable = true; return true } else { if (window.Blob || window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder) { e._enable = true; return true } else { e._enable = false; return false } } } e._enable = false; return false }; aA.params = {}; aA.ifSupportWebGL = function () { var i = aA.ifSupportWebGL; if (typeof i._supportWebGL === "boolean") { return i._supportWebGL } if (!window.WebGLRenderingContext) { i._supportWebGL = false; return false } var fn = document.createElement("canvas"); fn.width = 300; fn.height = 150; var fp = null; var fv = { alpha: false, antialias: false, failIfMajorPerformanceCaveat: true, preserveDrawingBuffer: false, stencil: false }; try { fp = fn.getContext("webgl", fv) || fn.getContext("experimental-webgl", fv) } catch (fr) { i._supportWebGL = false } if (fp === null) { i._supportWebGL = false } else { i._supportWebGL = true; var ft = fp.getExtension("WEBGL_debug_renderer_info"); if (ft) { var fs = fp.getParameter(ft.UNMASKED_RENDERER_WEBGL); if (cC(fs) === true) { i._supportWebGL = true } var fu = fp.getParameter(ft.UNMASKED_VENDOR_WEBGL); i._renderer = fs; i._vendor = fu } if (!ft && x.Browser.firefox) { i._supportWebGL = true } if (!ft && x.Platform.macintosh) { i._supportWebGL = true } if (fp.drawingBufferWidth !== fn.width || fp.drawingBufferHeight !== fn.height) { i._supportWebGL = false } if (fp.getParameter(fp.MAX_VERTEX_TEXTURE_IMAGE_UNITS) < 4) { i._supportWebGL = false } var fo = fp.getParameter(fp.MAX_TEXTURE_SIZE); aA.params.maxTextureSize = fo; if (fo < 4096) { i._supportWebGL = false } var fq = fp.getParameter(fp.MAX_TEXTURE_IMAGE_UNITS); if (fq < 8) { i._supportWebGL = false } if (!fp.getShaderPrecisionFormat || fp.getShaderPrecisionFormat(fp.FRAGMENT_SHADER, fp.HIGH_FLOAT).precision < 23) { i._supportWebGL = false } } return i._supportWebGL }; aA.ifSupportCanvas2d = function () { var fp = aA.ifSupportCanvas2d; if (typeof fp.supportCanvas2d === "boolean") { return fp.supportCanvas2d } var fn = document.createElement("canvas"); var i = null; try { i = fn.getContext("2d") } catch (fo) { fp.supportCanvas2d = false } if (i === null) { fp.supportCanvas2d = false } else { fp.supportCanvas2d = true } return fp.supportCanvas2d }; aA.ifEnableCanvas2dMap = function () { var i = navigator.userAgent; var e = 0; var fo = 0; var fp = 0; if (/macintosh/ig.test(i)) { var fn = 0; if (/(\d+\.\d)?(?:\.\d)?\s+safari\/?(\d+\.\d+)?/i.test(i) && !/chrome/i.test(i)) { fn = parseInt((RegExp["\x241"] || RegExp["\x242"]), 10) } if (fn > 0) { return false } return true } if (/windows nt (\d+\.\d)/ig.test(i)) { fo = parseFloat(RegExp.$1); if (fo >= 6.1) { if (/chrome\/(\d+\.\d)/i.test(i)) { e = parseFloat(RegExp.$1); if (e >= 31) { return true } } if (/MSIE (\d+(\.\d+)?)/.test(i)) { fp = parseFloat(RegExp.$1); if (fp >= 10) { return true } } if (/Firefox/.test(i)) { return true } if (/rv:11.0/ig.test(i)) { return true } if (/edge/ig.test(i)) { return true } } } return false }; aA.ifSupportCSS3 = function (fs, i) { var fr = document.createElement("div"); var fq = "Webkit Moz O ms".split(" "); var e = fq.length; var fn = ""; var fo = fr.style; if (fs in fo) { fn = fs } fs = fs.replace(/^[a-z]/, function (ft) { return ft.toUpperCase() }); while (e--) { var fp = fq[e] + fs; if (fp in fo) { fn = fp; break } } if (i) { return fn } else { return fn.length > 0 ? true : false } }; aA.isModernBrowser = aA.ifSupportCanvas2d() && aA.ifSupportCSS3("transform"); function dk(i, e) { this._size = i; this._curSize = 0; this._cache = {}; this._least = null; this._most = null; this._options = { clearCallback: null, removeOldCallback: null }; e = e || {}; for (var fn in e) { this._options[fn] = e[fn] } this._getDataTimes = 0; this._hitTimes = 0 } dk.prototype.setData = function (fo, fq) { var i = this._cache; var fn = this._size; if (fn === 0) { return } var e = this._curSize; if (e === fn) { this._removeOld() } var fp; if (!i[fo]) { fp = { key: fo, data: fq, older: null, newwer: null }; i[fo] = fp; if (this._least === null) { this._least = fp } if (this._most === null) { this._most = fp } this._curSize++ } else { fp = i[fo]; fp.data = fq; if (this._most === fp) { return } fp.older && (fp.older.newer = fp.newer); fp.newer && (fp.newer.older = fp.older); if (this._least === fp) { this._least = fp.newer } } if (this._most && this._most !== fp) { this._most.newer = fp; fp.older = this._most; this._most = fp; fp.newer = null } }; dk.prototype.getData = function (e) { var i = this._cache[e]; this._getDataTimes++; if (i) { this._hitTimes++; var fn = i.data; if (this._most === i) { return fn } i.older && (i.older.newer = i.newer); i.newer && (i.newer.older = i.older); if (this._least === i) { this._least = i.newer } this._most.newer = i; i.older = this._most; i.newer = null; this._most = i; return fn } return null }; dk.prototype.getAllData = function () { return this._cache }; dk.prototype.getHitRate = function () { return this._hitTimes / this._getDataTimes }; dk.prototype.removeData = function (i) { var e = this._cache; var fn = e[i]; if (!fn) { return } if (this._options.clearCallback) { this._options.clearCallback(fn.data, fn.key) } fn.older && (fn.older.newer = fn.newer); fn.newer && (fn.newer.older = fn.older); if (this._least === fn) { this._least = fn.newer } if (this._most === fn) { this._most = fn.older } delete e[i]; this._curSize-- }; dk.prototype._removeOld = function () { var e = this._cache; var fo = Math.round(this._size * 0.6); var fn = 0; while (this._least && fn < fo) { var i = this._least; this._least = i.newer; i.newer && (i.newer.older = null); if (this._options.clearCallback) { this._options.clearCallback(i.data, i.key) } delete e[i.key]; fn++ } this._curSize -= fn; if (this._options.removeOldCallback) { this._options.removeOldCallback() } }; dk.prototype.clear = function () { var e = this._cache; var i = this._least; if (this._options.clearCallback) { while (i) { this._options.clearCallback(i.data, i.key); i = i.newer } } this._least = this._most = null; this._cache = {}; this._curSize = 0 }; dk.prototype.forEach = function (e) { var i = this._least; while (i) { e(i.data); i = i.newer } }; dk.prototype.clearExcept = function (i) { var e = this._cache; var fn = this._least; while (fn) { if (!i[fn.key]) { if (this._options.clearCallback) { this._options.clearCallback(fn.data, fn.key) } fn.older && (fn.older.newer = fn.newer); fn.newer && (fn.newer.older = fn.older); if (this._least === fn) { this._least = fn.newer } if (this._most === fn) { this._most = fn.older } delete e[fn.key]; this._curSize-- } fn = fn.newer } }; var bA = { request: function (fr, fo, i, ft, fn) { var fp = (Math.random() * 100000).toFixed(0); aI._rd["_cbk" + fp] = function (fu) { if (fu.result && fu.result["error"] && fu.result["error"] === 202) { alert("该AK因为恶意行为已经被管理员封禁！"); return } i = i || {}; fr && fr(fu, i); delete aI._rd["_cbk" + fp] }; ft = ft || ""; var fs; if (i && i.useEncodeURI) { fs = eY(fo, encodeURI) } else { fs = eY(fo, encodeURIComponent) } var fq = this; var e = dp.apiHost + "/" + ft + "?" + fs + "&ie=utf-8&oue=1&fromproduct=jsapi"; if (!fn) { e += "&res=api" } e += "&callback=" + c0 + "._rd._cbk" + fp; e += "&ak=" + eg; e0.load(e) } }; aI._rd = {}; function az() { this._map = null; this._container; this._type = "control"; this.blockInfoWindow = true; this._visible = true } az.inherits(cK, "Control"); x.extend(az.prototype, { initialize: function (e) { this._map = e; if (this._container) { if (this._opts && this._opts.container) { this._opts.container.appendChild(this._container) } else { e.container.appendChild(this._container) } return this._container } return }, _i: function (e) { if (!this._container && this.initialize && a7(this.initialize)) { this._container = this.initialize(e) } this._opts = this._opts || { printable: false }; this._setStyle(); this._setPosition(); if (this._container) { this._container._jsobj = this } }, _setStyle: function () { var i = this._container; if (i) { var e = i.style; e.position = "absolute"; e.zIndex = this._cZIndex || "10"; e.MozUserSelect = "none"; if (!this._opts.printable) { x.ac(i, "BMap_noprint") } x.on(i, "contextmenu", bY) } }, remove: function () { this._map = null; if (!this._container) { return } this._container.parentNode && this._container.parentNode.removeChild(this._container); this._container._jsobj = null; this._container = null }, _render: function (e) { if (this._opts && this._opts.container) { this._container = cq(this._opts.container, '<div unselectable="on"></div>') } else { var i = '<div unselectable="on"></div>'; if (e && e.config.autoSafeArea && aN()) { this._safeAreaContainer = cq(this._map.container, i); this._safeAreaContainer.style.position = "absolute"; this._safeAreaContainer.style.bottom = "env(safe-area-inset-bottom)"; this._container = cq(this._safeAreaContainer, i) } else { this._container = cq(this._map.container, i) } } if (this._visible === false) { this._container.style.display = "none" } return this._container }, _setPosition: function () { this.setAnchor(this._opts.anchor) }, setAnchor: function (fo) { if (this.anchorFixed || typeof fo !== "number" || isNaN(fo) || fo < BMAP_ANCHOR_TOP_LEFT || fo > BMAP_ANCHOR_BOTTOM_RIGHT) { fo = this.defaultAnchor } this._opts.offset = this._opts.offset || this.defaultOffset; var fn = this._opts.anchor; this._opts.anchor = fo; if (!this._container) { return } var fq = this._container; var e = this._opts.offset.width; var fp = this._opts.offset.height; fq.style.left = fq.style.top = fq.style.right = fq.style.bottom = "auto"; switch (fo) { case BMAP_ANCHOR_TOP_LEFT: fq.style.top = fp + "px"; fq.style.left = e + "px"; break; case BMAP_ANCHOR_TOP_RIGHT: fq.style.top = fp + "px"; fq.style.right = e + "px"; break; case BMAP_ANCHOR_BOTTOM_LEFT: fq.style.bottom = fp + "px"; fq.style.left = e + "px"; break; case BMAP_ANCHOR_BOTTOM_RIGHT: fq.style.bottom = fp + "px"; fq.style.right = e + "px"; break; default: break }var i = ["TL", "TR", "BL", "BR"]; x.rc(this._container, "anchor" + i[fn]); x.ac(this._container, "anchor" + i[fo]) }, getAnchor: function () { return this._opts.anchor }, setOffset: function (e) { if (!e) { return } this._opts = this._opts || {}; this._opts.offset = new cH(e.width, e.height); if (!this._container) { return } this.setAnchor(this._opts.anchor) }, getOffset: function () { return this._opts.offset }, getDom: function () { return this._container }, show: function () { if (this._visible === true) { return } this._visible = true; if (this._container) { this._container.style.display = "" } this.dispatchEvent(new aB("onshow")) }, hide: function () { if (this._visible === false) { return } this._visible = false; if (this._container) { this._container.style.display = "none" } this.dispatchEvent(new aB("onhide")) }, isPrintable: function () { return !!this._opts.printable }, isVisible: function () { if (!this._container && !this._map) { return false } return !!this._visible }, _asyncLoadCode: function () { var e = this; cI.load("control", function () { if (e._asyncDraw) { e._asyncDraw() } }) } }); var fd = { TOP_LEFT: 0, TOP_RIGHT: 1, BOTTOM_LEFT: 2, BOTTOM_RIGHT: 3 }; aI.ControlAnchor = fd; window.BMAP_ANCHOR_TOP_LEFT = 0; window.BMAP_ANCHOR_TOP_RIGHT = 1; window.BMAP_ANCHOR_BOTTOM_LEFT = 2; window.BMAP_ANCHOR_BOTTOM_RIGHT = 3; function cp(e) { az.call(this); e = e || {}; this._opts = { printable: false }; x.extend(this._opts, e); this._copyrightCollection = []; this.defaultAnchor = BMAP_ANCHOR_BOTTOM_LEFT; this.defaultOffset = new cH(5, 2); this.setAnchor(e.anchor); this._canShow = true; this.sateMapStyle = false; this.blockInfoWindow = false; this._asyncLoadCode() } cp.inherits(az, "CopyrightControl"); x.extend(cp.prototype, { initialize: function (e) { this._map = e; return this._container }, addCopyright: function (fo) { var e = { minZoom: 0, bounds: null, content: "", mapType: "" }; for (var fn in fo) { e[fn] = fo[fn] } if (this._map) { var fr = e.minZoom; if (fr === -1 || fr < this._map.getMinZoom() || fr > this._map.getMaxZoom()) { e.minZoom = this._map.getMinZoom() } if (e.mapType !== "" && !be[e.mapType]) { e.mapType = BMAP_NORMAL_MAP } } var fp = this.getCopyright(fo.id); if (fp) { for (var fq in e) { fp[fq] = e[fq] } } else { this._copyrightCollection.push(e) } }, getCopyright: function (fo) { for (var fn = 0, e = this._copyrightCollection.length; fn < e; fn++) { if (this._copyrightCollection[fn].id === fo) { return this._copyrightCollection[fn] } } }, addSateMapStyle: function () { this.sateMapStyle = true; if (this._container) { x.ac(this._container, "BMap_cpyCtrl_w") } }, removeSateMapStyle: function () { this.sateMapStyle = false; if (this._container) { x.rc(this._container, "BMap_cpyCtrl_w") } } }); function eW(e) { az.call(this); e = e || {}; this._opts = { printable: false }; this._opts = x.extend(x.extend(this._opts, { unit: "metric" }), e); this.defaultAnchor = BMAP_ANCHOR_BOTTOM_LEFT; this.defaultOffset = new cH(81, 18); if (d9()) { this.defaultOffset = new cH(75, 10) } this.setAnchor(e.anchor); this._units = { metric: { name: "metric", conv: 1, incon: 1000, u1: "米", u2: "公里" }, us: { name: "us", conv: 3.2808, incon: 5280, u1: "英尺", u2: "英里" } }; this.sateMapStyle = false; if (!this._units[this._opts.unit]) { this._opts.unit = "metric" } this._scaleText = null; this._numberArray = {}; this._asyncLoadCode() } window.BMAP_UNIT_METRIC = "metric"; window.BMAP_UNIT_IMPERIAL = "us"; eW.inherits(az, "ScaleControl"); x.extend(eW.prototype, { initialize: function (e) { this._map = e; return this._container }, setUnit: function (e) { this._opts.unit = this._units[e] && this._units[e].name || this._opts.unit }, getUnit: function () { return this._opts.unit }, addSateMapStyle: function () { this.sateMapStyle = true; var e = this._container; if (e) { x.ac(e.children[0], "dark") } }, removeSateMapStyle: function () { this.sateMapStyle = false; var e = this._container; if (e) { x.rc(e.children[0], "dark") } } }); window.BMAP_NAVIGATION_CONTROL_LARGE = 0; window.BMAP_NAVIGATION_CONTROL_SMALL = 1; window.BMAP_NAVIGATION_CONTROL_PAN = 2; window.BMAP_NAVIGATION_CONTROL_ZOOM = 3; window.BMAP_NAVIGATION_CONTROL_ANIM = 4; function cb(e) { az.call(this); e = e || {}; this._opts = { printable: false }; x.extend(this._opts, e); this.controlHeight = [{ width: 65, height: 227, zoomHeight: 227, zoomWidth: 37, sliderHeight: 180 }, { width: 65, height: 47, zoomHeight: (this._opts.forceNew === true) ? 56 : 47, zoomWidth: 37, sliderHeight: 0 }, { width: 37, height: 57, zoomHeight: 0, zoomWidth: 0, sliderHeight: 0 }, { width: 26, height: 56, zoomHeight: 56, zoomWidth: 6, sliderHeight: 0 }, { width: 56, height: 47, zoomHeight: 47, zoomWidth: 37, sliderHeight: 180 }]; this.defaultAnchor = BMAP_ANCHOR_TOP_LEFT; this.defaultOffset = new cH(10, 10); this.setAnchor(e.anchor); this.setType(e.type); this._maxTotalZoomLv = 19; this._minZoomLevel = -1; this._maxZoomLevel = -1; this._totalZoomLv = -1; this._sliderInterval = 10; this._sliderHeight = 180; this._minBarY = 1; this._maxBarY = -1; this._curBarY = -1; this._zoomDom = null; this._zoomBtnDom = null; this._sliderDom = null; this._sliderBaseDom = null; this._cZIndex = "1100"; this._asyncLoadCode() } cb.inherits(az, "NavigationControl"); x.extend(cb.prototype, { initialize: function (e) { this._map = e; return this._container }, setType: function (e) { if (typeof e == "number" && e >= BMAP_NAVIGATION_CONTROL_LARGE && e <= BMAP_NAVIGATION_CONTROL_ANIM) { this._opts.type = e } else { this._opts.type = BMAP_NAVIGATION_CONTROL_LARGE } }, getType: function () { return this._opts.type } }); function aT(i) { az.call(this); i = i || {}; this._opts = { printable: false }; this.defaultAnchor = BMAP_ANCHOR_TOP_RIGHT; this.defaultOffset = new cH(10, 10); this.setAnchor(i.anchor); this._opts = x.extend(x.extend(this._opts, { offset: this.defaultOffset, enableSwitch: true }), i); var e = this; cI.load("control", function () { e._asyncDraw() }) } aT.inherits(az, "MapTypeControl"); x.extend(aT.prototype, { initialize: function (e) { this._map = e; return this._container }, showStreetLayer: function (e) { this._map.showStreetLayer(e) } }); function by(e) { az.call(this); e = e || {}; this._opts = {}; this._opts = x.extend(this._opts, e); this._zoomInDisabled = false; this._zoomOutDisabled = false; this._zoomInTapped = false; this._zoomOutTapped = false; this.defaultAnchor = fd.BOTTOM_RIGHT; this.defaultOffset = new cH(10, 50); this.setAnchor(e.anchor); this._asyncLoadCode() } by.inherits(az, "ZoomControl"); x.extend(by.prototype, { initialize: function (e) { this._map = e; return this._container } }); function aR(e) { az.call(this); e = e || {}; this._opts = { autoZoom: true, autoViewport: true }; this._opts = x.extend(this._opts, e); this.defaultAnchor = fd.BOTTOM_LEFT; this.defaultOffset = new cH(10, 50); this.watchPosition = this._opts.watchPosition || false; this.useCompass = this._opts.useCompass || false; this.locMarker = null; this.locLevel = 16; this.setAnchor(this._opts.anchor); this.onLocationStart = e.onLocationStart || null; this._asyncLoadCode() } aR.inherits(az, "LocationControl"); x.extend(aR.prototype, { initialize: function (e) { this._map = e; return this._container }, startLocation: function () { this._startLocationCalled = true }, stopLocationTrace: function () { }, setOptions: function (e) { e = e || {}; x.extend(this._opts, e) } }); function O(e) { az.call(this); e = e || {}; this._opts = {}; this._opts = x.extend(this._opts, e); this.defaultAnchor = fd.BOTTOM_LEFT; this.defaultOffset = new cH(1, 15); if (d9()) { this.defaultOffset = new cH(1, 1) } this.setAnchor(e.anchor) } O.inherits(az, "LogoControl"); x.extend(O.prototype, { initialize: function (i) { this._map = i; var e = this._container = document.createElement("div"); e.innerHTML = '<img src="' + dp.apiHost + '/images/copyright_logo.png" />'; i.getContainer().appendChild(e); return e } }); function ew(e, i) { this._map = e; this._indoorInfo = i; this._visible = true; this._adjustVisible = true; this._isMobile = d9(); this._sizeConfig = { FLOOR_BTN_HEIGHT: this._isMobile ? 35 : 26, SWITCH_ARROW_HEIGHT: this._isMobile ? 20 : 15 }; this._init() } ew.prototype._init = function () { this._render(); this._bindDom(); this._bind(); this._adjustDisplayHeight(); var e = new aB("onindoor_bar_show"); e.uid = this._indoorInfo.uid; this._map.dispatchEvent(e) }; ew.prototype._render = function () { if (!this._indoorInfo) { return } var fs = this._isMobile; var e = this._div = H("div"); x.ac(e, "floor-select-container"); fs && x.ac(e, "mobile"); fs && x.ac(e, "all-border-radius"); var i = this._btnTop = H("button"); x.ac(i, "floor-switch-top"); x.ac(i, "top-border-radius"); var fq = H("div"); x.ac(fq, "floor-switch-top-icon"); i.appendChild(fq); var fp = this._btnBottom = H("button"); var fn = H("div"); x.ac(fn, "floor-switch-bottom-icon"); fp.appendChild(fn); x.ac(fp, "floor-switch-bottom"); x.ac(fp, "bottom-border-radius"); var fo = this._floorsContainer = H("div"); x.ac(fo, "floors-container"); fo.appendChild(this._createFloorsDom()); this._div.appendChild(i); this._div.appendChild(fo); this._div.appendChild(fp); var ft = 0; if (this._btnTop.style.display === "") { ft = 2 * this._sizeConfig.SWITCH_ARROW_HEIGHT } this._div.style.height = parseInt(this._floorsContainer.style.height, 10) + ft + "px"; this._map.getContainer().appendChild(this._div); if (!fs) { var fr = this; setTimeout(function () { fr._div.style.right = "20px" }, 20) } }; ew.prototype._createFloorsDom = function () { if (!this._indoorInfo) { return } var fn = this._ol = H("ol"); var fq = this._indoorInfo.currentFloor; for (var fp = this._indoorInfo.floors.length - 1; fp >= 0; fp--) { var fr = this._indoorInfo.floors[fp].floorName; var e = H("li"); var fo = H("button"); x.ac(fo, "btn-select-floor"); if (fp === fq) { x.ac(fo, "selected") } fo.setAttribute("data-floor", fp); fo.innerHTML = fr; e.appendChild(fo); fn.appendChild(e) } return fn }; ew.prototype._updateUI = function () { if (!this._ol) { this._render(); this._bind(); this._adjustDisplayHeight(); return } this._ol = null; this._ol = this._createFloorsDom(); this._floorsContainer.innerHTML = ""; this._floorsContainer.appendChild(this._ol); this._adjustDisplayHeight() }; ew.prototype._bindDom = function () { var e = this; x.on(this._floorsContainer, "click", function (fo) { var fn = fo.target || fo.srcElement; if (fn.tagName.toLowerCase() === "button") { e._map.showIndoor(e._indoorInfo.uid, parseInt(fn.getAttribute("data-floor"), 10)); var i = new aB("onindoor_bar_click"); i.uid = e._indoorInfo.uid; e._map.dispatchEvent(i) } }); x.on(this._floorsContainer, "mouseover", function (fn) { var i = fn.target; if (i.tagName.toLowerCase() === "button") { x.ac(i, "hover") } }); x.on(this._floorsContainer, "mouseout", function (fn) { var i = fn.target; if (i.tagName.toLowerCase() === "button") { x.rc(i, "hover") } }); x.on(this._floorsContainer, "touchstart", function (fn) { var i = fn.target; if (i.tagName.toLowerCase() === "button") { x.ac(i, "onmousedown") } }); x.on(this._floorsContainer, "touchend", function (fn) { var i = fn.target; if (i.tagName.toLowerCase() === "button") { x.rc(i, "onmousedown") } }); x.on(this._btnTop, "mouseover", function (i) { if (this._disable) { return } x.ac(this, "hover") }); x.on(this._btnTop, "mouseout", function (i) { x.rc(this, "hover") }); x.on(this._btnBottom, "mouseover", function (i) { if (this._disable) { return } x.ac(this, "hover") }); x.on(this._btnBottom, "mouseout", function (i) { x.rc(this, "hover") }); x.on(this._btnTop, "touchstart", function (i) { if (this.className.indexOf("disable") > -1) { return } x.ac(this, "onmousedown") }); x.on(this._btnTop, "touchend", function (i) { x.rc(this, "onmousedown") }); x.on(this._btnBottom, "touchstart", function (i) { if (this.className.indexOf("disable") > -1) { return } x.ac(this, "onmousedown") }); x.on(this._btnBottom, "touchend", function (i) { x.rc(this, "onmousedown") }); x.on(this._btnTop, "click", function (i) { e._setBarSliderTop(parseInt(e._ol.style.top, 10) + 26) }); x.on(this._btnBottom, "click", function (i) { e._setBarSliderTop(parseInt(e._ol.style.top, 10) - 26) }); x.on(this._div, "mousemove", g); x.on(this._div, "wheel", bY); x.on(this._div, "mousewheel", bY); this._map.addEventListener("resize", function () { e._adjustDisplayHeight() }) }; ew.prototype._adjustDisplayHeight = function () { if (!this._indoorInfo) { return } var fq = this._map.getSize().height; var fr = this._sizeConfig.FLOOR_BTN_HEIGHT; var fs = fq - 291 - 100; if (this._isMobile) { fs = fq - 12 - 108 - this._map.config.bottomOffset } var e = this._indoorInfo.floors.length; var fn = e * fr; var fo = e; var fu = 0; var fv = this._floorsContainer.children[0]; if (fn > fs) { this._showArrow = true; x.rc(fv.children[0].children[0], "top-border-radius"); x.rc(fv.children[e - 1].children[0], "bottom-border-radius") } else { this._showArrow = false; x.ac(fv.children[0].children[0], "top-border-radius"); x.ac(fv.children[e - 1].children[0], "bottom-border-radius") } while (fn > fs) { if (fo === 0) { break } fo--; fu = 2 * this._sizeConfig.SWITCH_ARROW_HEIGHT; fn = fo * fr + fu } this._currentDisplayHeight = fn; if (fo < 3) { this._setAdjustVisbile(false) } else { this._setAdjustVisbile(true) } this._floorsContainer.style.height = fo * fr + "px"; var fp = this._indoorInfo.currentFloor; var i = e - fp; var ft = fp - 1; this._div.style.height = parseInt(this._floorsContainer.style.height, 10) + fu + "px"; var fw = -(e - (fp + Math.round(fo / 2))) * fr; this._setBarSliderTop(fw); if (fo < e) { x.show(this._btnTop); x.show(this._btnBottom) } else { x.hide(this._btnTop); x.hide(this._btnBottom); this._setBarSliderTop(0) } if (this._isMobile) { this._div.style.bottom = 108 + this._map.config.bottomOffset + "px" } }; ew.prototype._setBarSliderTop = function (fo) { var fn = 26; var i = this._indoorInfo.floors.length; var e = i * fn; if (this._currentDisplayHeight) { if (this._showArrow) { e = this._currentDisplayHeight - 30 } else { e = this._currentDisplayHeight } } if (e - fo >= i * fn) { fo = e - i * fn; x.ac(this._btnBottom, "disable"); x.rc(this._btnBottom, "hover"); this._btnBottom._disable = true } else { x.rc(this._btnBottom, "disable"); this._btnBottom._disable = false } if (fo >= 0) { fo = 0; x.ac(this._btnTop, "disable"); x.rc(this._btnTop, "hover"); this._btnTop._disable = true } else { x.rc(this._btnTop, "disable"); this._btnTop._disable = false } this._ol.style.top = fo + "px" }; ew.prototype._setAdjustVisbile = function (e) { if (this._adjustVisible === e) { return } this._adjustVisible = e; if (e && this._visible) { this._div.style.right = "20px" } else { this._div.style.right = "-30px" } }; ew.prototype._bind = function () { var i = this._map; var e = this; i.on("indoor_status_changed", function (fs) { if (e._visible === false) { return } var fn = e._ol; var fq = fs.uid; if (!fq) { return } var fr = fs.floor; for (var fp = 0; fp < fn.children.length; fp++) { var fo = fn.children[fp].children[0]; if (parseInt(fo.getAttribute("data-floor"), 10) === fr) { x.ac(fo, "selected") } else { x.rc(fo, "selected") } } }); i.on("zoomend", function (fn) { if (this.getZoom() < 17) { e._setAdjustVisbile(false) } else { e._setAdjustVisbile(true) } }) }; ew.prototype.setInfo = function (e) { if (this._indoorInfo && this._indoorInfo.uid === e.uid) { return } this._indoorInfo = e; this._updateUI() }; ew.prototype.show = function () { if (this._visible === true) { return } this._visible = true; if (!this._isMobile) { this._div.style.right = "20px" } else { this._div.style.display = "" } var e = new aB("onindoor_bar_show"); e.uid = this._indoorInfo.uid; this._map.dispatchEvent(e) }; ew.prototype.hide = function () { if (this._visible === false) { return } this._visible = false; if (!this._isMobile) { this._div.style.right = "-30px" } else { this._div.style.display = "none" } }; function dg() { this._opts = {}; this.defaultOffset = new cH(0, 80); this._firstAnimation = true } dg.inherits(az, "NavigationControl3D"); x.extend(dg.prototype, { initialize: function (fn) { this._map = fn; this._createDom(); this._bindDom(); this._bind(); if (!d9()) { this._headingControl = new ff(this._map, this._div) } this._tiltControl = new cV(this._map, this._div); this._render(); var i = this._map.getMapType(); var e = this; if (i === "B_EARTH_MAP" || this._map._renderType === "webgl") { e._div.style.opacity = "1"; e._div.style.visibility = "visible" } else { e._div.style.opacity = "0"; e._div.style.visibility = "hidden" } }, _createDom: function () { var i = this._div = this._container = H("div"); var e = i.style; e.position = "absolute"; e.zIndex = 5; e.width = "52px"; e.height = "82px"; e.right = "-3px"; e.bottom = "79px"; e.opacity = "0"; e.visibility = "hidden"; e.WebkitTransition = e.transition = "opacity .3s ease-out,visibility .3s ease-out" }, _render: function () { var e = document.getElementById("map-operate"); if (e) { e.appendChild(this._div) } else { this._map.getContainer().appendChild(this._div) } }, _bindDom: function () { this._div.addEventListener("mousemove", g) }, _bind: function () { if (this._map._renderType === "webgl") { return } var e = this; this._map.on("maptypechange", function () { if (this.mapType === "B_EARTH_MAP") { if (e._firstAnimation) { e._firstAnimation = false; setTimeout(function () { e._div.style.opacity = "1"; e._div.style.visibility = "visible" }, 300) } else { e._div.style.opacity = "1"; e._div.style.visibility = "visible" } } else { e._div.style.opacity = "0"; e._div.style.visibility = "hidden" } }) } }); function ff(fn, i) { this._map = fn; this._target = fn; var fo = fn.temp.originMapType || fn.mapType; if (fo === "B_EARTH_MAP" && fn._earth) { this._target = fn._earth } this._outContainer = i || fn.getContainer(); this._imgRatio = ay() >= 1.5 ? 2 : 1; this._imgPath = dp.imgPath + "earth-navi-control-pc4" + (this._imgRatio === 2 ? "-2x.png" : ".png"); this._enabled = true; var e = this; this._setHeadingOptions = { callback: function () { e._target.setLock(false) } }; this._init() } x.extend(ff.prototype, { _init: function () { this._createDom(); this._render(); this._bindDom(); this._bind(); this._updateUI(); this._checkEnable() }, _checkEnable: function () { if (this._target.getZoom() >= this._target._enableHeadingZoom) { this.enable() } else { this.disable() } }, _createDom: function () { var i = this._div = H("div"); var e = i.style; e.position = "absolute"; e.zIndex = 5; e.top = "0"; e.left = "0"; e.width = "52px"; e.height = "54px"; e.background = "url(" + this._imgPath + ") no-repeat"; e.backgroundSize = "266px auto"; this._rotateCCW = this._createButton(); this._rotateCCW.title = "逆时针转动"; e = this._rotateCCW.style; e.left = "2px"; e.top = "5px"; e.zIndex = "1"; e.width = "15px"; e.height = "42px"; e.backgroundPosition = "-75px -5px"; this._rotateCW = this._createButton(); this._rotateCW.title = "顺时针转动"; e = this._rotateCW.style; e.right = "2px"; e.top = "5px"; e.zIndex = "1"; e.width = "15px"; e.height = "42px"; e.backgroundPosition = "-75px -5px"; e.WebkitTransform = e.transform = "scaleX(-1)"; this._compass = this._createButton(); this._compass.title = "恢复正北方向"; e = this._compass.style; e.left = "19px"; e.top = "4px"; e.width = "14px"; e.height = "44px"; e.backgroundPosition = "-56px -4px"; e.WebkitTransform = e.transform = "rotate(0deg)"; this._div.appendChild(this._rotateCCW); this._div.appendChild(this._compass); this._div.appendChild(this._rotateCW); this._domRendered = true }, _createButton: function () { var e = H("button"); var i = e.style; i.position = "absolute"; i.outline = "none"; i.border = "none"; i.background = "url(" + this._imgPath + ") no-repeat"; i.backgroundSize = "266px auto"; i.cursor = "pointer"; return e }, _render: function () { this._outContainer.appendChild(this._div) }, enable: function () { this._enabled = true; if (this._domRendered) { this._rotateCCW.style.cursor = "pointer"; this._rotateCCW.style.opacity = 1; this._rotateCW.style.cursor = "pointer"; this._rotateCW.style.opacity = 1; this._compass.style.cursor = "pointer"; this._compass.style.opacity = 1 } }, disable: function () { this._enabled = false; if (this._domRendered) { this._rotateCCW.style.cursor = ""; this._rotateCCW.style.opacity = 0.4; this._rotateCW.style.cursor = ""; this._rotateCW.style.opacity = 0.4; this._compass.style.cursor = ""; this._compass.style.opacity = 0.4 } }, _bindDom: function () { c6(this._div, ["mousedown", "click", "dblclick"]); var i = this._map; var e = this; this._rotateCW.addEventListener("click", function () { if (e._isOperating || e._enabled === false) { return } if (e._target.getLock()) { return } if (e._target.getHeading() === 360) { e._target.setHeading(0) } e._target.setLock(true); e._target.setHeading(e._target.getHeading() + 90, e._setHeadingOptions); i.fire(new aB("onrotatecwclick")) }, false); this._rotateCCW.addEventListener("click", function () { if (e._isOperating || e._enabled === false) { return } if (e._target.getLock()) { return } if (e._target.getHeading() === -360) { e._target.setHeading(0) } e._target.setLock(true); e._target.setHeading(e._target.getHeading() - 90, e._setHeadingOptions); i.fire(new aB("onrotateccwclick")) }, false); this._rotateCW.addEventListener("mouseover", function () { if (e._enabled === false) { return } this.style.backgroundPosition = "-89px -5px" }, false); this._rotateCW.addEventListener("mouseout", function () { if (e._enabled === false) { return } this.style.backgroundPosition = "-75px -5px" }, false); this._rotateCCW.addEventListener("mouseover", function () { if (e._enabled === false) { return } this.style.backgroundPosition = "-89px -5px" }, false); this._rotateCCW.addEventListener("mouseout", function () { if (e._enabled === false) { return } this.style.backgroundPosition = "-75px -5px" }, false); this._compass.addEventListener("click", function () { if (e._isOperating || e._enabled === false) { return } if (e._target.getLock()) { return } e._target.setLock(true); var fn = false; if (e._target.getTilt() !== 0) { fn = true; e._target.setTilt(0, e._setHeadingOptions) } if (e._target.getHeading() % 360 !== 0) { fn = true; e._target.resetHeading(e._setHeadingOptions) } if (!fn) { e._target.setLock(false) } i.fire(new aB("oncompassclick")) }, false) }, _bind: function () { var e = this; this._bindTarget(this._target); if (this._map._renderType === "webgl") { this._map.addEventListener("maptypechange", function (i) { if (this.mapType === "B_EARTH_MAP") { e._target = e._map._earth } else { e._target = e._map } e._bindTarget(e._target); e._checkEnable() }) } }, _bindTarget: function (i) { if (i === this._map && this._mapBinded) { return } if (i === this._map._earth && this._earthBinded) { return } var e = this; i.addEventListener("heading_changed", function (fn) { e._updateUI() }); i.addEventListener("animation_start", function (fn) { e._isOperating = true }); i.addEventListener("animation_end", function (fn) { e._isOperating = false }); i.on("load", function () { e._checkEnable() }); i.on("zoom_changed", function () { e._checkEnable() }); if (i === this._map) { this._mapBinded = true } else { this._earthBinded = true } }, _updateUI: function () { var e = this._target.getHeading(); var i = this._compass.style; i.WebkitTransform = i.transform = "rotate(" + e + "deg)" }, hide: function () { this._div.style.display = "none" }, show: function () { this._div.style.display = "block" } }); function cV(fn, i) { this._map = fn; this._target = fn; var fo = fn.temp.originMapType || fn.mapType; if (fo === "B_EARTH_MAP" && fn._earth) { this._target = fn._earth } this._outContainer = i || fn.getContainer(); this._imgRatio = ay() >= 1.5 ? 2 : 1; this._imgPath = dp.imgPath + "gl-navi-control-pc4" + (this._imgRatio === 2 ? "-2x.png" : ".png"); this._enabled = true; var e = this; this._setTiltOptions = { callback: function () { e._target.setLock(false) } }; this._init() } x.extend(cV.prototype, { _init: function () { this._createDom(); this._render(); this._bindDom(); this._bind(); this._checkEnable() }, _checkEnable: function () { if (this._target.getZoom() >= this._target._enableTiltZoom) { this.enable() } else { this.disable() } }, _createDom: function () { var e = this._div = H("button"); e.title = "倾斜"; var i = e.style; i.position = "absolute"; i.zIndex = 5; i.outline = "none"; i.border = "none"; i.cursor = "pointer"; i.width = "26px"; i.height = "26px"; i.top = "56px"; i.right = "13px"; i.background = "url(" + this._imgPath + ") no-repeat #fff"; i.backgroundSize = "266px auto"; i.backgroundPosition = "-110px 1px"; i.boxShadow = "1px 2px 1px rgba(0, 0, 0, 0.15)" }, enable: function () { this._enabled = true; if (this._div) { this._div.style.cursor = "pointer" } this._updateUI() }, disable: function () { this._enabled = false; if (this._div) { this._div.style.cursor = "" } this._updateUI() }, _render: function () { this._outContainer.appendChild(this._div) }, _bindDom: function () { var e = this; this._div.addEventListener("mousedown", function (fo) { if (!e._enabled) { return } if (e._target.getLock()) { return } var i = e._target.getTilt(); var fn; if (i === e._map.getCurrentMaxTilt()) { fn = "out" } else { if (i === 0) { fn = "in" } else { fn = e._preTrend ? e._preTrend : "in" } } e._curTrend = fn; e._clickTimer = setTimeout(function () { e._map.fire(new aB("ontiltmsdown")); e._tiltAni = new l({ duration: 9999999, render: function (fp) { i = e._target.getTilt(); if (fn === "in" && i < e._map.getCurrentMaxTilt()) { e._target.setTilt(i + 1, { noAnimation: true }) } else { if (fn === "out" && i > 0) { e._target.setTilt(i - 1, { noAnimation: true }) } } }, finish: function () { e._tiltAni = null } }); e._clickTimer = null }, 200); fo.stopPropagation() }, false); this._div.addEventListener("mouseup", function (i) { if (!e._enabled) { return } if (e._tiltAni) { e._tiltAni.stop() } e._preTrend = e._curTrend }, false); this._div.addEventListener("click", function (fo) { if (!e._enabled) { return } if (!e._clickTimer) { return } if (e._target.getLock()) { return } clearTimeout(e._clickTimer); e._map.fire(new aB("ontiltclick")); var i = e._target.getTilt(); e._target.setLock(true); fo.stopPropagation(); var fn = e._map.getCurrentMaxTilt(); if (e._curTrend === "in") { e._target.setTilt(fn, e._setTiltOptions) } else { if (e._curTrend === "out") { e._target.setTilt(0, e._setTiltOptions) } else { if (i < fn) { e._target.setTilt(fn, e._setTiltOptions) } else { e._target.setTilt(0, e._setTiltOptions) } } } }, false); this._div.addEventListener("mouseover", function (i) { if (!e._enabled) { return } e._mouseOver = true; e._updateUI() }, false); this._div.addEventListener("mouseout", function (i) { if (!e._enabled) { return } e._mouseOver = false; e._updateUI() }, false); c6(this._div, ["mousedown", "click", "dblclick"]) }, _bind: function () { var e = this; var i = this._map; this._bindTarget(this._target); if (this._map._renderType === "webgl") { this._map.addEventListener("maptypechange", function (fn) { if (this.mapType === "B_EARTH_MAP") { e._target = e._map._earth } else { e._target = e._map } e._bindTarget(e._target); e._checkEnable() }) } }, _bindTarget: function (i) { if (i === this._map && this._mapBinded) { return } if (i === this._map._earth && this._earthBinded) { return } var e = this; i.on("load", function () { e._checkEnable() }); i.on("zoom_changed", function () { e._checkEnable() }); i.on("tilt_changed", function () { e._updateUI() }); if (i === this._map) { this._mapBinded = true } else { this._earthBinded = true } }, _updateUI: function () { var fn = this._target.getTilt(); var i = 0; var fo = 0; var e = 0; if (fn > 0) { i = 78 } if (this._mouseOver) { e = 52 } if (this._enabled === false) { fo = 26; e = 0; i = 0 } var fp = "-" + (110 + i + fo + e) + "px 1px"; this._div && (this._div.style.backgroundPosition = fp); if (this._enabled) { if (fn > 0) { this._div && (this._div.title = "恢复") } else { this._div && (this._div.title = "倾斜") } } else { this._div && (this._div.title = "请放大地图后操作") } }, hide: function () { this._div.style.display = "none" }, show: function () { this._div.style.display = "block" } }); function bl(i) { cK.call(this); this._opts = { container: null, cursor: "default" }; this._opts = x.extend(this._opts, i); this._type = "contextmenu"; this._map = null; this._container; this._left = 0; this._top = 0; this._items = []; this._rItems = []; this._dividers = []; this._enable = true; this.curPixel = null; this.curPoint = null; this._isOpen = false; var e = this; cI.load("menu", function () { e._draw() }) } bl.inherits(cK, "ContextMenu"); x.extend(bl.prototype, { initialize: function (e) { this._map = e }, remove: function () { this._map = null }, addItem: function (fp, e) { if (!fp || fp._type != "menuitem" || fp._text == "" || fp._width <= 0) { return } for (var fo = 0, fn = this._items.length; fo < fn; fo++) { if (this._items[fo] === fp) { return } } if (e === undefined || e > this._items.length - 1) { e = -1 } fp._insertIndex = e; if (e === -1) { this._items.push(fp); this._rItems.push(fp) } else { this._items.splice(e, 0, fp); this._rItems.splice(e, 0, fp) } }, removeItem: function (fo) { if (!fo || fo._type != "menuitem") { return } for (var fn = 0, e = this._items.length; fn < e; fn++) { if (this._items[fn] === fo) { this._items[fn].remove(); this._items.splice(fn, 1); delete fo._insertIndex; e-- } } for (var fn = 0, e = this._rItems.length; fn < e; fn++) { if (this._rItems[fn] === fo) { this._rItems[fn].remove(); this._rItems.splice(fn, 1); delete fo._insertIndex; e-- } } }, addSeparator: function (e) { if (e === undefined || e > this._items.length - 1) { e = -1 } var i = { _type: "divider", _dIndex: this._dividers.length, _insertIndex: e }; this._dividers.push({ dom: null }); if (e === -1) { this._items.push(i) } else { this._items.splice(e, 0, i) } }, removeSeparator: function (fn) { if (!this._dividers[fn]) { return } for (var fo = 0, e = this._items.length; fo < e; fo++) { if (this._items[fo] && this._items[fo]._type == "divider" && this._items[fo]._dIndex == fn) { this._items.splice(fo, 1); e-- } if (this._items[fo] && this._items[fo]._type == "divider" && this._items[fo]._dIndex > fn) { this._items[fo]._dIndex-- } } this._dividers.splice(fn, 1) }, getDom: function () { return this._container }, show: function () { if (this._isOpen == true) { return } this._isOpen = true }, hide: function () { if (this._isOpen == false) { return } this._isOpen = false }, setCursor: function (e) { if (!e) { return } this._opts.cursor = e }, getItem: function (e) { return this._rItems[e] }, enable: function () { this._enable = true }, disable: function () { this._enable = false } }); function dJ(fn, fo, i) { if (!fn || !fo || typeof fo != "function") { return } cK.call(this); this._opts = { width: 100, id: "" }; i = i || {}; this._opts.width = (i.width * 1) ? i.width : 100; this._opts.id = i.id ? i.id : ""; this._text = fn + ""; this._callback = fo; this._map = null; this._type = "menuitem"; this._contextmenu = null; this._container = null; this._enabled = true; var e = this; cI.load("menu", function () { e._draw() }) } dJ.inherits(cK, "MenuItem"); x.extend(dJ.prototype, { initialize: function (e, i) { this._map = e; this._contextmenu = i }, remove: function () { this._contextmenu = null; this._map = null }, setText: function (e) { if (!e) { return } this._text = e + "" }, getDom: function () { return this._container }, enable: function () { this._enabled = true }, disable: function () { this._enabled = false } }); function cw(e, i) { this.setSouthWest(e); this.setNorthEast(i) } x.extend(cw.prototype, { isEmpty: function () { return this.sw === null && this.ne === null }, equals: function (e) { if (!e || e.isEmpty() || this.isEmpty()) { return false } return this.sw.equals(e.sw) && this.ne.equals(e.ne) }, containsBounds: function (e) { if (!e || e.isEmpty() || this.isEmpty()) { return false } return (e.sw.lng > this.sw.lng && e.ne.lng < this.ne.lng && e.sw.lat > this.sw.lat && e.ne.lat < this.ne.lat) }, getCenter: function () { if (this.isEmpty()) { return null } return new e5((this.sw.lng + this.ne.lng) / 2, (this.sw.lat + this.ne.lat) / 2) }, intersects: function (fn) { if (!fn || fn.isEmpty() || this.isEmpty()) { return null } if (Math.max(fn.sw.lng, fn.ne.lng) < Math.min(this.sw.lng, this.ne.lng) || Math.min(fn.sw.lng, fn.ne.lng) > Math.max(this.sw.lng, this.ne.lng) || Math.max(fn.sw.lat, fn.ne.lat) < Math.min(this.sw.lat, this.ne.lat) || Math.min(fn.sw.lat, fn.ne.lat) > Math.max(this.sw.lat, this.ne.lat)) { return null } var fp = Math.max(this.sw.lng, fn.sw.lng); var i = Math.min(this.ne.lng, fn.ne.lng); var fo = Math.max(this.sw.lat, fn.sw.lat); var e = Math.min(this.ne.lat, fn.ne.lat); return new cw(new e5(fp, fo), new e5(i, e)) }, setMinMax: function () { this.minX = this.sw ? this.sw.lng : null; this.minY = this.sw ? this.sw.lat : null; this.maxX = this.ne ? this.ne.lng : null; this.maxY = this.ne ? this.ne.lat : null }, containsPoint: function (e) { if (!e) { return } return (e.lng >= this.sw.lng && e.lng <= this.ne.lng && e.lat >= this.sw.lat && e.lat <= this.ne.lat) }, extend: function (e) { if (!e) { return } var i = e.lng; var fn = e.lat; if (!this.sw) { this.sw = e.clone() } if (!this.ne) { this.ne = e.clone() } if (this.sw.lng > i) { this.sw.lng = i } if (this.ne.lng < i) { this.ne.lng = i } if (this.sw.lat > fn) { this.sw.lat = fn } if (this.ne.lat < fn) { this.ne.lat = fn } }, getMin: function () { return this.sw }, getMax: function () { return this.ne }, getSouthWest: function () { return this.sw }, getNorthEast: function () { return this.ne }, setSouthWest: function (e) { this.sw = e ? e.clone() : null }, setNorthEast: function (e) { this.ne = e ? e.clone() : null }, clone: function () { return new cw(this.sw, this.ne) }, toSpan: function () { if (this.isEmpty()) { return new cH(0, 0) } return new cH(Math.abs(this.ne.lng - this.sw.lng), Math.abs(this.ne.lat - this.sw.lat)) }, div: function (e) { if (!e || e.isEmpty() || this.isEmpty()) { return 0 } return ((this.ne.lng - this.sw.lng) * (this.ne.lat - this.sw.lat)) / ((e.ne.lng - e.sw.lng) * (e.ne.lat - e.sw.lat)) }, makeNormalizedPoint: function (e) { this.normalizedTopLeft = this.pointTopLeft.clone(); this.normalizedTopRight = this.pointTopRight.clone(); this.normalizedBottomRight = this.pointBottomRight.clone(); this.normalizedBottomLeft = this.pointBottomLeft.clone(); while (e < 0) { e += 360 } e = e % 360; if (e >= 0 && e < 90 || e >= 270 && e < 360) { if (this.normalizedTopRight.lng < this.normalizedTopLeft.lng) { this.normalizedTopRight.lng += bV.WORLD_SIZE_MC } if (this.normalizedBottomRight.lng < this.normalizedBottomLeft.lng) { this.normalizedBottomRight.lng += bV.WORLD_SIZE_MC } } else { if (this.normalizedTopLeft.lng < this.normalizedTopRight.lng) { this.normalizedTopLeft.lng += bV.WORLD_SIZE_MC } if (this.normalizedBottomLeft.lng < this.normalizedBottomRight.lng) { this.normalizedBottomLeft.lng += bV.WORLD_SIZE_MC } } }, toString: function () { return "Bounds" } }); function e5(e, i) { if (isNaN(e)) { e = eO(e); e = isNaN(e) ? 0 : e } if (typeof e === "string") { e = parseFloat(e) } if (isNaN(i)) { i = eO(i); i = isNaN(i) ? 0 : i } if (typeof i === "string") { i = parseFloat(i) } this.lng = e; this.lat = i } e5.prototype.equals = function (i) { if (!i) { return false } var fo = Math.abs(this.lat - i.lat); var fn = Math.abs(this.lng - i.lng); var e = 1e-8; if (fo < e && fn < e) { return true } return false }; e5.prototype.clone = function () { return new e5(this.lng, this.lat) }; e5.prototype.add = function (e) { return new e5(this.lng + e.lng, this.lat + e.lat) }; e5.prototype.sub = function (e) { return new e5(this.lng - e.lng, this.lat - e.lat) }; e5.prototype.mult = function (e) { return new e5(this.lng * e, this.lat * e) }; e5.prototype.div = function (e) { return new e5(this.lng / e, this.lat / e) }; e5.prototype.mag = function () { return Math.sqrt(this.lng * this.lng + this.lat * this.lat) }; e5.prototype.toString = function () { return "Point" }; function cR() { } x.extend(cR, { EARTHRADIUS: 6370996.81, MCBAND: [12890594.86, 8362377.87, 5591021, 3481989.83, 1678043.12, 0], LLBAND: [86, 60, 45, 30, 15, 0], MC2LL: [[1.410526172116255e-8, 0.00000898305509648872, -1.9939833816331, 200.9824383106796, -187.2403703815547, 91.6087516669843, -23.38765649603339, 2.57121317296198, -0.03801003308653, 17337981.2], [-7.435856389565537e-9, 0.000008983055097726239, -0.78625201886289, 96.32687599759846, -1.85204757529826, -59.36935905485877, 47.40033549296737, -16.50741931063887, 2.28786674699375, 10260144.86], [-3.030883460898826e-8, 0.00000898305509983578, 0.30071316287616, 59.74293618442277, 7.357984074871, -25.38371002664745, 13.45380521110908, -3.29883767235584, 0.32710905363475, 6856817.37], [-1.981981304930552e-8, 0.000008983055099779535, 0.03278182852591, 40.31678527705744, 0.65659298677277, -4.44255534477492, 0.85341911805263, 0.12923347998204, -0.04625736007561, 4482777.06], [3.09191371068437e-9, 0.000008983055096812155, 0.00006995724062, 23.10934304144901, -0.00023663490511, -0.6321817810242, -0.00663494467273, 0.03430082397953, -0.00466043876332, 2555164.4], [2.890871144776878e-9, 0.000008983055095805407, -3.068298e-8, 7.47137025468032, -0.00000353937994, -0.02145144861037, -0.00001234426596, 0.00010322952773, -0.00000323890364, 826088.5]], LL2MC: [[-0.0015702102444, 111320.7020616939, 1704480524535203, -10338987376042340, 26112667856603880, -35149669176653700, 26595700718403920, -10725012454188240, 1800819912950474, 82.5], [0.0008277824516172526, 111320.7020463578, 647795574.6671607, -4082003173.641316, 10774905663.51142, -15171875531.51559, 12053065338.62167, -5124939663.577472, 913311935.9512032, 67.5], [0.00337398766765, 111320.7020202162, 4481351.045890365, -23393751.19931662, 79682215.47186455, -115964993.2797253, 97236711.15602145, -43661946.33752821, 8477230.501135234, 52.5], [0.00220636496208, 111320.7020209128, 51751.86112841131, 3796837.749470245, 992013.7397791013, -1221952.21711287, 1340652.697009075, -620943.6990984312, 144416.9293806241, 37.5], [-0.0003441963504368392, 111320.7020576856, 278.2353980772752, 2485758.690035394, 6070.750963243378, 54821.18345352118, 9540.606633304236, -2710.55326746645, 1405.483844121726, 22.5], [-0.0003218135878613132, 111320.7020701615, 0.00369383431289, 823725.6402795718, 0.46104986909093, 2351.343141331292, 1.58060784298199, 8.77738589078284, 0.37238884252424, 7.45]], getDistanceByMC: function (fq, fo) { if (!fq || !fo) { return 0 } var i; var fp; var e; var fn; fq = this.convertMC2LL(fq); if (!fq) { return 0 } i = cr(fq.lng); fp = cr(fq.lat); fo = this.convertMC2LL(fo); if (!fo) { return 0 } e = cr(fo.lng); fn = cr(fo.lat); return this.getDistance(i, e, fp, fn) }, getDistanceByLL: function (fq, fo) { if (!fq || !fo) { return 0 } fq.lng = this.getLoop(fq.lng, -180, 180); fq.lat = this.getRange(fq.lat, -80, 84); fo.lng = this.getLoop(fo.lng, -180, 180); fo.lat = this.getRange(fo.lat, -80, 84); var i; var e; var fp; var fn; i = cr(fq.lng); fp = cr(fq.lat); e = cr(fo.lng); fn = cr(fo.lat); return this.getDistance(i, e, fp, fn) }, convertMC2LL: function (e) { if (e === null) { return e } if (!e) { return new e5(0, 0) } var fn; var fp; fn = new e5(Math.abs(e.lng), Math.abs(e.lat)); for (var fo = 0; fo < this.MCBAND.length; fo++) { if (fn.lat >= this.MCBAND[fo]) { fp = this.MC2LL[fo]; break } } var fq = this.convertor(e, fp); return new bS(fq.lat, fq.lng) }, convertLL2MC: function (fr) { if (!fr) { return new e5(0, 0) } var ft = fr.lat; var fo = fr.lng; fo = this.getLoop(fr.lng, -180, 180); ft = dO(ft, -85, 85); var fq; for (var fp = 0; fp < this.LLBAND.length; fp++) { if (ft >= this.LLBAND[fp]) { fq = this.LL2MC[fp]; break } } if (!fq) { for (fp = 0; fp < this.LLBAND.length; fp++) { if (ft <= -this.LLBAND[fp]) { fq = this.LL2MC[fp]; break } } } var fn = new e5(fo, ft); var fs = this.convertor(fn, fq); var e = new e5(fs.lng, fs.lat); e.latLng = fr.clone(); return e }, convertor: function (fn, fo) { if (!fn || !fo) { return } var e = fo[0] + fo[1] * Math.abs(fn.lng); var i = Math.abs(fn.lat) / fo[9]; var fp = fo[2] + fo[3] * i + fo[4] * i * i + fo[5] * i * i * i + fo[6] * i * i * i * i + fo[7] * i * i * i * i * i + fo[8] * i * i * i * i * i * i; e *= (fn.lng < 0 ? -1 : 1); fp *= (fn.lat < 0 ? -1 : 1); return new e5(e, fp) }, getDistance: function (i, e, fo, fn) { return this.EARTHRADIUS * Math.acos((Math.sin(fo) * Math.sin(fn) + Math.cos(fo) * Math.cos(fn) * Math.cos(e - i))) }, getRange: function (fn, i, e) { if (i != null) { fn = Math.max(fn, i) } if (e != null) { fn = Math.min(fn, e) } return fn }, getLoop: function (fn, i, e) { while (fn > e) { fn -= e - i } while (fn < i) { fn += e - i } return fn } }); function bS(i, e) { if (i < -90) { i = -90 } else { if (i > 90) { i = 90 } } while (e < -180) { e += 360 } while (e > 180) { e -= 360 } this.lat = i || 0; this.lng = e || 0 } x.extend(bS.prototype, { equals: function (e) { return (this.lat === e.lat && this.lng === e.lng) }, clone: function () { return new bS(this.lat, this.lng) }, getLngSpan: function (e) { var i = this.lng; var fn = Math.abs(e - i); if (fn > 180) { fn = 360 - fn } return fn }, sub: function (e) { return new bS(this.lat - e.lat, this.lng - e.lng) }, toString: function () { return this.lat + ", " + this.lng } }); function c4(e, i) { if (e && !i) { i = e } this._sw = this._ne = null; this._swLng = this._swLat = null; this._neLng = this._neLat = null; if (e) { this._sw = new bS(e.lat, e.lng); this._ne = new bS(i.lat, i.lng); this._swLng = e.lng; this._swLat = e.lat; this._neLng = i.lng; this._neLat = i.lat } } x.extend(c4.prototype, { isEmpty: function () { return !this._sw || !this._ne }, equals: function (e) { if (this.isEmpty()) { return false } return this.getSouthWest().equals(e.getSouthWest()) && this.getNorthEast().equals(e.getNorthEast()) }, getSouthWest: function () { return this._sw }, getNorthEast: function () { return this._ne }, containsBounds: function (e) { if (this.isEmpty() || e.isEmpty()) { return false } return (e._swLng > this._swLng && e._neLng < this._neLng && e._swLat > this._swLat && e._neLat < this._neLat) }, getCenter: function () { if (this.isEmpty()) { return null } return new bS((this._swLat + this._neLat) / 2, (this._swLng + this._neLng) / 2) }, intersects: function (fn) { if (Math.max(fn._swLng, fn._neLng) < Math.min(this._swLng, this._neLng) || Math.min(fn._swLng, fn._neLng) > Math.max(this._swLng, this._neLng) || Math.max(fn._swLat, fn._neLat) < Math.min(this._swLat, this._neLat) || Math.min(fn._swLat, fn._neLat) > Math.max(this._swLat, this._neLat)) { return false } var fp = Math.max(this._swLng, fn._swLng); var i = Math.min(this._neLng, fn._neLng); var fo = Math.max(this._swLat, fn._swLat); var e = Math.min(this._neLat, fn._neLat); this._sw = new bS(fo, fp); this._ne = new bS(e, i); this._swLng = fp; this._swLat = fo; this._neLng = i; this._neLat = e; return true }, containsPoint: function (e) { if (this.isEmpty()) { return false } return (e.lng >= this._swLng && e.lng <= this._neLng && e.lat >= this._swLat && e.lat <= this._neLat) }, extend: function (e) { var i = e.lng; var fn = e.lat; if (!this._sw) { this._sw = new bS(0, 0) } if (!this._ne) { this._ne = new bS(0, 0) } if (!this._swLng || this._swLng > i) { this._sw.lng = this._swLng = i } if (!this._neLng || this._neLng < i) { this._ne.lng = this._neLng = i } if (!this._swLat || this._swLat > fn) { this._sw.lat = this._swLat = fn } if (!this._neLat || this._neLat < fn) { this._ne.lat = this._neLat = fn } }, toSpan: function () { if (this.isEmpty()) { return new bS(0, 0) } return new bS(Math.abs(this._neLat - this._swLat), Math.abs(this._neLng - this._swLng)) }, union: function (i) { if (i.isEmpty()) { return false } var e = i.getSouthWest(); var fn = i.getNorthEast(); if (this._swLat > e.lat) { this._swLat = e.lat } if (this._swLng > e.lng) { this._swLng = e.lng } if (this._neLat < fn.lat) { this._neLat = fn.lat } if (this._neLng < fn.lng) { this._neLng = fn.lng } this._sw = new bS(this._swLat, this._swLng); this._ne = new bS(this._neLat, this._neLng); return true }, toString: function () { return this._swLat + ", " + this._swLng + ", " + this._neLat + ", " + this._neLng } }); var cy = { idle: 0, freeze: 1, zooming: 2, dragging: 3, moving: 4, readyToDrag: 5, readyToPinch: 6, pinching: 7, stdMapCtrlDrag: 8, KEY_LEFT: 37, KEY_UP: 38, KEY_RIGHT: 39, KEY_DOWN: 40, arrowOpCodes: { 37: 1, 38: 2, 39: 4, 40: 8 } }; var cO = { _map: null, _html: "<div class='BMap_opMask' unselectable='on'></div>", _maskElement: null, _cursor: "default", inUse: false, show: function (e) { if (!this._map) { this._map = e } this.inUse = true; if (!this._maskElement) { this._createMask(e) } this._maskElement.style.display = "block" }, _createMask: function (i) { if (!this._map) { this._map = i } if (!this._map) { return } var e = this._maskElement = cq(this._map.container, this._html); x.on(e, "mouseup", function (fn) { if (fn.button == 2) { bY(fn) } }); x.on(e, "contextmenu", bY); e.style.display = "none" }, getDrawPoint: function (fo, fr, fp) { fo = window.event || fo; var i = fo.offsetX || fo.layerX || 0; var fq = parseInt(fo.offsetY) || parseInt(fo.layerY) || 0; var fn = fo.target || fo.srcElement; if (fn != cO.getDom(this._map) && fr == true) { while (fn && fn != this._map.container) { if (!(fn.clientWidth == 0 && fn.clientHeight == 0 && fn.offsetParent && fn.offsetParent.nodeName.toLowerCase() == "td")) { i += fn.offsetLeft; fq += fn.offsetTop } fn = fn.offsetParent } } if (fn != cO.getDom(this._map) && fn != this._map.container) { return } if (typeof i === "undefined" || typeof fq === "undefined") { return } if (isNaN(i) || isNaN(fq)) { return } if (fp) { i = i + fp.x; fq = fq + fp.y } return this._map.pixelToPointIn(new cP(i, fq)) }, hide: function () { if (!this._map) { return } this.inUse = false; if (this._maskElement) { this._maskElement.style.display = "none" } }, getDom: function (e) { if (!this._maskElement) { this._createMask(e) } return this._maskElement }, setCursor: function (e) { this._cursor = e || "default"; if (this._maskElement) { this._maskElement.style.cursor = this._cursor } } }; function aH() { this._type = "overlay" } aH.inherits(x.BaseClass, "Overlay"); aH.getZIndex = function (i, e) { i = i * 1; if (!i) { return 0 } if (e) { i = cR.convertMC2LL(new e5(0, i)).lat } return (i * -100000) << 1 }; x.extend(aH.prototype, { _i: function (e) { this._map = e; if (!this.domElement && a7(this.initialize)) { this.domElement = this.initialize(e); if (this.domElement) { this.domElement.style.WebkitUserSelect = "none" } } this.draw() }, initialize: function (e) { throw "initialize方法未实现" }, draw: function () { throw "draw方法未实现" }, remove: function () { this._map = null; if (this.domElement && this.domElement.parentNode) { this.domElement.parentNode.removeChild(this.domElement) } this.domElement = null; this.dispatchEvent(new aB("onremove")) }, hide: function () { this._visible = false; x.hide(this.domElement) }, show: function () { this._visible = true; x.show(this.domElement) }, getMap: function () { return this._map }, dispose: function () { x.BaseClass.prototype.decontrol.call(this) } }); function bK() { x.BaseClass.call(this); aH.call(this); this._visible = true; this._visibleInternal = true; this.infoWindow = null; this._dblclickTime = 0 } bK.inherits(aH, "OverlayInternal"); x.extend(bK.prototype, { initialize: function (e) { this.map = e; x.BaseClass.call(this, this.hashCode); return null }, draw: function () { }, remove: function () { this.map = null; this.decontrol(); aH.prototype.remove.call(this) }, hide: function () { this._visible = false }, show: function () { this._visible = true }, getDom: function () { return this.domElement }, getContainer: function () { return this.domElement }, setClassName: function () { }, setConfig: function (i) { if (!i) { return } for (var e in i) { if (i.hasOwnProperty(e)) { this._config[e] = i[e] } } }, getPoint: function (fn, fo) { if (!fn) { return this.point } else { var e = fo ? fo.width : 0; var fp = fo ? fo.height : 0; if (this.map) { var i = this.map.pointToPixelIn(this.point); if (this._config && this._config.offset) { i.x = i.x + this._config.offset.width + e; i.y = i.y + this._config.offset.height + fp } else { i.x = i.x + e; i.y = i.y + fp } return this.map.pixelToPointIn(i) } } }, setZIndex: function (e) { this.zIndex = e }, isVisible: function () { if (!this.domElement) { return false } return !!this._visible }, enableMassClear: function () { this._config.enableMassClear = true }, disableMassClear: function () { this._config.enableMassClear = false }, showInternal: function () { this._visibleInternal = true }, hideInternal: function (e) { this._visibleInternal = false; this._hideInternalReason = e } }); function di(e) { this.map = e; this._overlays = {}; this._overlayArray = []; this._customOverlays = []; e._overlays = this._overlays; e._overlayArray = this._overlayArray; e._customOverlays = this._customOverlays; this._zoomingOrMoving = false; this._init() } di.prototype._init = function () { if (this.map._renderType !== "webgl") { this._createOverlayContainers() } else { this._createWebGLOverlayContainers() } this._bind() }; di.prototype._createOverlayContainers = function () { var e = this.map; e.temp.overlayDiv = e.overlayDiv = this._createOverlayDiv(e.platform, 200); e.temp.overlayDivEx = e.overlayDivEx = this._createOverlayDiv(e.platform, 50); e._panes.floatPane = this._createOverlayDiv(e.temp.overlayDiv, 800); e._panes.markerMouseTarget = this._createOverlayDiv(e.temp.overlayDiv, 700); e._panes.floatShadow = this._createOverlayDiv(e.temp.overlayDiv, 600); e._panes.labelPane = this._createOverlayDiv(e.temp.overlayDiv, 500); e._panes.markerPane = this._createOverlayDiv(e.temp.overlayDiv, 400); if (e.isCanvasMap()) { e._panes.mapPane = this._createOverlayDiv(e.temp.overlayDivEx, 50) } else { e._panes.mapPane = this._createOverlayDiv(e.temp.overlayDiv, 200) } }; di.prototype._createWebGLOverlayContainers = function () { var e = this.map; e.temp.overlayDiv = e.overlayDiv = this._createOverlayDiv(e.platform, 200); e._panes.floatPane = this._createOverlayDiv(e.temp.overlayDiv, 800); e._panes.markerMouseTarget = this._createOverlayDiv(e.temp.overlayDiv, 700); e._panes.floatShadow = this._createOverlayDiv(e.temp.overlayDiv, 600); e._panes.labelPane = this._createOverlayDiv(e.temp.overlayDiv, 500); e._panes.markerPane = this._createOverlayDiv(e.temp.overlayDiv, 400) }; di.prototype._createOverlayDiv = function (e, fo) { var fn = H("div"); var i = fn.style; i.position = "absolute"; i.top = i.left = i.width = i.height = "0"; i.zIndex = fo; e.appendChild(fn); return fn }; di.prototype._bind = function () { var fp = this.map; var fo = this; function i(fr) { fo.draw(fr) } if (fp._renderType !== "webgl") { fp.addEventListener("load", i); fp.addEventListener("moveend", i); fp.addEventListener("resize", i); fp.addEventListener("zoomend", i); fp.addEventListener("zooming_inner", i) } else { fp.on("update", i) } fp.addEventListener("zoomend", function (fr) { if (this.mapType === "B_EARTH_MAP") { if (this._earth.getZoom() < this._earth.zoomForNight + 1) { this.temp.overlayDiv.style.display = "none"; if (this.temp.overlayDivEx) { this.temp.overlayDivEx.style.display = "none" } } else { if (this.temp.overlayDiv.style.display === "none") { this.temp.overlayDiv.style.display = ""; if (this.temp.overlayDivEx) { this.temp.overlayDivEx.style.display = "" } if (this.temp.infoWin && this.temp.infoWin.isOpen()) { this.temp.infoWin.redraw() } } } } }); fp.addEventListener("oncenterandzoom", function (fr) { fo.draw(fr); if (this.mapType === "B_EARTH_MAP") { if (this._earth.getZoom() < this._earth.zoomForNight + 1) { this.temp.overlayDiv.style.display = "none"; if (this.temp.overlayDivEx) { this.temp.overlayDivEx.style.display = "none" } } else { if (this.temp.overlayDiv.style.display === "none") { this.temp.overlayDiv.style.display = ""; if (this.temp.overlayDivEx) { this.temp.overlayDivEx.style.display = "" } if (this.temp.infoWin && this.temp.infoWin.isOpen()) { this.temp.infoWin.redraw() } } } } }); fp.addEventListener("maptypechange", function (fr) { if (this.mapType === "B_EARTH_MAP") { if (this._panes.mapPane) { this._panes.mapPane.style.display = "none" } if (this._earth.getZoom() < this._earth.zoomForNight + 1) { this.temp.overlayDiv.style.display = "none"; if (this.temp.overlayDivEx) { this.temp.overlayDivEx.style.display = "none" } } else { if (this.temp.overlayDiv.style.display === "none") { this.temp.overlayDiv.style.display = ""; if (this.temp.overlayDivEx) { this.temp.overlayDivEx.style.display = "" } if (this.temp.infoWin && this.temp.infoWin.isOpen()) { this.temp.infoWin.redraw() } } } if (this._panes.markerPane) { this._panes.markerPane.style.display = "none" } } else { if (this._panes.mapPane) { this._panes.mapPane.style.display = "" } if (this._panes.markerPane) { this._panes.markerPane.style.display = "" } if (this.temp.overlayDiv.style.display === "none") { this.temp.overlayDiv.style.display = ""; if (this.temp.overlayDivEx) { this.temp.overlayDivEx.style.display = "" } if (this.temp.infoWin && this.temp.infoWin.isOpen()) { this.temp.infoWin.redraw() } } } fo.draw(fr) }); fp.on("earthstatuschange", function fq(fr) { fo.draw(fr) }); fp.addEventListener("addoverlay", function (fv) { var fs = fv.target; if (fs instanceof bK) { if (!fo._overlays[fs.hashCode]) { fo._overlays[fs.hashCode] = fs; fo._overlayArray.push(fs) } } else { var fu = false; for (var ft = 0, fr = fo._customOverlays.length; ft < fr; ft++) { if (fo._customOverlays[ft] === fs) { fu = true; break } } if (!fu) { fo._customOverlays.push(fs) } } }); fp.addEventListener("removeoverlay", function (fu) { var fs = fu.target; if (fs instanceof bK) { delete fo._overlays[fs.hashCode]; for (var ft = 0; ft < fo._overlayArray.length; ft++) { if (fo._overlayArray[ft] === fs) { fo._overlayArray.splice(ft, 1); break } } } else { for (var ft = 0, fr = fo._customOverlays.length; ft < fr; ft++) { if (fo._customOverlays[ft] === fs) { fo._customOverlays.splice(ft, 1); break } } } }); fp.addEventListener("clearoverlays", function (ft) { this.closeInfoWindow(); this.closeSimpleInfoWindow(); for (var fs in fo._overlays) { if (fo._overlays[fs]._config.enableMassClear) { this.removeOverlay(fo._overlays[fs]) } } for (var fr = fo._customOverlays.length - 1; fr > 0; fr--) { if (fo._customOverlays[fr].enableMassClear !== false) { this.removeOverlay(fo._customOverlays[fr]); fo._customOverlays.splice(fr, 1) } } }); fp.addEventListener("infowindowopen", function (fs) { var fr = this.infoWindow; if (fr) { x.hide(fr.popDom); x.hide(fr.shadowDom) } }); function fn() { if (this.getMapType() === "B_EARTH_MAP" || this._renderType === "webgl") { if (fo._zoomingOrMoving === false) { this._panes.markerMouseTarget.style.display = "none"; fo._zoomingOrMoving = true } } } function e(ft) { if (this.getMapType() === "B_EARTH_MAP" || this._renderType === "webgl") { if (fo._zoomingOrMoving === true) { this._panes.markerMouseTarget.style.display = ""; fo._zoomingOrMoving = false; for (var fs = 0; fs < fo._overlayArray.length; fs++) { var fr = fo._overlayArray[fs]; if (fr instanceof b9 === true) { fr.draw(ft) } } } } } fp.addEventListener("movestart", fn); fp.addEventListener("moveend", e); fp.addEventListener("zoomstart", fn); fp.addEventListener("zoomend", e); fp.addEventListener("animation_start", fn); fp.addEventListener("animation_end", e); fp.addEventListener("displayoptions_changed", function (fr) { if (this._displayOptions.overlay === false) { this.temp.overlayDiv.style.display = "none" } else { this.temp.overlayDiv.style.display = "" } }) }; di.prototype.draw = function (fr) { fr = fr || {}; if (this.map.getMapType() === "B_EARTH_MAP") { for (var fp = 0; fp < this._overlayArray.length; fp++) { var fn = this._overlayArray[fp]; if (fn instanceof s === true) { continue } if (this._zoomingOrMoving) { if (fn instanceof b9 === true) { continue } } fn.draw(fr) } } else { for (var fp = 0, fo = this._overlayArray.length; fp < fo; fp++) { var fn = this._overlayArray[fp]; if (this._zoomingOrMoving && fn instanceof b9 === true) { continue } fn.draw(fr) } } x.each(this._customOverlays, function (e) { e.draw(fr) }); if (this.map.temp.infoWin) { this.map.temp.infoWin.setPosition(fr.center, fr.zoom) } if (this.map.getMapType() !== "B_EARTH_MAP" && this.map._renderType !== "webgl") { if (aI.DrawerSelector) { var fq = aI.DrawerSelector.getDrawer(this.map); fq.setPalette() } } }; aI.register(function (e) { e._overlayMgr = new di(e) }); function s(e) { bK.call(this); this._config = { strokeColor: "#000", strokeWeight: 2, strokeOpacity: 1, strokeStyle: "solid", strokeLineCap: "round", strokeLineJoin: "round", enableMassClear: true, getParseTolerance: null, getParseCacheIndex: null, enableParse: true, enableEditing: false, mouseOverTolerance: 15, geodesic: false, clip: true }; this.setConfig(e); if (this._config.strokeOpacity < 0 || this._config.strokeOpacity > 1) { this._config.strokeOpacity = 0.65 } if (this._config.fillOpacity < 0 || this._config.fillOpacity > 1) { this._config.fillOpacity = 0.65 } if (this._config.strokeStyle !== "solid" && this._config.strokeStyle !== "dashed" && this._config.strokeStyle !== "dotted") { this._config.strokeStyle = "solid" } this.domElement = null; this._bounds = new cw(); this.points = []; this.greatCirclePoints = []; this._parseCache = []; this._holesCache = []; this._parseCacheGL = []; this._parseCacheGLRaw = []; this._areaCacheGL = []; this._strokeStyleInfoForGL = [[]]; this._fillStyleInfoForGL = ""; this.vertexMarkers = []; this._temp = {} } s.JOININDEX = { miter: 0, round: 1, bevel: 2 }; s.CAPINDEX = { round: 0, butt: 1, square: 2 }; s.inherits(bK, "Graph"); s.getGraphPoints = function (i) { var e = []; if (!i || i.length === 0) { return e } if (typeof i === "string") { var fn = i.split(";"); x.each(fn, function (fp) { var fo = fp.split(","); e.push(new e5(fo[0], fo[1])) }) } if (i.constructor === Array && i.length > 0) { e = i } return e }; s.parseTolerance = { 0: [0.09, 0.005, 0.0001, 0.00001], 1: [9000, 500, 20, 1] }; x.extend(s.prototype, { initialize: function (e) { this.map = e; return null }, draw: function () { }, setPoints: function (e) { this._clearCache(); this.points = s.getGraphPoints(e).slice(0); this._calcBounds() }, setPathIn: function (e) { this.setPoints(e) }, _calcBounds: function () { if (!this.points) { return } var e = this; e._bounds = new cw(); if (!this.hasMultipleParts) { x.each(this.points, function (i) { e._bounds.extend(i) }) } else { x.each(this.points, function (i) { x.each(i, function (fn) { e._bounds.extend(fn) }) }) } }, getPoints: function () { return this.points }, getPathIn: function () { return this.points }, setPointAt: function (i, e) { if (!e || !this.points[i]) { return } this._clearCache(); this.points[i] = new e5(e.lng, e.lat); this._calcBounds() }, setOptions: function (i) { i = i || {}; for (var e in i) { if (i.hasOwnProperty(e)) { this._config[e] = i[e] } } }, setStrokeColor: function (e) { this._config.strokeColor = e }, getStrokeColor: function () { return this._config.strokeColor }, setStrokeLineCap: function (e) { this._config.strokeLineCap = e }, getStrokeLineCap: function () { return this._config.strokeLineCap }, setStrokeLineJoin: function (e) { this._config.strokeLineJoin = e }, getStrokeLineJoin: function () { return this._config.strokeLineJoin }, setStrokeWeight: function (e) { if (e > 0) { this._config.strokeWeight = e } }, getStrokeWeight: function () { return this._config.strokeWeight }, setStrokeOpacity: function (e) { if (!e || e > 1 || e < 0) { return } this._config.strokeOpacity = e }, getStrokeOpacity: function () { return this._config.strokeOpacity }, setFillOpacity: function (e) { if (e > 1 || e < 0) { return } this._config.fillOpacity = e }, getFillOpacity: function () { return this._config.fillOpacity }, setStrokeStyle: function (e) { if (e !== "solid" && e !== "dashed" && e !== "dotted") { return } this._config.strokeStyle = e }, getStrokeStyle: function () { return this._config.strokeStyle }, setFillColor: function (e) { this._config.fillColor = e || "" }, getFillColor: function () { return this._config.fillColor }, getBounds: function () { this._bounds.setMinMax(); return this._bounds }, remove: function () { if (this.map) { this.map.removeEventListener("onmousemove", this._graphMouseEvent) } bK.prototype.remove.call(this); this._clearCache(); var e = new aB("onlineupdate"); e.action = "remove"; e.overlay = this; this.fire(e) }, enableEditing: function () { this._config.enableEditing = true }, disableEditing: function () { this._config.enableEditing = false }, getParsedPoints: function () { var e = this._simplification(this.points); if (this.hasMultipleParts) { return e } return [e] }, _simplification: function (fs) { var e = this.map; var fr = this.getParseCacheIndex(e.getZoom()); var fu; if (this._parseCache[fr]) { fu = this._parseCache[fr] } else { var fp = fs; if (this.greatCirclePoints.length > 0) { fp = this.greatCirclePoints } var fq = this.getParseTolerance(e.getZoom(), e.config.coordType); if (!this.hasMultipleParts) { var ft = fe(fp, fq) } else { var ft = []; for (var fn = 0; fn < fp.length; fn++) { var fo = fe(fp[fn], fq); ft.push(fo) } } fu = this._parseCache[fr] = ft } return fu }, _clearCache: function () { this._parseCache.length = 0; this._parseCacheGL.length = 0; this._parseCacheGLRaw.length = 0; this._areaCacheGL.length = 0 } }); if (x.Browser.ie && document.namespaces && !document.namespaces.olv) { document.namespaces.add("olv", "urn:schemas-microsoft-com:vml") } function eS(fq, fo, fn) { if (!fq || !fo) { return } this.imageUrl = null; this.imageDom = null; if (typeof fq === "string") { this.imageUrl = fq } else { this.imageDom = fq; if (!this.imageDom.id) { this.imageDom.id = aI.getGUID("icon_dom_") } } this.size = fo; var fp = new cH(Math.floor(fo.width / 2), Math.floor(fo.height / 2)); var i = { offset: fp, imageOffset: new cH(0, 0) }; fn = fn || {}; for (var e in fn) { i[e] = fn[e] } if (fn.anchor) { i.offset = fn.anchor } this.anchor = this.offset = i.offset; this.imageOffset = i.imageOffset; this.infoWindowOffset = fn.infoWindowOffset || this.offset; this.printImageUrl = fn.printImageUrl || ""; this.imageSize = fn.imageSize; this.srcSetObject = {}; this.setImageSrcset(fn.srcset || fn.srcSet) } eS.prototype.setImageUrl = function (e) { if (!e) { return } this.imageUrl = e; this._renderData = null }; eS.prototype.getCurrentImageUrl = function () { if (window.devicePixelRatio > 1 && this.srcSetObject["2x"]) { return this.srcSetObject["2x"] } return this.imageUrl }; eS.prototype.setPrintImageUrl = function (e) { if (!e) { return } this.printImageUrl = e }; eS.prototype.setSize = function (e) { if (!e) { return } this.size = new cH(e.width, e.height); this._renderData = null }; eS.prototype.setOffset = function (e) { if (!e) { return } this.anchor = this.offset = new cH(e.width, e.height); this._renderData = null }; eS.prototype.setAnchor = function (e) { this.setOffset(e) }; eS.prototype.setImageOffset = function (e) { if (!e) { return } this.imageOffset = new cH(e.width, e.height); this._renderData = null }; eS.prototype.setInfoWindowOffset = function (e) { if (!e) { return } this.infoWindowOffset = new cH(e.width, e.height) }; eS.prototype.setImageSize = function (e) { if (!e) { return } this.imageSize = new cH(e.width, e.height) }; eS.prototype.setImageSrcset = function (fn) { var e = ""; if (!fn) { return } for (var i in fn) { if (fn.hasOwnProperty(i)) { this.srcSetObject[i] = fn[i]; e = fn[i] + " " + i + "," } } this.srcSet = e }; eS.prototype.toString = function () { return "Icon" }; eS.prototype.generateRenderData = function () { var i = this.offset; var e = this.size; var fo = this.imageOffset; var fn = []; fn.push(-i.width, i.height - e.height, 0); fn.push(e.width - i.width, i.height - e.height, 0); fn.push(e.width - i.width, i.height, 0); fn.push(-i.width, i.height - e.height, 0); fn.push(e.width - i.width, i.height, 0); fn.push(-i.width, i.height, 0); return { vertex: fn } }; eS.prototype.getRenderData = function () { if (!this._renderData) { this._renderData = this.generateRenderData() } return this._renderData }; function W(fn, i) { x.BaseClass.call(this); this.content = fn; this.map = null; this._config = { width: 0, height: 0, maxWidth: 600, offset: new cH(0, 0), title: "", maxContent: "", enableMaximize: false, enableAutoPan: true, enableCloseOnClick: true, margin: [10, 10, 40, 10], collisions: [[10, 10], [10, 10], [10, 10], [10, 10]], ifMaxScene: false, onClosing: function () { return true } }; this.setConfig(i); if (this._config.width != 0) { if (this._config.width < 220) { this._config.width = 220 } if (this._config.width > 730) { this._config.width = 730 } } if (this._config.height != 0) { if (this._config.height < 60) { this._config.height = 60 } if (this._config.height > 650) { this._config.height = 650 } } if (this._config.maxWidth != 0) { if (this._config.maxWidth < 220) { this._config.maxWidth = 220 } if (this._config.maxWidth > 730) { this._config.maxWidth = 730 } } this.isWinMax = false; this.IMG_PATH = dp.imgPath; this.overlay = null; var e = this; cI.load("infowindow", function () { e._draw() }) } W.inherits(x.BaseClass, "InfoWindow"); x.extend(W.prototype, { setWidth: function (e) { e = e * 1; if (!e && e != 0 || isNaN(e) || e < 0) { return } if (e != 0) { if (e < 220) { e = 220 } if (e > 730) { e = 730 } } this._config.width = e }, setHeight: function (e) { e = e * 1; if (!e && e != 0 || isNaN(e) || e < 0) { return } if (e != 0) { if (e < 60) { e = 60 } if (e > 650) { e = 650 } } this._config.height = e }, setMaxWidth: function (e) { e = e * 1; if (!e && e != 0 || isNaN(e) || e < 0) { return } if (e != 0) { if (e < 220) { e = 220 } if (e > 730) { e = 730 } } this._config.maxWidth = e }, setTitle: function (e) { this._config.title = e || "" }, setContent: function (e) { this.content = e || "" }, getContent: function () { return this.content }, setMaxContent: function (e) { this._config.maxContent = e || "" }, redraw: function () { }, enableAutoPan: function () { this._config.enableAutoPan = true }, disableAutoPan: function () { this._config.enableAutoPan = false }, enableCloseOnClick: function () { this._config.enableCloseOnClick = true }, disableCloseOnClick: function () { this._config.enableCloseOnClick = false }, enableMaximize: function () { this._config.enableMaximize = true }, disableMaximize: function () { this._config.enableMaximize = false }, show: function () { this._visible = true }, hide: function () { this._visible = false }, close: function () { this.hide() }, dispose: function () { x.BaseClass.prototype.decontrol.call(this) }, maximize: function () { this.isWinMax = true }, restore: function () { this.isWinMax = false }, setConfig: function (i) { if (!i) { return } for (var e in i) { if (typeof (this._config[e]) == typeof (i[e])) { this._config[e] = i[e] } } }, isVisible: function () { return this.isOpen() }, isOpen: function () { return false }, getPointIn: function () { if (this.overlay && this.overlay.getPoint) { return this.overlay.getPoint() } }, getPosition: function () { var e = this.getPointIn(); return cR.convertMC2LL(e) }, getPoint: function () { var e = this.getPointIn(); return cR.convertMC2LL(e) }, getOffset: function () { return this._config.offset }, dispose: function () { x.BaseClass.prototype.decontrol.call(this) }, toString: function () { return "InfoWindow" } }); bV.prototype.openInfoWindowIn = function (fo, e) { if (!fo || fo.toString() != "InfoWindow" || !e || e.toString() != "Point") { return } var i = this.temp; if (!i.marker) { var fn = new eS(dp.imgPath + "blank.gif", { width: 1, height: 1 }); i.marker = new b9(e, { icon: fn, width: 1, height: 1, offset: new cH(0, 0), infoWindowOffset: new cH(0, 0), clickable: false }); i.marker._fromMap = 1 } else { i.marker.setPoint(e) } this.addOverlay(i.marker); i.marker.show(); i.marker.openInfoWindow(fo) }; bV.prototype.openInfoWindow = function (fn, e) { var i = cR.convertLL2MC(e); this.openInfoWindowIn(fn, i) }; bV.prototype.closeInfoWindow = function () { var e = this.temp.infoWin || this.temp._infoWin; if (e && e.overlay) { e.overlay.closeInfoWindow() } }; bK.prototype.openInfoWindow = function (e) { if (this.map) { this.map.closeInfoWindow(); e._visible = true; this.map.temp._infoWin = e; e.overlay = this; x.BaseClass.call(e, e.hashCode) } }; bK.prototype.closeInfoWindow = function () { if (this.map && this.map.temp._infoWin) { this.map.temp._infoWin._visible = false; this.map.temp._infoWin.decontrol(); this.map.temp._infoWin = null } }; function ai(fn, i) { bK.call(this); this.content = fn; this.map = null; this.domElement = null; this._config = { width: 0, offset: new cH(0, 0), styles: { backgroundColor: "#fff", border: "1px solid #f00", padding: "1px", whiteSpace: "nowrap", fontSize: "12px", zIndex: "80", MozUserSelect: "none" }, point: null, enableMassClear: true }; i = i || {}; this.setConfig(i); if (this._config.width < 0) { this._config.width = 0 } this.point = this._config.point; var e = this; cI.load("marker", function () { e._draw() }) } ai.inherits(bK, "Label"); x.extend(ai.prototype, { setPoint: function (e) { if (e && e.toString() === "Point" && !this.getMarker()) { this.point = this._config.point = new e5(e.lng, e.lat) } }, setContent: function (e) { this.content = e }, getContent: function (e) { return this.content }, setOpacity: function (e) { if (e >= 0 && e <= 1) { this._config.opacity = e } }, setOffset: function (e) { if (!e || e.toString() !== "Size") { return } this._config.offset = new cH(e.width, e.height) }, getOffset: function () { return this._config.offset }, setStyle: function (e) { e = e || {}; this._config.styles = x.extend(this._config.styles, e) }, setStyles: function (e) { this.setStyle(e) }, setTitle: function (e) { this._config.title = e || "" }, getTitle: function () { return this._config.title }, setMarker: function (e) { if (this._marker && this._marker !== e) { this._marker._config.label = null } this._marker = e; if (e) { this.point = this._config.point = e.getPoint() } else { this.point = this._config.point = null } }, getMarker: function () { return this._marker || null }, getPositionIn: function () { return this.getPoint() }, }); function dW(fn, i) { var fo = {}; for (var e in i) { if (i.hasOwnProperty(e)) { if (e === "position") { fo.point = cR.convertLL2MC(i[e]) } else { fo[e] = i[e] } } } ai.call(this, fn, fo) } dW.inherits(ai, "LabelOut"); x.extend(dW.prototype, { toString: function () { return "Label" }, setPosition: function (e) { var i = cR.convertLL2MC(e); this.setPoint(i) }, getPosition: function () { var e = this.getPositionIn(); return cR.convertMC2LL(e) } }); window.BMAP_ANIMATION_DROP = 1; window.BMAP_ANIMATION_BOUNCE = 2; function b9(e, i) { bK.call(this); i = i || {}; this.point = e; this.latLng = cR.convertMC2LL(e); this._rotation = 0; this.map = null; this._animation = null; this.domElement = null; this.iconDom = null; this.infoWindowDom = null; this.siblingElement = null; this.textureCoord = null; this.textureCoordGLMap = null; this.collisionDetectionFailed = false; this._config = { offset: new cH(0, 0), opacity: 1, icon: null, title: "", infoWindow: null, label: null, baseZIndex: 0, clickable: true, zIndexFixed: false, isTop: false, enableMassClear: true, enableDragging: false, raiseOnDrag: false, restrictDraggingArea: false, startAnimation: "", enableCollisionDetection: false, rank: 0, enableDraggingMap: false }; this.setConfig(i); if (!i.icon) { this._config.icon = new eS(dp.imgPath + "marker_red.png", new cH(23, 25), { offset: new cH(10, 25), infoWindowOffset: new cH(10, 0) }) } this._isDragging = false; var fn = this; cI.load("marker", function () { fn._draw() }) } b9.TOP_ZINDEX = aH.getZIndex(-90) + 1000000; b9.DRAG_ZINDEX = b9.TOP_ZINDEX + 1000000; b9._injectMethond = function (e) { x.extend(b9.prototype, e) }; b9.inherits(bK, "Marker"); x.extend(b9.prototype, { toString: function () { return "Marker" }, setIcon: function (e) { if (e) { this._config.icon = e; this.textureCoord = this.textureCoordGLMap = null } }, getIcon: function () { return this._config.icon }, setLabel: function (e) { if (!e) { return } this._config.label = e; e._config.enableMassClear = this._config.enableMassClear; e.setPoint(this.point) }, getLabel: function () { return this._config.label }, enableDragging: function () { this._config.enableDragging = true }, disableDragging: function () { this._config.enableDragging = false }, setPoint: function (e) { if (e) { this.point = this._config.point = new e5(e.lng, e.lat); this.latLng = cR.convertMC2LL(e) } }, setPositionIn: function (e) { this.setPoint(e) }, getPositionIn: function () { return this.getPoint() }, setTop: function (i, e) { this._config.isTop = !!i; if (i) { this._addi = e || 0 } }, setTitle: function (e) { this._config.title = e || "" }, getTitle: function () { return this._config.title }, setOffset: function (e) { if (e) { this._config.offset = e } }, getOffset: function () { return this._config.offset }, setAnimation: function (e) { this._animation = e }, setRank: function (e) { this._config.rank = e }, getRank: function () { return this._config.rank }, setRotation: function (e) { while (e < 0) { e += 360 } this._rotation = e % 360 }, getRotation: function () { return this._rotation } }); function ac(e, fn) { var i = cR.convertLL2MC(e); b9.call(this, i, fn) } ac.inherits(b9, "MarkerOut"); x.extend(ac.prototype, { toString: function () { return "Marker" }, setPosition: function (e) { var i = cR.convertLL2MC(e); this.setPositionIn(i) }, getPosition: function () { var e = this.getPositionIn(); return cR.convertMC2LL(e) } }); function a(fn, e) { s.call(this, e); this.setPoints(fn); var i = this; cI.load("poly", function () { i._draw() }) } a.inherits(s, "Polyline"); function T(fp, e) { if (!fp || fp.length === 0) { return } var fo = []; for (var fn = 0; fn < fp.length; fn++) { fo[fn] = cR.convertLL2MC(fp[fn]) } a.call(this, fo, e) } T.inherits(a, "PolylineOut"); x.extend(T.prototype, { toString: function () { return "Polyline" }, setPath: function (fo) { if (!fo || fo.length === 0) { return } var fn = []; for (var e = 0; e < fo.length; e++) { fn[e] = cR.convertLL2MC(fo[e]) } this.setPathIn(fn) }, getPath: function () { var e = this.getPathIn(); if (!e || e.length === 0) { return [] } var fo = []; for (var fn = 0; fn < e.length; fn++) { fo[fn] = cR.convertMC2LL(e[fn]) } return fo } }); function dC(e, fn) { s.call(this, fn); this._normalizedBounds = new cw(); this.setPoints(e); var i = this; cI.load("poly", function () { i._draw() }) } dC.inherits(a, "PolylineMultipart"); x.extend(dC.prototype, { setPoints: function (e) { if (!e) { return } this._clearCache(); this.points = this._unifyArgs(e); this._calcBounds() }, _unifyArgs: function (fn) { var e = []; var i = []; if (fn.constructor === Array) { if (fn[0].constructor === e5) { i.push(fn) } else { i = fn } } else { if (typeof fn === "string") { i.push(fn) } } x.each(i, function (fo) { e.push(s.getGraphPoints(fo)) }); return e }, setPointAt: function (i, e, fn) { fn = fn || 0; if (!e || !this.points[fn] || !this.points[fn][i]) { return } this._clearCache(); this.points[fn][i] = new e5(e.lng, e.lat); this._calcBounds() }, getBounds: function (e) { if (!e) { this._bounds.setMinMax(); return this._bounds } this._normalizedBounds.setMinMax(); return this._normalizedBounds }, _calcBounds: function () { if (!this.points) { return } var e = this; e._bounds.setNorthEast(null); e._bounds.setSouthWest(null); if (e.greatCirclePoints && e.greatCirclePoints.length > 0) { x.each(e.greatCirclePoints, function (i) { e._bounds.extend(i) }) } else { x.each(e.points, function (i) { x.each(i, function (fn) { e._bounds.extend(fn) }) }) } e._normalizedBounds.setSouthWest(e._bounds.getSouthWest()); e._normalizedBounds.setNorthEast(e._bounds.getNorthEast()); if (e._normalizedBounds.sw.lng < -bV.WORLD_SIZE_MC_HALF || e._normalizedBounds.ne.lng > bV.WORLD_SIZE_MC_HALF) { e._normalizedBounds.sw.lng = -bV.WORLD_SIZE_MC_HALF; e._normalizedBounds.ne.lng = bV.WORLD_SIZE_MC_HALF } } }); function al(fn, e) { s.call(this, e); e = e || {}; if (typeof e.fillOpacity === "number") { this._config.fillOpacity = e.fillOpacity } else { this._config.fillOpacity = 0.6 } dO(this._config.fillOpacity, 0, 1); if (e.fillColor === "") { this._config.fillColor = "" } else { this._config.fillColor = e.fillColor ? e.fillColor : "#fff" } this._parseFillCacheWebGL = []; this.setPoints(fn, e); var i = this; cI.load("poly", function () { i._draw() }) } al.inherits(s, "Polygon"); x.extend(al.prototype, { setPoints: function (fq) { var fo = []; if (typeof fq === "string" || fq[0] instanceof e5 || this instanceof ec || fq.length === 0) { var e = this._processSinglePointArray(fq); this._userPoints = e.userPoints; fo = e.innerPoints; this.hasMultipleParts = false } else { this._userPoints = []; for (var fp = 0; fp < fq.length; fp++) { var fn = this._processSinglePointArray(fq[fp]); this._userPoints.push(fn.userPoints); fo.push(fn.innerPoints) } this.hasMultipleParts = true } s.prototype.setPoints.call(this, fo) }, setPathIn: function (e) { this.setPoints(e) }, _processSinglePointArray: function (e) { var i = s.getGraphPoints(e).slice(0); innerPoints = i.slice(0); if (innerPoints.length > 1 && !innerPoints[0].equals(innerPoints[innerPoints.length - 1])) { innerPoints.push(new e5(innerPoints[0].lng, innerPoints[0].lat)) } return { userPoints: i, innerPoints: innerPoints } }, setPointAt: function (i, e) { if (!this._userPoints[i]) { return } this._userPoints[i] = new e5(e.lng, e.lat); this.points[i] = new e5(e.lng, e.lat); if (i === 0 && !this.points[0].equals(this.points[this.points.length - 1])) { this.points[this.points.length - 1] = new e5(e.lng, e.lat) } this._calcBounds() }, getPoints: function () { var e = this._userPoints; if (e.length === 0) { e = this.points } return e }, getPathIn: function () { return this.getPoints() } }); function eP(fp, e) { if (!fp || fp.length === 0) { return } var fo = []; for (var fn = 0; fn < fp.length; fn++) { fo[fn] = cR.convertLL2MC(fp[fn]) } al.call(this, fo, e) } eP.inherits(al, "PolygonOut"); x.extend(eP.prototype, { toString: function () { return "Polygon" }, setPath: function (fo) { if (!fo || fo.length === 0) { return } var fn = []; for (var e = 0; e < fo.length; e++) { fn[e] = cR.convertLL2MC(fo[e]) } this.setPathIn(fn) }, getPath: function () { var e = this.getPathIn(); if (!e || e.length === 0) { return [] } var fo = []; for (var fn = 0; fn < e.length; fn++) { fo[fn] = cR.convertMC2LL(e[fn]) } return fo } }); function ec(i, e, fn) { this.point = i; this.radius = Math.abs(e); al.call(this, [], fn) } ec.parseTolerance = { 0: [0.01, 0.0001, 0.00001, 0.000004], 1: [1000, 10, 1, 0.4] }; ec.inherits(al, "Circle"); x.extend(ec.prototype, { initialize: function (e) { this.map = e; this.points = this._getPerimeterPoints(this.point, this.radius); this._calcBounds(); return null }, getPoint: function () { return this.point }, setPoint: function (e) { if (!e) { return } this.point = e }, setCenterIn: function (e) { var i = arguments[1]; this.setPoint(e, i) }, setRadius: function (e) { this.radius = Math.abs(e) }, getCenterIn: function () { return this.point }, getRadius: function () { return this.radius }, _getPerimeterPoints: function (e, fv) { if (!e || !fv || !this.map) { return [] } var fn = this.map; var fs = e.lng; var fq = e.lat; var fB = cR.convertMC2LL(e); fs = fB.lng; fq = fB.lat; var fC = []; var fx = fv / cR.EARTHRADIUS; var fu = (Math.PI / 180) * fq; var fA = (Math.PI / 180) * fs; for (var ft = 0; ft < 360; ft += 9) { var fr = (Math.PI / 180) * ft; var fy = Math.asin(Math.sin(fu) * Math.cos(fx) + Math.cos(fu) * Math.sin(fx) * Math.cos(fr)); var fw = Math.atan2(Math.sin(fr) * Math.sin(fx) * Math.cos(fu), Math.cos(fx) - Math.sin(fu) * Math.sin(fy)); var fz = ((fA - fw + Math.PI) % (2 * Math.PI)) - Math.PI; var fp = new bS(fy * (180 / Math.PI), fz * (180 / Math.PI)); fC.push(cR.convertLL2MC(fp)) } var fo = fC[0]; fC.push(new e5(fo.lng, fo.lat)); if (fo) { this._radiusMercator = Math.sqrt(Math.pow(fo.lng - this.point.lng, 2) + Math.pow(fo.lat - this.point.lat, 2)) } else { this._radiusMercator = this.radius } return fC } }); function cn(i, e, fo) { var fn = cR.convertLL2MC(i); ec.call(this, fn, e, fo) } cn.inherits(ec, "CircleOut"); x.extend(cn.prototype, { toString: function () { return "Circle" }, setCenter: function (e) { var i = cR.convertLL2MC(e); this.setCenterIn(i) }, getCenter: function () { var e = this.getCenterIn(); return cR.convertMC2LL(e) } }); var aS = {}; function fg(fn, i) { x.BaseClass.call(this); this.content = fn; this.map = null; this._config = { width: 0, height: 0, maxWidth: 600, offset: new cH(0, 0), title: "", maxContent: "", enableMaximize: false, enableAutoPan: true, enableCloseOnClick: true, margin: [10, 10, 40, 10], collisions: [[10, 10], [10, 10], [10, 10], [10, 10]], ifMaxScene: false, onClosing: function () { return true } }; this.setConfig(i); if (this._config.width < 50) { this._config.width = 50 } if (this._config.width > 730) { this._config.width = 730 } if (this._config.height != 0) { if (this._config.height < 50) { this._config.height = 50 } if (this._config.height > 650) { this._config.height = 650 } } if (this._config.maxWidth !== 0) { if (this._config.maxWidth < 50) { this._config.maxWidth = 50 } if (this._config.maxWidth > 730) { this._config.maxWidth = 730 } } this.isWinMax = false; this.IMG_PATH = dp.imgPath; this.overlay = null; var e = this; cI.load("simpleInfowindow", function () { e._draw() }) } fg.inherits(x.BaseClass, "SimpleInfoWindow"); x.extend(fg.prototype, { setWidth: function (e) { e = e * 1; if (!e && e != 0 || isNaN(e) || e < 0) { return } if (e != 0) { if (e < 50) { e = 50 } if (e > 730) { e = 730 } } this._config.width = e }, setHeight: function (e) { e = e * 1; e -= 10; if (!e && e != 0 || isNaN(e) || e < 0) { return } if (e != 0) { if (e < 50) { e = 50 } if (e > 650) { e = 650 } } this._config.height = e }, setMaxWidth: function (e) { e = e * 1; if (!e && e != 0 || isNaN(e) || e < 0) { return } if (e != 0) { if (e < 50) { e = 50 } if (e > 730) { e = 730 } } this._config.maxWidth = e }, setTitle: function (e) { this._config.title = e || "" }, setContent: function (e) { this.content = e || "" }, setMaxContent: function (e) { this._config.maxContent = e || "" }, redraw: function () { }, enableAutoPan: function () { this._config.enableAutoPan = true }, disableAutoPan: function () { this._config.enableAutoPan = false }, enableCloseOnClick: function () { this._config.enableCloseOnClick = true }, disableCloseOnClick: function () { this._config.enableCloseOnClick = false }, enableMaximize: function () { this._config.enableMaximize = true }, disableMaximize: function () { this._config.enableMaximize = false }, show: function () { this._visible = true }, hide: function () { this._visible = false }, close: function () { this.hide() }, dispose: function () { x.BaseClass.prototype.decontrol.call(this) }, maximize: function () { this.isWinMax = true }, restore: function () { this.isWinMax = false }, setConfig: function (i) { if (!i) { return } for (var e in i) { if (typeof (this._config[e]) == typeof (i[e])) { this._config[e] = i[e] } } }, isVisible: function () { return this.isOpen() }, isOpen: function () { return false }, getPoint: function () { if (this.overlay && this.overlay.getPoint) { return this.overlay.getPoint() } }, getOffset: function () { return this._config.offset }, dispose: function () { x.BaseClass.prototype.decontrol.call(this) }, toString: function () { return "SimpleInfoWindow" } }); bV.prototype.openSimpleInfoWindow = function (fo, e) { if (!fo || fo.toString() != "SimpleInfoWindow" || !e || e.toString() != "Point") { return } var i = this.temp; if (!i.marker) { var fn = new eS(dp.imgPath + "blank.gif", { width: 1, height: 1 }); i.marker = new b9(e, { icon: fn, width: 1, height: 1, offset: new cH(0, 0), infoWindowOffset: new cH(0, 0), clickable: false }); i.marker._fromMap = 1 } else { i.marker.setPoint(e) } this.addOverlay(i.marker); i.marker.show(); i.marker.openSimpleInfoWindow(fo) }; bV.prototype.closeSimpleInfoWindow = function () { var e = this.temp.infoWin || this.temp._infoWin; if (e && e.overlay) { e.overlay.closeSimpleInfoWindow() } }; bK.prototype.openSimpleInfoWindow = function (e) { if (this.map) { this.map.closeSimpleInfoWindow(); e._visible = true; this.map.temp._infoWin = e; e.overlay = this; x.BaseClass.call(e, e.hashCode) } }; bK.prototype.closeSimpleInfoWindow = function () { if (this.map && this.map.temp._infoWin) { this.map.temp._infoWin._visible = false; this.map.temp._infoWin.decontrol(); this.map.temp._infoWin = null } }; function cz(fn, e) { if (arguments.length === 0) { return } bK.apply(this, arguments); e = e || {}; this._config = { bounds: fn, opacity: e.opacity || 1, imageURL: e.imageURL || "", displayOnMinLevel: e.displayOnMinLevel || 1, enableMassClear: e.enableMassClear === false ? false : true, displayOnMaxLevel: e.displayOnMaxLevel || 19, stretch: e.stretch || false }; if (e.opacity === 0) { this._config.opacity = 0 } var i = this; cI.load("groundoverlay", function () { i._draw() }) } cz.inherits(bK, "GroundOverlay"); x.extend(cz.prototype, { setBounds: function (e) { this._config.bounds = e }, getBounds: function () { return this._config.bounds }, setOpacity: function (e) { this._config.opacity = e }, getOpacity: function () { return this._config.opacity }, setImageURL: function (e) { this._config.imageURL = e }, getImageURL: function () { return this._config.imageURL }, setDisplayOnMinLevel: function (e) { this._config.displayOnMinLevel = e }, getDisplayOnMinLevel: function () { return this._config.displayOnMinLevel }, setDisplayOnMaxLevel: function (e) { this._config.displayOnMaxLevel = e }, getDisplayOnMaxLevel: function () { return this._config.displayOnMaxLevel } }); function cP(e, i) { e = isNaN(e) ? 0 : e; i = isNaN(i) ? 0 : i; this.x = e; this.y = i } cP.prototype.equals = function (e) { if (!e) { return false } return e.x === this.x && e.y === this.y }; cP.prototype.clone = function () { return new cP(this.x, this.y) }; cP.prototype.toString = function () { return "Pixel" }; function cH(i, e) { if (typeof i !== "number") { this.width = parseFloat(i) } else { this.width = i } if (typeof e !== "number") { this.height = parseFloat(e) } else { this.height = e } } cH.prototype.equals = function (e) { return !!(e && this.width === e.width && this.height === e.height) }; cH.prototype.toString = function () { return "Size" }; var aY = { B_NORMAL_MAP: { tileUrls: cU(dp.tileDomain, dp.rasterTilePath), vectorTileUrls: cU(dp.tileDomain, dp.vectorTilePath), tileSize: 256, baseUnits: 256, zoomLevelMin: 3, zoomLevelMax: 19, minDataZoom: 3, maxDataZoom: 19, minZoom: 3, maxZoom: 19, webgl: { minZoom: 3, maxZoom: 21 }, zoomLevelBase: 18, errorUrl: dp.imgPath + "bg.png", bounds: new cw(new e5(-21364736, -11708041.66), new e5(23855104, 12474104.17)), imgExtend: "png" }, B_SATELLITE_MAP: { tileUrls: ["https://maponline0.bdimg.com/starpic/?qt=satepc&", "https://maponline1.bdimg.com/starpic/?qt=satepc&", "https://maponline2.bdimg.com/starpic/?qt=satepc&", "https://maponline3.bdimg.com/starpic/?qt=satepc&"], tileSize: 256, baseUnits: 256, zoomLevelMin: 3, zoomLevelMax: 19, minDataZoom: 3, maxDataZoom: 19, minZoom: 3, maxZoom: 19, zoomLevelBase: 18, errorUrl: dp.imgPath + "bg.png", bounds: new cw(new e5(-21364736, -10616832), new e5(23855104, 15859712)), imgExtend: "png" }, B_STREET_MAP: { tileUrls: cU(dp.tileDomain, dp.rasterTilePath), tileSize: 256, baseUnits: 256, zoomLevelMin: 3, zoomLevelMax: 19, minDataZoom: 3, maxDataZoom: 19, minZoom: 3, maxZoom: 19, zoomLevelBase: 18, errorUrl: dp.imgPath + "bg.png", bounds: new cw(new e5(-21364736, -10616832), new e5(23855104, 15859712)), imgExtend: "png" }, BMAP_CUSTOM_LAYER: { tileUrls: [""], tileSize: 256, baseUnits: 256, zoomLevelMin: 1, zoomLevelMax: 19, minDataZoom: 3, maxDataZoom: 19, minZoom: 3, maxZoom: 19, zoomLevelBase: 18, errorUrl: dp.imgPath + "blank.gif", bounds: new cw(new e5(-21364736, -10616832), new e5(23855104, 15859712)), imgExtend: "png" }, B_EARTH_MAP: { tileUrls: [""], tileSize: 256, baseUnits: 256, zoomLevelMin: 3, zoomLevelMax: 19, minDataZoom: 3, maxDataZoom: 19, minZoom: 3, maxZoom: 19, webgl: { minZoom: 3, maxZoom: 21 }, zoomLevelBase: 18, errorUrl: dp.imgPath + "blank.gif", bounds: new cw(new e5(-21364736, -10616832), new e5(23855104, 15859712)), imgExtend: "png" } }; var be = aY; function a5(ft, i, fp, fn, fo) { this.mgr = ft; this.position = fp; this._cbks = []; this.name = ft.getTileName(fn, fo, ft.map.config.style); this.info = fn; this._transparentPng = fo.isTransparentPng(); var fu = H("img"); b6(fu); fu.galleryImg = false; var fs = fu.style; fs.position = "absolute"; fs.width = ft.tileSize + "px"; fs.height = ft.tileSize + "px"; fs.left = fp[0] + "px"; fs.top = fp[1] + "px"; this.img = fu; this.src = i; if (L && fp._offsetX === 0) { fs.opacity = 0; fs.willChange = "opacity" } var fr = this; this.img.onload = function (fC) { if (!fr.mgr) { return } var fx = fr.mgr; var fv = fx.bufferTiles; if (fx.bufferNumber > 0) { fv[fr.name] = fr; fv.push(fr.name) } var fz = fv.length - fx.bufferNumber; for (var fA = 0; fz > 0 && fA < fv.length; fA++) { var fB = fv[fA]; if (!fx.mapTiles[fB]) { if (fv[fB]) { fv[fB].mgr = null; var fy = fv[fB].img; if (fy.parentNode) { dF(fy); fy.parentNode.removeChild(fy) } fy = null; fv[fB].img = null; fv[fB] = null; delete fv[fB] } fv.splice(fA, 1); fA--; fz-- } } fr.loaded = true; fx.imgNumber++; if (!eT(fr.img)) { if (fo.tilesDiv) { fo.tilesDiv.appendChild(fr.img) } } var fC = new aB("onimagechange"); fC.action = "show"; fC.tile = fr.name; fx.map.dispatchEvent(fC); if (L && fp._offsetX === 0) { var fw = new l({ fps: 10, duration: 300, render: function (e) { if (fr.img && fr.img.style) { fr.img.style.opacity = e * 1 } }, finish: function () { if (fr.img && fr.img.style) { delete fr.img.style.opacity; fr.img.style.willChange = "auto" } } }) } fr._callCbks() }; this.img.onerror = function (fx) { fr.error = true; fr._callCbks(); if (!fr.mgr) { return } var fv = fr.mgr; var fw = be[fo.mapType]; if (fw.errorUrl) { fr.img.src = fw.errorUrl } if (!eT(fr.img)) { if (fo.tilesDiv) { fo.tilesDiv.appendChild(fr.img) } } }; fu = null; var fq = new aB("onimagebefore"); fq.tile = fr.name; ft.map.dispatchEvent(fq) } a5.prototype._addLoadCbk = function (e) { this._cbks.push(e) }; a5.prototype._load = function () { if (FeBrowser.ie <= 6 && FeBrowser.ie > 0 && this._transparentPng) { this.img.src = dp.imgPath + "blank.gif" } else { this.img.src = this.src } }; a5.prototype._callCbks = function () { var fn = this; for (var e = 0; e < fn._cbks.length; e++) { fn._cbks[e]() } fn._cbks.length = 0 }; var L = (!x.Browser.ie || x.Browser.ie > 8); function dw(e) { this.tileLayers = []; this.map = e; this.bufferNumber = 300; this.mapTiles = []; this.bufferTiles = []; this.config = be[this.map.mapType]; this.errorUrl = this.config.errorUrl; this.tileSize = this.config.tileSize; this.baseUnits = this.config.baseUnits; this.baseZoomLevel = this.config.zoomLevelBase; this.tileURLs = this.config.tileUrls; this.imgNumber = 0; this.numLoading = 0; this.temp = {} } aI.register(function (i) { if (i._renderType === "webgl") { return } var e = i.tileMgr = new dw(i); i.addEventListener("mousewheel", function (fn) { e.mouseWheel(fn) }); i.addEventListener("dblclick", function (fn) { e.dblClick(fn) }); i.addEventListener("rightdblclick", function (fn) { e.dblClick(fn) }); i.addEventListener("minuspress", function (fn) { e.keypress(fn) }); i.addEventListener("pluspress", function (fn) { e.keypress(fn) }); i.addEventListener("load", function (fn) { if (this.mapType === BMAP_EARTH_MAP) { return } e.loadTiles() }); i.addEventListener("zoomstartcode", function (fn) { if (this.mapType === BMAP_EARTH_MAP) { return } e._zoom(fn) }); i.addEventListener("moving", function (fn) { if (this.mapType === BMAP_EARTH_MAP) { return } e.moveGridTiles() }); i.addEventListener("resize", function (fn) { if (this.mapType === BMAP_EARTH_MAP) { return } e.resizeMap(fn) }); i.addEventListener("addtilelayer", function (fn) { e.addTileLayer(fn) }); i.addEventListener("removetilelayer", function (fn) { e.removeTileLayer(fn) }) }); x.extend(dw.prototype, { addTileLayer: function (fo) { var fn = this; var i = fo.target; fn.tileLayers.push(i); if (fn.map.loaded) { fn.moveGridTiles() } }, removeTileLayer: function (fv) { var fw = this; var ft = fv.target; var fr = ft.mapType; var fq = fw.mapTiles; var fy = fw.bufferTiles; for (var fn in fy) { var fo = fn.split("-")[1]; if (fo == fr) { delete fy[fn] } } for (var fn in fq) { var fo = fn.split("-")[1]; if (fo == fr) { delete fq[fn] } } if (fw.zoomsDiv && fw.zoomsDiv.parentNode) { fw.zoomsDiv.parentNode.removeChild(fw.zoomsDiv); fw.zoomsDiv.innerHTML = "" } var fp = fw.map; if (fp.deepZoom) { var fx = fp.deepZoom.preDeepZoomDiv; if (fx && fx.parentNode) { fx.parentNode.removeChild(fx) } } for (var fu = 0, fs = fw.tileLayers.length; fu < fs; fu++) { if (ft == fw.tileLayers[fu]) { fw.tileLayers.splice(fu, 1) } } fw.moveGridTiles() }, hideDeepZoomDiv: function () { var i = this, fn = i.map; if (fn.deepZoom) { var e = fn.deepZoom.preDeepZoomDiv; if (e && e.style.display != "none") { e.style.display = "none" } } }, getTileLayer: function (fp) { var fo = this; for (var fn = 0, e = fo.tileLayers.length; fn < e; fn++) { tilelayer = fo.tileLayers[fn]; if (tilelayer.mapType == fp) { return tilelayer } } return null }, _zoom: function (fn) { var i = this; if (i.zoomsDiv && i.zoomsDiv.style.display != "none") { i.zoomsDiv.style.display = "none" } i.hideDeepZoomDiv(); i.moveGridTiles() }, resizeMap: function (i) { this.loaded = false; this.moveGridTiles() }, _checkTilesLoaded: function () { this.numLoading--; var e = this; if (this.numLoading == 0) { if (this._checkLoadedTimer) { clearTimeout(this._checkLoadedTimer); this._checkLoadedTimer = null } this._checkLoadedTimer = setTimeout(function () { if (e.numLoading == 0) { e.map.dispatchEvent(new aB("ontilesloaded")) } e._checkLoadedTimer = null }, 80) } }, getTileName: function (e, fn, i) { var fp = fn.mapType; var fo = "TILE-" + fp + "-" + i + "-" + e[0] + "-" + e[1] + "-" + e[2]; return fo }, hideTile: function (fo, fn) { var i = fo.img; if (eT(i)) { if (fo.loaded) { this.imgNumber-- } if (i.parentNode) { dF(i); i.parentNode.removeChild(i) } } var fp = new aB("onimagechange"); fp.tile = this.getTileName(fo.info, fn, this.map.config.style); fp.action = "hide"; delete this.mapTiles[fo.name]; if (!fo.loaded) { dF(i); fo._callCbks(); i = null; fo.img = null; fo.mgr = null } this.map.dispatchEvent(fp) }, loadTiles: function () { var i = this; if (x.Browser.ie) { try { document.execCommand("BackgroundImageCache", false, true) } catch (fn) { } } if (this.zoomsDiv && this.zoomsDiv.style.display != "none") { this.zoomsDiv.style.display = "none" } i.hideDeepZoomDiv(); i.moveGridTiles() }, getCell: function (fp, fo) { var e = this.baseUnits * Math.pow(2, (this.baseZoomLevel - fo)); var fn = parseInt(fp.lng / e); var i = parseInt(fp.lat / e); return [fn, i, e * (fn + 0.5), e * (i + 0.5)] }, moveGridTiles: function () { var fC = this.map, fL = fC.getMapType(), fJ = this.tileLayers.length; var fH = fC.centerPoint; if (fL !== BMAP_SATELLITE_MAP) { fH = cE.calcLoopCenterPoint(fH) } var ft = fC.width; var fX = fC.getZoomUnits(); var fI = fX * ft; var fN = fH.lng - fI / 2; var fy = fH.lng + fI / 2; var fB = cE.isAddWidth(fN, fy); for (var fP = 0; fP < fJ; fP++) { var fp = this.tileLayers[fP]; if (fp.baseLayer || fJ == 1) { this.tilesDiv = fp.tilesDiv } var fD = be[fp.mapType]; var fo = fC.zoomLevel; var fS = fC.getZoomUnits(fC.zoomLevel); var fx = fD.baseUnits * Math.pow(2, (fD.zoomLevelBase - fo)); var fv = Math.floor(fH.lng / fx); var fO = Math.floor(fH.lat / fx); var fA = fD.tileSize; var fE = [fv, fO, (fH.lng - fv * fx) / fx * fA, (fH.lat - fO * fx) / fx * fA]; var fw = fB ? fC.width / 2 * 1.5 : fC.width / 2; var fz = fE[0] - Math.ceil((fw - fE[2]) / fA); var fW = fE[1] - Math.ceil((fC.height / 2 - fE[3]) / fA); var fQ = fE[0] + Math.ceil((fw + fE[2]) / fA); var fF = fE[1] + Math.ceil((fC.height / 2 + fE[3]) / fA); var fu = []; for (var fU = fz; fU < fQ; fU++) { for (var fT = fW; fT < fF; fT++) { fu.push([fU, fT]); var fK = "id_" + fU + "_" + fT + "_" + fo; fu[fK] = true } } if (fp.mapType !== BMAP_SATELLITE_MAP) { fu = cE.calcLoopTiles(fu, fo) } fu.sort((function (i) { return function (fZ, f0) { return ((0.4 * Math.abs(fZ[0] - i[0]) + 0.6 * Math.abs(fZ[1] - i[1])) - (0.4 * Math.abs(f0[0] - i[0]) + 0.6 * Math.abs(f0[1] - i[1]))) } })([fE[0], fE[1]])); var fn = this.mapTiles; var e = -fH.lng / fS; var fY = fH.lat / fS; var fM = [e, fY]; for (var fG in fn) { var fr = fn[fG]; var fV = fr.info; if (!fV) { continue } var fK = "id_" + fV[0] + "_" + fV[1] + "_" + fV[2]; if (!fu[fK]) { this.hideTile(fr, fp) } } var fq = -fC.offsetX + fC.width / 2; var fs = -fC.offsetY + fC.height / 2; fp.tilesDiv.style.left = Math.round(e + fq) - fM[0] + "px"; fp.tilesDiv.style.top = Math.round(fY + fs) - fM[1] + "px"; this.numLoading += fu.length; for (var fU = 0, fR = fu.length; fU < fR; fU++) { this.showTile([fu[fU][0], fu[fU][1], fC.zoomLevel], fM, fp, fU, fC.config.style) } } }, showTile: function (fr, fq, fu, fz) { this.centerPos = fq; var fs = be[fu.mapType]; var fv = this.map.config.style; var fo = this.getTileName(fr, fu, fv); var fp = (fr[0] * fs.tileSize) + fq[0]; var fn = (-1 - fr[1]) * fs.tileSize + fq[1]; var fy = [fp, fn]; var ft = null; if (fu.mapType !== BMAP_SATELLITE_MAP) { ft = cE.calcLoopParam(fr[0], fr[2]); var fx = ft.offsetX; fy[0] += fx; fy._offsetX = fx } var fC = this; var fB = this.mapTiles[fo]; if (fB) { fB.img.style.left = fy[0] + "px"; fB.img.style.top = fy[1] + "px"; if (fB.loaded) { this._checkTilesLoaded() } else { fB._addLoadCbk(function () { fC._checkTilesLoaded() }) } return } fB = this.bufferTiles[fo]; if (fB) { this.imgNumber++; fu.tilesDiv.insertBefore(fB.img, fu.tilesDiv.lastChild); this.mapTiles[fo] = fB; fB.img.style.left = fy[0] + "px"; fB.img.style.top = fy[1] + "px"; if (fB.loaded) { this._checkTilesLoaded() } else { fB._addLoadCbk(function () { fC._checkTilesLoaded() }) } var fA = new aB("onimagechange"); fA.action = "cache"; fA.tile = this.getTileName(fr, fu, fv); this.map.dispatchEvent(fA) } else { var fw = new cP(fr[0], fr[1]); if (ft) { fw.x = ft.col } var i = fu.getTilesUrl(fw, fr[2]); fB = new a5(this, i, fy, fr, fu); fB._addLoadCbk(function () { fC._checkTilesLoaded() }); fB._load(); this.mapTiles[fo] = fB; aP(this.map) } }, mouseWheel: function (fs) { var fr = this.map; if (!fr.config.enableWheelZoom) { return } var ft = fr.zoomLevel + (fs.trend === true ? 1 : -1); var fp = fr._getProperZoom(ft); if (fp.exceeded) { var fn = new aB("onzoomexceeded"); fn.targetZoom = ft; fr.dispatchEvent(fn); return } fr.dispatchEvent(new aB("onzoomstart")); fr.lastLevel = fr.zoomLevel; fr.zoomLevel = fp.zoom; var i = fs.pixel; var fo = fr.pixelToPointIn(i, { zoom: fr.lastLevel }); var fq = fr.getZoomUnits(fr.zoomLevel); fr.centerPoint = new e5(fo.lng + fq * (fr.width / 2 - i.x), fo.lat - fq * (fr.height / 2 - i.y)); this.zoom(i) }, dblClick: function (fn) { var i = this.map; if (!i.config.enableDblclickZoom) { return } if (i.mapType === "B_EARTH_MAP") { return } if (i.currentOperation === cy.dragging) { return } if (fn.type == "onrightdblclick") { i.zoomOut(fn.point) } else { i.zoomIn(fn.point) } }, keypress: function (fn) { var i = this.map; if (i.getMapType() === BMAP_EARTH_MAP) { return } fn.type == "onpluspress" ? i.zoomIn() : i.zoomOut() } }); function bI(fo) { this.opts = fo || {}; this.copyright = this.opts.copyright || {}; this.transparentPng = this.opts.transparentPng || false; this.png8 = this.opts.png8 || false; this.baseLayer = this.opts.baseLayer || false; this.dataType = this.opts.dataType || 1; this.isFlat = this.opts.isFlat === false ? false : true; this.showLabel = this.opts.showLabel === false ? false : true; var e = this.opts.tileTypeName || "web"; this.tileType = bF.getInstance(e); this.clipTile = this.opts.clipTile || false; this._type = "tilelayer"; var i = d9() ? 128 : 256; this.cacheSize = this.opts.cacheSize || i; var fn = this; this.tileCache = new dk(this.cacheSize, { clearCallback: function (fp) { if (fp.label) { if (fp.label.textImageBitmap) { fp.label.textImageBitmap.close() } if (fp.label.indoorTextImageBitmap) { fp.label.indoorTextImageBitmap.close() } } fn._removeIndoorData(fp) } }); this.scaler = ay() >= 1.5 ? 2 : 1; this.normalUdt = ad("ditu", "normal").udt; this.numLoading = 0; this.useThumbData = false; if (this.baseLayer) { this.useThumbData = true } if (typeof this.opts.customLayer === "boolean") { this.customLayer = this.opts.customLayer } else { this.customLayer = true } } bI.inherits(cK, "TileLayer"); x.extend(bI.prototype, { isTransparentPng: function () { return this.transparentPng }, getTilesUrl: function (fv, e) { var fn = be[this.mapType]; if (typeof fn != "object") { return null } var fo = fv.x; var fw = fv.y; if (this.mapType !== BMAP_SATELLITE_MAP) { var fw = cE.calcLoopParam(fw, e).col } var i = ""; if (this.opts.tileUrlTemplate) { i = this.opts.tileUrlTemplate; i = i.replace(/\{X\}/, fw); i = i.replace(/\{Y\}/, fo); i = i.replace(/\{Z\}/, e) } else { if (this.mapType == BMAP_NORMAL_MAP) { var fu = this.isCanvasMap ? 0 : 1; var fq = fn.tileUrls[Math.abs(fw + fo) % fn.tileUrls.length]; if (window.offLineIPAddress) { fq = window.offLineIPAddress + "tile5/" } var fp = this.map.config.style; i = fq + "?qt=vtile&x=" + fo + "&y=" + fw + "&z=" + e + (fp === "default" ? "" : ("&styleId=" + dp.mapStyleNameIdPair[fp])) + "&styles=pl&udt=" + this.normalUdt + "&scaler=" + this.scaler + "&showtext=" + fu; i = i.replace(/-(\d+)/gi, "M$1") } if (this.mapType == BMAP_SATELLITE_MAP) { var fr = ad("ditu", "satellite"); var ft = fr.ver; var fs = fr.udt; i = fn.tileUrls[Math.abs(fw + fo) % fn.tileUrls.length] + "u=x=" + fo + ";y=" + fw + ";z=" + e + ";v=" + ft + ";type=sate&fm=46&udt=" + fs; i = i.replace(/-(\d+)/gi, "M$1") } } return i }, initialize: function (fp) { this.map = fp; if (fp._renderType === "webgl") { var fo = null; if (this.customLayer !== false) { fo = this.getTilesUrl } x.extend(this, dY); this.labelProcessor = new b5(this); this.callbackDataQueue = []; if (fo) { this.getTilesUrl = fo } var e = this; fp.on("indoor_data_refresh", function (fq) { if (!e.baseLayer) { return } e._refreshIndoorData(fq.uid, fq.floor) }); fp.on("custom_labels_ready", function (fq) { if (!e.baseLayer) { return } e._doWorkAfterLabelImageLoad(fq.virtualTile, fq.labelCanvas, null, fq.imgKey) }); fp.on("glmoduleloaded", function () { if (!e.baseLayer) { return } e.updateAllIconsTextureCoords() }) } if (!fp.temp.layerZIndex) { fp.temp.layerZIndex = 0 } this.zIndex = this.zIndex || 0; if (this.baseLayer) { this.zIndex = 0 } if (!fp.temp.layid) { fp.temp.layid = 0 } if (!this.opts.mapType) { this.mapType = "BMAP_CUSTOM_LAYER_" + fp.temp.layid; fp.temp.layid++ } else { this.mapType = this.opts.mapType } var i = be[this.mapType]; if (!i) { be[this.mapType] = { tileUrls: [], tileSize: 256, baseUnits: 256, zoomLevelMin: 1, zoomLevelMax: 19, minZoom: 3, maxZoom: 19, minDataZoom: 3, maxDataZoom: 19, zoomLevelBase: 18, errorUrl: dp.imgPath + "/blank.gif", bounds: new cw(new e5(-21364736, -10616832), new e5(23855104, 15859712)), imgExtend: "png" } } if (fp._renderType !== "webgl") { var fn = cq(fp.platform, '<div style="position:absolute;z-index:' + this.zIndex + '"></div>'); fn.style.display = ""; fn.style.left = Math.ceil(-fp.offsetX + fp.width / 2) + "px"; fn.style.top = Math.ceil(-fp.offsetY + fp.height / 2) + "px"; this.tilesDiv = fn } this.isCanvasMap = fp.isCanvasMap(); this.lastZoom = fp.getZoom() }, remove: function () { if (this.tilesDiv && this.tilesDiv.parentNode) { this.tilesDiv.innerHTML = ""; this.tilesDiv.parentNode.removeChild(this.tilesDiv) } delete this.tilesDiv }, getCopyright: function () { return this.copyright }, getMapType: function () { return this.mapType }, setZIndex: function (e) { this.zIndex = e; if (this.tilesDiv) { this.tilesDiv.style.zIndex = e } } }); function bT(i, e, fn) { this.bounds = i; this.content = e; this.mapType = fn } bT.inherits(cK, "Copyright"); var en = { get: function (e) { if (!en.singleton) { en.singleton = new R(e) } return en.singleton } }; function R(i) { this._map = i; this._tileMgr = i.tileMgr; this._animationDiv = null; this._preAnimationDiv = null; this._animation = null; this._baseLayerDiv = null; this._transformStyleName = aA.ifSupportCSS3("transform", true); this._transformOriginStyleName = aA.ifSupportCSS3("transformOrigin", true); this._preZoomTimes = 1; this._preRenderTick = 1; this._enableCanvas2dMap = !!(i.getRenderType() === "canvas"); this._isIE9 = !!(x.Browser.ie === 9); var e = this; i.addEventListener("maptypechange", function () { e.hide() }); i.addEventListener("load", function () { e.hide() }) } x.extend(R.prototype, { prepareLayer: function () { var fo = this._map; var e = this._tileMgr; this._canvas2dMapMgr = fo.canvas2dMapMgr; var fn = this._baseLayerDiv = e.tilesDiv; if (!this._animationDiv) { var i = this._preAnimationDiv; if (i) { i.parentNode && i.parentNode.removeChild(i); this._preAnimationDiv = null } this._preAnimationDiv = this._animationDiv = fn.cloneNode(true); fo.platform.insertBefore(this._animationDiv, fo.platform.firstChild) } this.show() }, prepareAniParam: function () { var fo = this._animationDiv; if (!fo) { return } var e = fo.children.length; var fn; this._zoomAniInfo = []; for (var fp = e - 1; fp > -1; fp--) { var fq = {}; fn = fo.children[fp].style; fq.top = parseInt(fn.top, 10); fq.left = parseInt(fn.left, 10); this._zoomAniInfo[fp] = fq } }, prepareLabelLayer: function () { var fp = this._map; if (this._enableCanvas2dMap && fp.canvas2dMapMgr) { if (this.touchZoomLabelCanvas) { this.touchZoomLabelCanvas.parentNode.removeChild(this.touchZoomLabelCanvas) } var i = fp.canvas2dMapMgr._labelCanvas; this.touchZoomLabelCanvas = i.cloneNode(false); var e = this.touchZoomLabelCanvas.getContext("2d"); e.drawImage(i, 0, 0); fp.platform.insertBefore(this.touchZoomLabelCanvas, fp.platform.firstChild); var fo = parseInt(i.style.left, 10); var fn = parseInt(i.style.top, 10); this.touchZoomLabelCanvas.style.zIndex = 9; this.touchZoomLabelCanvas.style[this._transformOriginStyleName] = (this._fixPosition.x - (fp.offsetX + fo)) + "px " + (this._fixPosition.y - (fp.offsetY + fn)) + "px"; i.style.visibility = "hidden" } }, show: function () { if (this._animationDiv) { this._animationDiv.style.visibility = "" } }, showLabel: function () { var i = this._map; if (this._enableCanvas2dMap && i.canvas2dMapMgr) { var e = i.canvas2dMapMgr._labelCanvas; if (e) { e.style.visibility = "" } if (this.touchZoomLabelCanvas) { this.touchZoomLabelCanvas.style.zIndex = -2; this.touchZoomLabelCanvas.style.visibility = "hidden" } } }, hide: function () { if (this._animationDiv) { this._animationDiv.style.visibility = "hidden" } if (this._preAnimationDiv) { this._preAnimationDiv.style.visibility = "hidden" } }, hideNonAnimationLayers: function () { var fo = this._map; if (fo.getRenderType() === "dom") { if (fo.overlayDiv) { fo.overlayDiv.style.visibility = "hidden" } if (fo.overlayDivEx) { fo.overlayDivEx.style.visibility = "hidden" } } var fq = fo.tileMgr.tileLayers; var fp; for (var fn = 0, e = fq.length; fn < e; fn++) { fp = fq[fn]; fp.tilesDiv.style.visibility = "hidden" } }, showNonAnimationLayers: function () { var fo = this._map; if (fo.getRenderType() === "dom") { if (fo.overlayDiv) { fo.overlayDiv.style.visibility = "" } if (fo.overlayDivEx) { fo.overlayDivEx.style.visibility = "" } } var fq = fo.tileMgr.tileLayers; var fp; for (var fn = 0, e = fq.length; fn < e; fn++) { fp = fq[fn]; fp.tilesDiv.style.visibility = "" } }, setFixPosition: function (e) { this._fixPosition = e }, setZoom: function (e, fu) { var fr = this._fixPosition; var fA = this._map; var fB = this._baseLayerDiv; var fs = { x: fr.x - parseInt(fB.style.left, 10) - fA.offsetX, y: fr.y - parseInt(fB.style.top, 10) - fA.offsetY }; var fo = this._animationDiv; if (!fo) { return } var fy = fo.children.length; var fw; var fz = this._transformStyleName; var fq = this._transformOriginStyleName; var fC = this; var fE; var ft; for (var fx = fy - 1; fx > -1; fx--) { var fv = this._zoomAniInfo[fx]; fw = fo.children[fx].style; var fp = fv.left - fs.x; var fn = fv.top - fs.y; fv.dx = fp * e - fp; fv.dy = fn * e - fn; fv.preDx = fp - fp; fv.preDy = fn - fn; fE = fv.preDx + (fv.dx - fv.preDx); ft = fv.preDy + (fv.dy - fv.preDy) + fu; fw.left = fv.left + fE + "px"; fw.top = fv.top + ft + "px"; fw.width = fw.height = 256 * e + "px" } if (this._enableCanvas2dMap) { var fD = !fC._isIE9 ? "translate3d(0px, " + fu + "px, 0) scale(" + e + ")" : "translate(0px, " + fu + "px) scale(" + e + ")"; this.touchZoomLabelCanvas.style[fz] = fD } }, setZoomFinish: function () { this._animationDiv = null }, startAnimation: function (fr) { this.prepareLayer(); this.hideNonAnimationLayers(); var fK = this._map; if (this.touchZoomLabelCanvas) { this.touchZoomLabelCanvas.style.display = "none" } fr = fr || {}; var fI = fr.zoomCount || 0; var fw = fr.fixPosition; var fG = fr.fixMCPosition; var fu = fr.pixOffset; this._zoomCount = fI; var fo = fK.getZoom(); var fJ = fo + fI; var e = fK.config.enableContinuousZoom; var fA = 0.5; var fv = 5; var fn = Math.pow(2, fI); var fM = this._baseLayerDiv; var fx = { x: fw.x - parseInt(fM.style.left, 10) - fK.offsetX, y: fw.y - parseInt(fM.style.top, 10) - fK.offsetY }; var fs = this._animationDiv; var fE = fs.children.length; var fO = this._preZoomTimes; var fH = []; var fF = this._transformStyleName; var ft = this._transformOriginStyleName; for (var fD = fE - 1; fD > -1; fD--) { var fB = {}; var fC = fs.children[fD].style; fB.top = parseInt(fC.top, 10); fB.left = parseInt(fC.left, 10); var fq = fB.left - fx.x; var fp = fB.top - fx.y; fB.dx = fq * fn - fq; fB.dy = fp * fn - fp; fB.preDx = fq * fO - fq; fB.preDy = fp * fO - fp; fH[fD] = fB } var fL = this; var fz; var fN; var fy; this._zoomAni = new l({ fps: 60, duration: e ? 500 : 1, transition: function (i) { i = i * fv / (2 * fA); return fv * i - fA * i * i }, render: function (fX) { fX = fX * (4 * fA) / (fv * fv); fz = fO + fX * (fn - fO); var fQ = fo + c2(fz); var fV = null; var fU = 0; var fY = 0; if (fr.onAnimationBeforeLooping) { var fZ = fr.onAnimationBeforeLooping(fX, fQ); fV = fZ.loopingCenter; fU = fZ.yDiff; fY = fZ.totalYDiff } for (var fR = fH.length - 1; fR > -1; fR--) { var fS = fH[fR]; if (fs.children[fR]) { var fW = fs.children[fR].style; fN = fS.preDx + (fS.dx - fS.preDx) * fX - fu.width * fX; fy = fS.preDy + (fS.dy - fS.preDy) * fX - fu.height * fX + fU; fW.left = fS.left + fN + "px"; fW.top = fS.top + fy + "px"; fW.height = fW.width = 256 * fz + "px" } } var fP = fu.width * fX; var fT = fu.height * fX; if (fK.isRestrict) { fL._enableCanvas2dMap && fL._canvas2dMapMgr.clearLabel() } else { fL._enableCanvas2dMap && fL._canvas2dMapMgr.drawLabel(fz, fw, fo, fJ, fI, fX, fP, fT, fY, fU) } fL._preZoomTimes = fz; fL._preRenderTick = fX; fr.onAnimationLooping && fr.onAnimationLooping(fX, fQ, fV) }, finish: function () { fL._preZoomTimes = 1; fL._zoomAni = null; fL._animationDiv = null; fr.onAnimationFinish && fr.onAnimationFinish(); fL.showNonAnimationLayers() } }); return this._zoomAni }, stopAnimation: function () { if (this._zoomAni) { this._zoomAni.stop(); this._zoomAni = null } } }); function c(e) { this._initVars(e); this._initColorCanvas(); this._bindEvent(e) } x.extend(c.prototype, { _initVars: function (e) { this._map = e._map; this._canvas2dMapMgr = e; this._labelCtx = e._labelCtx; this.ratio = this._map.config.ratio; this.sizeRatio = this.ratio > 1 ? 2 : 1; this.RANK1 = 1000000; this.RANK2 = 2000000; this.RANK3 = 3000000; this.RANK4 = 4000000; this.RANK5 = 5000000 }, _initColorCanvas: function () { var i = 256, fn = H("canvas"), e = fn.style; e.width = i + "px"; e.height = i + "px"; fn.width = i; fn.height = i; this._colorCvsSize = i; this._colorCvs = fn; this._colorCtx = fn.getContext("2d") }, getLabelImageData: function (fB) { var fA = fB.textImg; var fn = fB.textPos; var fy = this.ratio; var fw = this.sizeRatio / fy; var fp = this._colorCtx; var ft = this._colorCvsSize; fp.clearRect(0, 0, ft, ft); var fv = 0; var e = 0; var fs = 0; for (var fu = 0; fu < fn.length; fu++) { if (fn[fu].width > fv) { fv = fn[fu].width; e = fu; fs = fn[fu].drawX } } fv /= fw; var fx = 0; for (var fu = 0, fr = fn.length; fu < fr; fu++) { var fz = fn[fu]; var fC; if (fu === e) { fC = 0 } else { fC = fz.drawX - fs } fp.drawImage(fA, fz.srcX, fz.srcY, fz.width, fz.height, fC, fx, fz.width / fw, fz.height / fw); if (fz.width / fw > fv) { fv = fz.width / fw } fx += fz.height / fw + 2 * fy } var fo = fp.getImageData(0, 0, fv, fx); var fq = fp.getImageData(0, 0, fv, fx); return [fo, fq] }, _bindEvent: function (i) { var e = this, fn = i._map; fn.addEventListener("onspotmouseover", function (fr) { if (!this.isCanvasMap() || !this.temp.isPermitSpotOver) { return } if (fr.spots.length > 0) { var fq = fr.spots[0].userdata.uid; var fp = fr.spots[0].userdata.name; var fo = e.findLabelByUid(fq, fp); fo && e._toHighLightColor(fo) } }); fn.addEventListener("onspotmouseout", function (fr) { if (!this.isCanvasMap() || !this.temp.isPermitSpotOver) { return } if (fr.spots.length > 0) { var fq = fr.spots[0].userdata.uid; var fp = fr.spots[0].userdata.name; var fo = e.findLabelByUid(fq, fp); fo && e._toDefaultColor(fo) } }); fn.addEventListener("onspotclick", function (fr) { if (!this.isCanvasMap() || !this.temp.isPermitSpotOver) { return } if (fr.spots && fr.spots.length > 0) { var fq = fr.spots[0].userdata.uid; var fp = fr.spots[0].userdata.name; var fo = e.findLabelByUid(fq, fp); fo && e._changeBaseMapState(fo) } else { e._recoverNormalState() } }); fn.on("spot_status_reset", function () { e._recoverNormalState() }); fn.on("spot_highlight", function (fp) { var fo = e.findLabelByUid(fp.uid); fo && e._changeBaseMapState(fo) }) }, _getTextBound: function (fz) { if (!fz.textPos) { return null } var fx = this.ratio; var fv = this.sizeRatio / fx; var fn = fz.textPos; var fy = fz.baseDrawX; var fw = fz.baseDrawY; var ft = fy * fx + (fn[0].drawX - fy) / fv; var fr = fw * fx + (fn[0].drawY - fw) / fv; var fp = ft + fn[0].width / fv; var e = fr + fn[0].height / fv; for (var fu = 0, fs = fn.length; fu < fs; fu++) { var fA = fn[fu]; var fq = fy * fx + (fA.drawX - fy) / fv; if (fq < ft) { ft = fq } var fo = fw * fx + (fA.drawY - fw) / fv; if (fo < fr) { fr = fo } if (fq + fA.width > fp) { fp = fq + fA.width } if (fo + fA.height > e) { e = fo + fA.height } } return [ft, fr, fp, e] }, _toHighLightColor: function (fn) { if (fn._tempRank && fn._tempRank == this.RANK5) { return } var fs = this._getTextBound(fn); if (!fs) { return } var fo = Math.round(fs[0]); var i = Math.round(fs[1]); var e = this.getLabelImageData(fn); var fq = e[0]; var fp = e[1]; var fr = this._canvas2dMapMgr.getFilterImageData(fq, this.RANK5); fn._oldImgData = fp; this._labelCtx.putImageData(fr, fo, i) }, _toDefaultColor: function (e) { if (e._tempRank && e._tempRank == this.RANK5) { return } if (e._oldImgData) { var i = this.sizeRatio; var fn = this._getTextBound(e); if (!fn) { return } this._labelCtx.putImageData(e._oldImgData, Math.round(fn[0]), Math.round(fn[1])); e._oldImgData = null } }, _changeBaseMapState: function (fo) { var fn = this._canvas2dMapMgr; var i = fo.guid; var e = fo.guidExt; var fp = { guid: i, name: fo.name, guidExt: e }; fn._labelStrategy.setStrategyInfo(fp); fn._loadData() }, _recoverNormalState: function () { var e = this._canvas2dMapMgr; e._labelStrategy.setStrategyInfo(null); e._loadData() }, findLabelByUid: function (fq, fo) { var fs = this._canvas2dMapMgr, e = fs._computedLabel; for (var fp = 0, fn = e.length; fp < fn; fp++) { var fr = e[fp]; if (!fs.isClickableLabel(fr)) { continue } if (fq && fr.guid === fq) { return fr } if (fo && fr.name === fo) { return fr } } return null } }); function cJ(e) { this._initVars(e) } x.extend(cJ.prototype, { _initVars: function (e) { this._map = e._map; this._canvas2dMapMgr = e; this.ratio = this._map.config.ratio; this._strategyInfo = null; this.RANK1 = 1000000; this.RANK2 = 2000000; this.RANK3 = 3000000; this.RANK4 = 4000000; this.RANK5 = 5000000 }, setStrategyInfo: function (e) { this._strategyInfo = e }, preComputeLabel: function (fu, gl, f4, fG, gf, gz) { var fY = [], fC = fu._centerX, fA = fu._centerY, gA = fG * gf; var ga = this.ratio; var ft = this._map.getZoom(); var fT = 0; if (ft === 5) { fT = 4 } if (ft === 8) { fT = -6 } fu.sort(function (gB, i) { if (gB.x * gB.y < i.x * i.y) { return -1 } else { return 1 } }); for (var fV = 0, fR = fu.length; fV < fR; fV++) { var gq = fu[fV], fM = gq.x, fJ = gq.y, fH = gq.z; var fO = cE.calcLoopParam(fM, fH).offsetX; var f8 = fM * gA, f7 = (fJ + 1) * gA, fo = (f8 - fC) / fG + gl / 2 + fO, fn = (fA - f7) / fG + f4 / 2; for (var fS = 0, gu = gq.length; fS < gu; fS++) { var fw = gq[fS], fD = undefined, fB = undefined, gs = undefined, gr = undefined; var gh = fw.baseDrawX = fo + fw.baseX; var gg = fw.baseDrawY = fn + fw.baseY; if (fw.type == "fixed") { var f2 = fw.iconPos, fF = fw.textPos, gw = fw.textImg; if (f2) { f2.drawX = fo + f2.destX; f2.drawY = fn + f2.destY; fD = f2.drawX; fB = f2.drawY; gs = f2.drawX + f2.width; gr = f2.drawY + f2.height } if (fF && gw) { for (var gi = 0; gi < fF.length; gi++) { var gv = fF[gi]; gv.drawX = fo + gv.destX; gv.drawY = fn + gv.destY; if (!fD) { fD = gv.drawX; fB = gv.drawY; gs = gv.drawX + gv.width; gr = gv.drawY + gv.height } else { if (gv.drawX < fD) { fD = gv.drawX } if (gv.drawY < fB) { fB = gv.drawY } if (gv.drawX + gv.width > gs) { gs = gv.drawX + gv.width } if (gv.drawY + gv.height > gr) { gr = gv.drawY + gv.height } } } } } else { fw.tileX = fo; fw.tileY = fn; fD = fo + fw.minXOriginal; fB = fn + fw.minYOriginal; gs = fo + fw.maxXOriginal; gr = fn + fw.maxYOriginal } if (fD != undefined) { var gk = gh + (fD - gh) / ga; var gj = gg + (fB - gg) / ga; var fW = gh + (gs - gh) / ga; var fU = gg + (gr - gg) / ga; fw.minX = gk; fw.minY = gj; fw.maxX = fW; fw.maxY = fU; var go = (gk + fW) / 2, gn = (gj + fU) / 2, f5 = fC + (go - gl / 2) * fG, f3 = fA + (f4 / 2 - gn) * fG; fw.geoX = f5; fw.geoY = f3; fY.push(fw) } } } if (gz) { for (var fV = 0, fR = gz.length; fV < fR; fV++) { var fQ = gz[fV]; var gd = fQ[0]; var fx = fQ[1]; var f2 = gd.iconPos; var fr = f2.geoX; var fp = f2.geoY; var gh = (fr - fC) / fG + gl / 2; var gg = (fA - fp) / fG + f4 / 2; var fD = gh + f2.destX; var fB = gg + f2.destY; var gs = fD + f2.width; var gr = fB + f2.height; gd.textPos = gd.textPos || gd._textPos; var fF = gd.textPos; var gm = fF[0]; var fL = gh + gm.destX; var fz = gg + gm.destY; if (fz < fB) { fB = fz } if (fL + gm.width > gs) { gs = fL + gm.width } if (fz + gm.height > gr) { gr = fz + gm.height } if (fF.length === 2) { var fK = fF[1]; var fI = gh + fK.destX; var fy = gg + fK.destY; if (fy < fB) { fB = fy } if (fI + fK.width > gs) { gs = fI + fK.width } if (fy + fK.height > gr) { gr = fy + fK.height } } gd._tempBounds = [fD, fB, gs, gr]; var f2 = fx.iconPos; var fr = f2.geoX; var fp = f2.geoY; var gh = (fr - fC) / fG + gl / 2; var gg = (fA - fp) / fG + f4 / 2; var fD = gh + f2.destX; var fB = gg + f2.destY; var gs = fD + f2.width; var gr = fB + f2.height; fx.textPos = fx.textPos || fx._textPos; var fF = fx.textPos; var gm = fF[0]; var fL = gh + gm.destX; var fz = gg + gm.destY; if (fL < fD) { fD = fL } if (fz < fB) { fB = fz } if (fz + gm.height > gr) { gr = fz + gm.height } if (fF.length === 2) { var fK = fF[1]; var fI = gh + fK.destX; var fy = gg + fK.destY; if (fI < fD) { fD = fI } if (fy < fB) { fB = fy } if (fy + fK.height > gr) { gr = fy + fK.height } } fx._tempBounds = [fD, fB, gs, gr] } for (var fV = 0, fR = gz.length; fV < fR; fV++) { var fQ = gz[fV]; var gd = fQ[0]; var fx = fQ[1]; if (fV === 0 && fx.textPos) { fx._textPos = fx.textPos; delete fx.textPos } var gp = gd; if (!gd.textPos && fx.textPos) { gp = fx } var gt = gp._tempBounds; for (fS = fV + 1; fS < fR; fS++) { var fP = gz[fS]; var fZ = fP[0]; var gy = fP[1]; var fE = 0; var gx = fZ._tempBounds; if (!(gt[2] < gx[0] || gt[0] > gx[2] || gt[3] < gx[1] || gt[1] > gx[3])) { fE++; if (fZ.textPos) { fZ._textPos = fZ.textPos; delete fZ.textPos } } var gx = gy._tempBounds; if (!(gt[2] < gx[0] || gt[0] > gx[2] || gt[3] < gx[1] || gt[1] > gx[3])) { fE++; if (gy.textPos) { gy._textPos = gy.textPos; delete gy.textPos } } if (fE >= 2) { if (gp.textPos) { gp._textPos = gp.textPos; delete gp.textPos } } } } for (var fV = 0, fR = gz.length; fV < fR; fV++) { var fQ = gz[fV]; var gd = fQ[0]; var fx = fQ[1]; var f0 = gd; if (!gd.textPos && fx.textPos) { f0 = fx } var f2 = f0.iconPos; var fr = f2.geoX; var fp = f2.geoY; var gh = f0.baseDrawX = (fr - fC) / fG + gl / 2; var gg = f0.baseDrawY = (fA - fp) / fG + f4 / 2; f2.drawX = gh + f2.destX; f2.drawY = gg + f2.destY; var fD = f2.drawX; var fB = f2.drawY; var gs = f2.drawX + f2.width; var gr = f2.drawY + f2.height; var fF = f0.textPos; if (fF) { var gm = fF[0]; gm.drawX = gh + gm.destX; gm.drawY = gg + gm.destY; if (gm.drawX < fD) { fD = gm.drawX } if (gm.drawY < fB) { fB = gm.drawY } if (gm.drawX + gm.width > gs) { gs = gm.drawX + gm.width } if (gm.drawY + gm.height > gr) { gr = gm.drawY + gm.height } if (fF.length === 2) { var fK = fF[1]; fK.drawX = gh + fK.destX; fK.drawY = gg + fK.destY; if (fK.drawX < fD) { fD = fK.drawX } if (fK.drawY < fB) { fB = fK.drawY } if (fK.drawX + fK.width > gs) { gs = fK.drawX + fK.width } if (fK.drawY + fK.height > gr) { gr = fK.drawY + fK.height } } } var gk = gh + (fD - gh) / ga; var gj = gg + (fB - gg) / ga; var fW = gh + (gs - gh) / ga; var fU = gg + (gr - gg) / ga; f0.minX = gk; f0.minY = gj; f0.maxX = fW; f0.maxY = fU; var gc = (gk + fW) / 2; var gb = (gj + fU) / 2; var fs = fC + (gc - gl / 2) * fG; var fq = fA + (f4 / 2 - gb) * fG; f0.geoX = fs; f0.geoY = fq; fY.push(f0) } } var ge = this._strategyInfo; if (ge) { var fX = ge.guid; var f6 = ge.name; var fN = ge.guidExt; for (var fV = 0, fR = fY.length; fV < fR; fV++) { var fv = fY[fV]; delete fv._tempRank; if (!this._canvas2dMapMgr.isClickableLabel(fv) || (fN === 1 && !fv.guidExt)) { continue } if ((fX && fX === fv.guid) || (f6 && f6 === fv.name)) { fv._tempRank = this.RANK5 } } } else { for (var fV = 0, fR = fY.length; fV < fR; fV++) { var fv = fY[fV]; if (fv.type == "line" || !fv.iconPos) { continue } delete fv._tempRank } } fY.sort(function (gC, gB) { var gD = gC._tempRank ? gC._tempRank : gC.rank, i = gB._tempRank ? gB._tempRank : gB.rank; if (gD === i) { return gC.baseX - gB.baseX } return i - gD }); for (var fV = 0, fR = fY.length; fV < fR; fV++) { var gp = fY[fV]; gp.isDel = false; gp.isFadeout = false; gp._schedule = 0; gp._isIgnore = false; gp.arrIntersectIndex = []; for (fS = fV + 1; fS < fR; fS++) { var f1 = fY[fS]; if (!(gp.maxX - fT < f1.minX || gp.minX > f1.maxX - fT || gp.maxY - fT < f1.minY || gp.minY > f1.maxY - fT)) { gp.arrIntersectIndex.push(fS) } } } for (var fV = 0, fR = fY.length; fV < fR; fV++) { var fv = fY[fV]; if (fv.isDel == false) { var e = fv.arrIntersectIndex; for (var fS = 0, gu = e.length; fS < gu; fS++) { var f9 = fY[e[fS]]; f9.isDel = true; if (f9.guidExt === 1) { f9.isDel = false } } } } return fY } }); function Q(e) { this._map = e; this._initCanvas(); this._initVars(); this._bindEvent(); this._tileType = bF.getInstance("na") } aI.register(function (i) { if (i.getRenderType() === "canvas") { var e = i.config.style; if (aI["FeatureStyle" + e]) { i.canvas2dMapMgr = new Q(i) } else { i.loadMapStyleFiles(function () { i.canvas2dMapMgr = new Q(i); i.canvas2dMapMgr._loadData() }) } } }); x.extend(Q.prototype, { _initCanvas: function () { var fr = this._map, fp = fr.getSize(), fo = fp.width, i = fp.height, e = fr.platform, fs = H("canvas"), fq = fs.style; var fn = this.ratio = fr.config.ratio; this._width = fo; this._height = i; fq.cssText = "position: absolute;left:0;top:0;width:" + fo + "px;height:" + i + "px;z-index:100;"; fs.width = fo * fn; fs.height = i * fn; this._labelCanvas = fs; this._labelCtx = fs.getContext("2d"); e.appendChild(fs) }, _initVars: function () { var e = ad("ditu", "normal"); this._udt = e.udt; this._version = e.ver; this._labelDataUrls = be.B_NORMAL_MAP.vectorTileUrls; this._style = aI["FeatureStyle" + this._map.config.style]; this._labelCount = 0; this._vectorDrawLib = new ar(this); this._cache = { maxNum: 500, delNum: 50, arrCache: [] }; this._computedLabel = null; this._spotData = null; this._labelStrategy = new cJ(this); this._labelClick = new c(this); this._biz = new eF(this); this._map.temp.isPermitSpotOver = true; this.labelStyleParam = "pl"; if (this._map.getMapType() === BMAP_SATELLITE_MAP) { this.labelStyleParam = "sl" } this.statRequestCount = 0; this.statResponseCount = 0 }, _resizeHandler: function (fq) { var fs = this, i = fs._map, fp = i.getSize(), fn = fp.width, fu = fp.height; var fr = this.ratio; var fv = this._labelCanvas, fo = fv.style; fo.width = fn + "px"; fo.height = fu + "px"; fv.width = fn * fr; fv.height = fu * fr; fs._width = fn; fs._height = fu; var ft = true; fs._loadData(ft) }, _bindEvent: function () { var e = this, i = e._map; i.addEventListener("load", function (fn) { e.clearLabel(); e._loadData() }); i.addEventListener("zoomend", function (fn) { if (!fn.notClearLabel) { e.clearLabel() } e._loadData() }); i.addEventListener("moveend", function (fn) { e._loadData() }); i.addEventListener("resize", function (fn) { e._resizeHandler(fn) }); i.addEventListener("maptypechange", function (fn) { if (fn.mapType === BMAP_EARTH_MAP) { e.hideLabelCanvas() } else { e.showLabelCanvas(); if (fn.mapType === BMAP_NORMAL_MAP) { e.labelStyleParam = "pl" } else { if (fn.mapType === BMAP_SATELLITE_MAP) { e.labelStyleParam = "sl" } } e._loadData() } }); i.addEventListener("streetlayer_show", function (fn) { if (this.isCanvasMap()) { e.showLabelCanvas() } }); i.addEventListener("streetlayer_hide", function (fn) { if (this.isCanvasMap()) { e.hideLabelCanvas() } }); i.addEventListener("loadbizdata", function (fo) { var fn = fo.data; e._biz.proecessBizData(fn, function () { e.updateLabel() }) }); i.addEventListener("unloadbizdata", function (fn) { e._biz.clearBizData(); e.updateLabel() }); e.isDrawText = false; setTimeout(function () { if (!e.isDrawText) { i.dispatchEvent(new aB("onmapwhitescreen")) } }, 10000) }, getStyle: function () { return this._style }, _getZoomUnits: function (e) { return Math.pow(2, 18 - e) }, _createCacheForm: function (fn, fs, fr, i) { var fq = this; var e = fq._cache; var fo = e.arrCache; var ft = this._getLabelId(fn, fs, fr, i); var fp = { id: ft, updateLabelCounter: 0 }; fo.push(fp); fo[ft] = fp; return fp }, _getLabelId: function (i, fo, fn, e) { return "_" + i + "_" + fo + "_" + fn + "_" + e + "_" + this.labelStyleParam }, _getCache: function (i, fo, fn, e) { return this._cache.arrCache[this._getLabelId(i, fo, fn, e)] }, _setCacheValue: function (fp, fC, fA, fo, fv) { var fx = this; var e = fx._cache; var fr = e.arrCache; var ft = e.maxNum; var fq = e.delNum; var fB = this._getLabelId(fp, fC, fA, fo); var fw = fr[fB]; if (fv) { fw.lb = fv } if (fr.length > ft) { var fn = fr.splice(0, fq); for (var fu = 0, fs = fn.length; fu < fs; fu++) { var fy = fn[fu], fz = fy.id; if (fr[fz].lb) { fr[fz].lb = null } fr[fz] = null; delete fr[fz] } fn = null } }, _loadData: function (fA) { var fT = this._map; if (!fT.isCanvasMap()) { return } var ft = fT.getCenterIn(); var fS = cE.calcLoopCenterPoint(ft); var fs = this._tileType; var fv = this._width / 2; var fH = this._height; var fI = fT.getZoom(); var fE = fs.getDataZoom(fI); var fx = fT.getZoomUnits(fI); var fD = fx * fv; var fR = fS.lng - fD; var fQ = fS.lng + fD; var fB = cE.isAddWidth(fR, fQ); fv = fB ? fv * 1.5 : fv; var fC = fs.getTileSize(fI); var fp = fs.getMercatorSize(fI, fE); var fw = Math.floor(fS.lng / fp); var fy = Math.floor(fS.lat / fp); var fq = [fw, fy, (fS.lng - fw * fp) / fp * fC, (fS.lat - fy * fp) / fp * fC]; var fK = fq[0] - Math.ceil((fv - fq[2]) / fC); var fO = fq[1] - Math.ceil((fH / 2 - fq[3]) / fC); var fG = fq[0] + Math.ceil((fv + fq[2]) / fC); var fL = fq[1] + Math.ceil((fH / 2 + fq[3]) / fC); fT.temp.isPermitSpotOver = false; var e = []; for (var fN = fK; fN < fG; fN++) { for (var fM = fO; fM < fL; fM++) { e.push([fN, fM, fE]); var fF = "id_" + fN + "_" + fM + "_" + fI; e[fF] = true } } e._zoom = fE; e = cE.calcLoopTiles(e, fI); e.sort((function (i) { return function (fV, fW) { return ((0.4 * Math.abs(fV[0] - i[0]) + 0.6 * Math.abs(fV[1] - i[1])) - (0.4 * Math.abs(fW[0] - i[0]) + 0.6 * Math.abs(fW[1] - i[1]))) } })([fq[0], fq[1]])); var fz = this._cache.arrCache; this._curViewLabels = []; var fo = "viewKey_" + Math.floor(ft.lng) + "_" + Math.floor(ft.lat) + "_" + fI; this.statRequestCount = 0; this.statResponseCount = 0; this._labelCount += e.length; var fu = fI; for (var fN = 0, fJ = e.length; fN < fJ; fN++) { var fw = e[fN][0]; var fy = e[fN][1]; var fn = e[fN][2]; var fr = this._getLabelId(fw, fy, fn, fu); var fP = fz[fr]; if (!fP) { fP = this._createCacheForm(fw, fy, fn, fu) } if (typeof fP.lb === "undefined") { fP.lb = null; this._loadLabelData(fw, fy, fn, fu, fC, fo); this.statRequestCount++ } else { if (fP.lb) { this._curViewLabels.push(fP.lb); this._labelCount-- } else { if (fA) { this._loadLabelData(fw, fy, fn, fu, fC, fo) } fP.updateLabelCounter++ } } } if (this._labelCount === 0) { this.updateLabel() } var fU = this; if (fU.errorTimer) { clearTimeout(fU.errorTimer) } fU.errorTimer = setTimeout(function () { if (fU._labelCount !== 0) { fU._labelCount = 0; fU.updateLabel() } var fW = new aB("onloaddatatimeout"); var fX = 0; var fV = 0; var fY = 0; var i = 0; if (fU.statRequestCount === fU.statResponseCount) { fX = 1 } else { fV = 1 } if (fV === 1) { i = fU.statRequestCount - fU.statResponseCount; fY = fU.statResponseCount } fW.noTimeoutCount = fX; fW.timeoutCount = fV; fW.timeoutNoLoaded = i; fW.timeoutLoaded = fY; fU._map.dispatchEvent(fW) }, 500) }, clearLabel: function () { var e = this._width; var fn = this._height; var i = this.ratio; this._labelCtx.clearRect(0, 0, e * i, fn * i) }, updateLabel: function () { var i = this._map; var e = i.getCenterIn(); var fo = this._width; var fr = this._height; var fu = i.getZoom(); var ft = this._tileType.getTileSize(fu); var fs = this._getZoomUnits(fu); var fn = this._labelCtx; this._labelCanvas.style.left = -i.offsetX + "px"; this._labelCanvas.style.top = -i.offsetY + "px"; var fq = this._curViewLabels; fq._centerX = e.lng; fq._centerY = e.lat; var fp = this._biz.bizLabels; this._computedLabel = this._labelStrategy.preComputeLabel(fq, fo, fr, fs, ft, fp); this._computedLabel._zoom = fu; this.clearLabel(); this._vectorDrawLib.drawIconAndText(fn, this._computedLabel, fu); this._addSpotData(); i.temp.isPermitSpotOver = true; if (fq.length > 0) { this.isDrawText = true } }, _loadLabelData: function (fx, fw, fv, fn, fy, e) { var fq = fx.toString(); var fo = fw.toString(); var fs = "cbk_" + fq.replace("-", "_") + "_" + fo.replace("-", "__") + "_" + Math.floor(fv); var fC = c0 + "." + fs; var fB = this._labelDataUrls; var fu = Math.abs(fx + fw) % fB.length; var fH = fB[fu]; if (window.offLineIPAddress) { fH = window.offLineIPAddress + "pvd/" } var i = this.labelStyleParam; var fA = "?qt=vtile"; var fD = ""; if (this._map.config.style !== "default") { fD = "&styleId=" + dp.mapStyleNameIdPair[this._map.config.style] } var fz = "x={x}&y={y}&z={z}&udt={udt}&v={v}&styles={styles}" + fD + "&textonly=1&textimg=1&scaler={scaler}&fn=" + encodeURIComponent(fC); var fE = cE.calcLoopParam(fx, fv).col; var ft = this.ratio > 1 ? 2 : 1; var fr = fz.replace(/{x}/, fE).replace(/{y}/, fw).replace(/{z}/, Math.floor(fv)).replace(/{styles}/, i).replace(/{udt}/, this._udt).replace(/{v}/, this._version).replace(/{scaler}/, ft); var fp = fH + fA + "&param=" + window.encodeURIComponent(el(fr)); var fG = this; var fF = fG._map; aI[fs] = function (fI) { fG._vectorDrawLib.parseLabelData(fI, fx, fw, fv, fn, fy, function (fN) { var fK = fF.getCenterIn(); var fO = fF.getZoom(); var fQ = "viewKey_" + Math.floor(fK.lng) + "_" + Math.floor(fK.lat) + "_" + fO; fG._labelCount--; var fR = fG._getCache(fx, fw, fv, fn).updateLabelCounter; fG._labelCount -= fR; var fL = fG._curViewLabels; if (fQ === e || (fG._labelCount < 0 && fO === fv)) { fL.push(fN) } if (fQ === e) { fG.statResponseCount++ } if (fG._labelCount <= 0) { var fJ = (new Date()).getTime(); fG.updateLabel(); var fM = (new Date()).getTime(); var fP = new aB("oncanvasmaploaded"); fP.drawTime = fM - fJ; if (fG.statResponseCount === fG.statRequestCount) { fP.isAllLoadedDrawing = true } fF.dispatchEvent(fP) } fG._setCacheValue(fx, fw, fv, fn, fN); delete aI[fs] }) }; e0.load(fp) }, drawLabel: function (fn, fo, fv, i, ft, fp, e, fq, fu, fr) { var fs = this; if (!fs._computedLabel) { return } if (fs._computedLabel._zoom !== fv) { fs.clearLabel(); return } fs._map.temp.isPermitSpotOver = false; fs.clearLabel(); fs._vectorDrawLib.zoomingIconAndText(this._labelCtx, fs._computedLabel, fn, fo, i, ft, fp, e, fq, fu, fr) }, _addSpotData: function () { this._spotData = []; var fv = this._map.getZoom(); for (var fq = 0, fp = this._computedLabel.length; fq < fp; fq++) { var fs = this._computedLabel[fq]; if (!this.isClickableLabel(fs) || (fs.guidExt === 1 && fs.startScale > fv)) { continue } var fr = []; fr[0] = (fs.minX - fs.maxX) / 2; fr[1] = (fs.minY - fs.maxY) / 2; fr[2] = (fs.maxX - fs.minX) / 2; fr[3] = (fs.maxY - fs.minY) / 2; var fo = null; if (fs.iconPos) { fo = new e5(fs.iconPos.geoX, fs.iconPos.geoY) } var fn = fs.name ? fs.name.replace("\\\\", "<br>") : ""; if (fs.iconPos && fs.iconPos.iconType.indexOf("ditie") > -1 && this._map.getZoom() > 14) { fn = "" } var fu = { n: fn, pt: new e5(fs.geoX, fs.geoY), userdata: { iconPoint: fo, uid: fs.guid, name: fn, type: fs.iconPos ? fs.iconPos.iconType : "", iconImg: fs.iconImg, mapPoi: true, adver_log: fs.adver_log || "" }, bd: fr, tag: "MAP_SPOT_INFO" }; this._spotData.push(fu) } var ft = new aB("onspotsdataready"); ft.spots = this._spotData; this._map._spotDataOnCanvas = this._spotData; this._map.dispatchEvent(ft) }, isClickableLabel: function (e) { if (e.isDel || (!e.guid && !e.name)) { return false } return true }, getFilterImageData: function (fn, fr) { var fs = fn.data, fq = this._labelStrategy, fr = parseInt(fr); for (var ft = 0, fp = fs.length; ft < fp; ft += 4) { var e = fs[ft], fu = fs[ft + 1], fv = fs[ft + 2], fw = fs[ft + 3]; if (fw === 0) { continue } var fo = Math.round((e + fu + fv) / 3); var fx = fo - 90; fx = fx < 0 ? 0 : fx; if (fr === fq.RANK5) { fs[ft] = 51 + fx * 1.3; fs[ft + 1] = 133 + fx * 0.8; fs[ft + 2] = 255 } } return fn }, showLabelCanvas: function () { this._labelCanvas.style.visibility = "" }, hideLabelCanvas: function () { this._labelCanvas.style.visibility = "hidden" } }); var bg = 5; var cB = 4; var e3 = 3; var dx = 2; var fh = 1; var cD = 0; var fk = 3; var eV = 5; var B = { 3: { start: 3, base: 3 }, 4: { start: 4, base: 5 }, 5: { start: 4, base: 5 }, 6: { start: 6, base: 7 }, 7: { start: 6, base: 7 }, 8: { start: 8, base: 9 }, 9: { start: 8, base: 9 }, 10: { start: 10, base: 10 }, 11: { start: 11, base: 12 }, 12: { start: 11, base: 12 }, 13: { start: 11, base: 12 }, 14: { start: 14, base: 15 }, 15: { start: 14, base: 15 }, 16: { start: 16, base: 17 }, 17: { start: 16, base: 17 }, 18: { start: 18, base: 19 }, 19: { start: 18, base: 19 }, 20: { start: 18, base: 19 }, 21: { start: 18, base: 19 } }; function ar(fo) { this._canvas2dMapMgr = fo; var i = this.ratio = fo._map.config.ratio; this._featureStyle = null; this._map = fo._map; var fn = dK(); var e = "udt=" + fn.udt + "&v=" + fn.ver; this.sizeRatio = this.ratio > 1 ? 2 : 1; this._binaryCache = {}; this._iconCache = {}; this._initColorCanvas() } x.extend(ar.prototype, { _initColorCanvas: function () { var i = 256, fn = H("canvas"), e = fn.style; e.width = i + "px"; e.height = i + "px"; fn.width = i; fn.height = i; this._colorCvs = fn; this._colorCtx = fn.getContext("2d") }, parseLabelData: function (i, fq, fp, fo, e, ft, fs) { if (!this._featureStyle) { this._featureStyle = this._canvas2dMapMgr.getStyle() } if (!i || !i[0]) { fs([]); return } var fr = this._map.getZoomUnits(); var fn = this; this.loadTextPng(i, ft, fq, fp, fo, e, fr, fs) }, loadTextPng: function (fF, fw, fu, ft, fr, i, fp, fo) { var fE = this; var e = fF[5]; var fD = this._map; var fA = fD.getZoom(); var fn = fD.getSize(); var fB = fn.width; var fz = fn.height; var fC = fD.getCenterIn(); var fs = fC.lng; var fq = fC.lat; var fy = fu * fw * fp; var fx = (ft + 1) * fw * fp; if (e) { var fv = new Image(); fv.onload = function () { fE.calcIconAndTextInfo(fF, fv, fw, fu, ft, fr, i, fp, fy, fx, fo); delete this.onload }; fv.src = e } else { setTimeout(function () { fE.calcIconAndTextInfo(fF, null, fw, fu, ft, fr, i, fp, fy, fx, fo) }, 1) } }, calcIconAndTextInfo: function (fH, fy, fz, fx, fu, fs, fo, fq, fB, fA, fp) { var fG = this; var fF = fG._featureStyle; var fv = []; fv.x = fx; fv.y = fu; fv.z = fs; var fw = fG._canvas2dMapMgr, fn = fx * fq * fz, fE = (fu + 1) * fq * fz, fr = { tileLeft: fn, tileTop: fE, zoomUnits: fq }; var e = []; if (fH[0]) { for (var fC = 0; fC < fH[0].length; fC++) { if (fH[0][fC][0] === fk) { e.push(fH[0][fC]) } } } var ft = fH[2] || []; for (var fC = 0; fC < e.length; fC++) { this._getFixedLabelInfo(e[fC], fy, fo, fq, fz, fB, fA, fv) } var fD = Math.pow(2, fo - fs); for (fC = 0; fC < ft.length; fC++) { this._getLineLabelInfo(ft[fC], fy, fs, fo, fq, fz, fB, fA, fD, fv) } fp(fv) }, _getFixedLabelInfo: function (fy, fC, fp, ft, fD, fG, fF, fI) { var fx = fy[1]; if (!fx) { return } var fK = this._map.getZoom(); var fS = this._map.config.style; var fT = this._featureStyle; var fu = fp; if (fu === 9) { fu = 8 } for (var fP = 0; fP < fx.length; fP++) { var fU = fx[fP]; var e = fU[0]; var fo = cQ.getStyleFromCache(fS, e, "point", fu, fT); var fO = cQ.getStyleFromCache(fS, e, "pointText", fu, fT); if ((!fO || fO.length === 0) && (!fo || fo.length === 0)) { if (fu === 5) { var fs = fU[1]; if (!fs) { continue } for (var fL = 0; fL < fs.length; fL++) { var fJ = fs[fL][4]; if (fJ && fJ[7] === "北京") { fo = cQ.getStyleFromCache(fS, e, "point", 6, fT); fO = cQ.getStyleFromCache(fS, e, "pointText", 6, fT); break } else { continue } } } else { continue } } var fs = fU[1]; if (!fs) { continue } var fQ = null; var fv = 1; var fn = 0; var fB = 0; if (fo && fo[0]) { fo = fo[0]; fQ = fo.icon; fv = fo.zoom ? fo.zoom / 100 : 1 } else { fo = null } for (var fL = 0; fL < fs.length; fL++) { var fJ = fs[fL][4]; if (!fJ) { continue } var fN = fJ[2]; if (!this._isVisible(fN, fK)) { continue } var fw = fJ[12]; if (fO && fO.length > 0 && !fw) { continue } var fA = Math.round(fJ[0] / 100); var fz = Math.round(fJ[1] / 100); var fM = { lng: fG + fA, lat: fF - (fD * ft - fz) }; var fr = fA / ft; var fq = fD - fz / ft; var fE = fJ[7] || ""; var fR = fJ[5]; var fH = { type: "fixed", name: fE, textImg: fC, rank: fJ[4], baseX: fr, baseY: fq, iconPos: null, textPos: null, guid: fJ[3] || "", tracer: fN, direction: fR, startScale: 3 }; if ((fR !== cB && fw || !fw) && fQ !== null) { fH.iconPos = this._getIconPosition(fQ, fv, fr, fq, fM); if (fH.iconPos) { fn = fH.iconPos.width; fB = fH.iconPos.height } } if (fn === 0) { fH.direction = cB } if (fw) { fH.textPos = this._getTextDrawData(fJ, fr, fq, fn, fB) } if (fH.textPos || fH.iconPos) { fI.push(fH) } } } }, _isVisible: function (e, i) { var fo; if (!this._binaryCache[e]) { fo = e.toString(2); if (fo.length < 8) { fo = new Array(8 - fo.length + 1).join("0") + fo } this._binaryCache[e] = fo } fo = this._binaryCache[e]; var fn = B[i].start; return fo[i - fn] === "1" }, _getIconPosition: function (fs, fq, fn, i, e) { var fo = this._map.config.style; var ft = aI["iconSetInfo" + fo][fs]; if (!ft) { if (fs.charCodeAt(0) >= 48 && fs.charCodeAt(0) <= 57) { ft = aI["iconSetInfo" + fo]["_" + fs] } } if (!ft) { return null } var fp = ft[0]; var fr = ft[1]; fp = fp * fq; fr = fr * fq; return { srcX: 0, srcY: 0, destX: fn - fp / 2, destY: i - fr / 2, width: fp, height: fr, geoX: e.lng, geoY: e.lat, mcPt: e, iconType: fs } }, _getTextDrawData: function (fz, fy, fx, fo, fv) { var fE = fz[5]; if (typeof fE !== "number") { fE = 0 } var ft = this.ratio; var fs = ft / 2; fo *= fs; fv *= fs; var fu = fz[12]; var fp = fu.length; var fH = 0; var fG = 0; var fD = []; var fC = 0; var fF = 0; for (var fB = 0; fB < fp; fB++) { fF += Math.round(fu[fB][3]) } for (var fB = 0; fB < fp; fB++) { var fr = fu[fB]; var fq = fr[0]; var i = fr[1]; var fn = fr[2]; var e = fr[3]; var fI = 2 * ft; var fA = 0; if (fo !== 0) { fA = 2 * ft } if (fo === 0) { fE = cB } switch (fE) { case e3: var fw = fx - fF / 2 - fI * (fp - 1) / 2; fH = fy - fn - fo / 2 - fA; fG = fw + fC + fI * fB; break; case fh: var fw = fx - fF / 2 - fI * (fp - 1) / 2; fH = fy + fo / 2 + fA; fG = fw + fC + fI * fB; break; case dx: var fw = fx - fv / 2 - fF - fI * (fp - 1) - fI; fH = fy - fn / 2; fG = fw + fC + fI * fB; break; case cD: var fw = fx + fv / 2 + fI / 2; fH = fy - fn / 2; fG = fw + fC + fI * fB; break; case cB: var fw = fx - e / 2 - fI * (fp - 1) / 2; fH = fy - fn / 2; fG = fw + fC + fI * fB; break }fC += e; if (fn > 0 && e > 0) { fD.push({ srcX: fq, srcY: i, destX: fH, destY: fG, width: fn, height: e }) } } if (fD.length > 0) { return fD } return null }, _getLineLabelInfo: function (fw, fo, fp, fL, fY, fD, fJ, fI, fK, fC) { if (fw.length !== 10) { return } var fN = this.ratio; var fn = this.ratio; var fU = fw[7].length; var fE = fw[1]; var fW = fw[3]; var f2 = fw[8]; var fs = fw[4]; var e = 2; var fq = fs.slice(0, e); for (var fZ = e; fZ < fs.length; fZ += e) { fq[fZ] = fq[fZ - e] + fs[fZ]; fq[fZ + 1] = fq[fZ - (e - 1)] + fs[fZ + 1] } for (var fZ = e; fZ < fs.length; fZ += e) { if (fZ % (fW * e) === 0 || fZ % (fW * e) === 1) { continue } fq[fZ] = fq[fZ - e] + fs[fZ] / fK; fq[fZ + 1] = fq[fZ - (e - 1)] + fs[fZ + 1] / fK } for (var f1 = 0; f1 < fU; f1++) { var fX = fw[7][f1]; if (!this._isVisible(fX, fL)) { continue } var fP = fw[6][f1]; var fB = f1 * fW * e; fs = fq.slice(fB, fB + fW * e); var fF = []; var fO = undefined; var fM = undefined; var fA = undefined; var fz = undefined; var f2 = fw[9].slice(0); if (fP) { f2.reverse() } var fS; var fQ; for (var f0 = 0; f0 < fW; f0++) { var fy = fw[5][fW * f1 + f0]; var fT = fs[f0 * e] / 100; var fR = fs[f0 * e + 1] / 100; var fx = f2[f0]; var ft = fx[0]; var fv = fx[1]; var fr = fx[2]; var fu = fx[3]; var fH; var fG; var f4; var f3; if (f0 === 0) { fS = f4 = fT / fY; fQ = fD - fR / fY; f3 = fR / fY } else { f4 = fT / fY; f3 = fR / fY } var f6 = fS + (f4 - fS) * fn - fr / 2; var f5 = fQ + (fD - f3 - fQ) * fn - fu / 2; if (fO === undefined) { fO = fS - fr / 2; fM = fQ - fu / 2; fA = fO + fr; fz = fM + fu } else { if (f6 < fO) { fO = f6 } if (f5 < fM) { fM = f5 } if (f6 + fr > fA) { fA = f6 + fr } if (f5 + fu > fz) { fz = f5 + fu } } fF.push({ angle: fy, srcX: ft, srcY: fv, destX: f6, destY: f5, width: fr, height: fu }) } var fV = { type: "line", textImg: fo, rank: fE, baseX: fS, baseY: fQ, arrWordPos: fF, minXOriginal: fO, minYOriginal: fM, maxXOriginal: fA, maxYOriginal: fz, text: "" }; fC.push(fV) } }, alterColor: function (fr, e, fq) { var fn = this._colorCtx, i = this._canvas2dMapMgr; fn.clearRect(0, 0, fr.width, fr.height); fn.drawImage(e, fr.srcX, fr.srcY, fr.width, fr.height, 0, 0, fr.width, fr.height); var fp = fn.getImageData(0, 0, fr.width, fr.height), fo = i.getFilterImageData(fp, fq); fn.putImageData(fo, 0, 0) }, drawIconAndText: function (fD, fC, e) { var fu = this.ratio; var fs = this.sizeRatio / fu; var fw = 2 / fu; var fO = this; for (var fG = 0, fE = fC.length; fG < fE; fG++) { var fv = fC[fG]; if (fv.isDel == false) { var fp = fv.baseDrawX; var fo = fv.baseDrawY; if (fv.type == "fixed") { var fr = fv.iconPos, fH = fv.textPos, fA = fv.textImg, fK = fv.startScale; if (fr && fK <= e) { var fn = this._iconCache[fr.iconType]; if (fn) { if (fn.img) { fD.drawImage(fn.img, 0, 0, fn.img.width, fn.img.height, Math.round(fp * fu + (fr.drawX - fp) / fw), Math.round(fo * fu + (fr.drawY - fo) / fw), fr.width / fw, fr.height / fw) } else { fn.drawLabels.push(fv) } } else { if (!fn) { this._iconCache[fr.iconType] = { img: null, drawLabels: [fv] }; var fQ = new Image(); fQ._iconName = fr.iconType; fQ.onload = function () { var fW = fO._iconCache[this._iconName]; fW.img = this; this.onload = null; for (var fS = 0; fS < fW.drawLabels.length; fS++) { var fU = fW.drawLabels[fS]; var fT = fU.baseDrawX; var fR = fU.baseDrawY; var fV = fU.iconPos; fD.drawImage(this, 0, 0, this.width, this.height, Math.round(fT * fu + (fV.drawX - fT) / fw), Math.round(fR * fu + (fV.drawY - fR) / fw), fV.width / fw, fV.height / fw) } fW.drawPos = [] }; fQ.src = dp.getIconSetPath(fO._map.config.style) + fr.iconType + ".png" } } } if (fH && fA && fK <= e) { for (var ft = 0; ft < fH.length; ft++) { var fB = fH[ft]; if (!fv._tempRank) { fD.drawImage(fA, fB.srcX, fB.srcY, fB.width, fB.height, Math.round(fp * fu + (fB.drawX - fp) / fs), Math.round(fo * fu + (fB.drawY - fo) / fs), fB.width / fs, fB.height / fs) } else { this.alterColor(fB, fA, fv._tempRank); fD.drawImage(this._colorCvs, 0, 0, fB.width, fB.height, Math.round(fp * fu + (fB.drawX - fp) / fs), Math.round(fo * fu + (fB.drawY - fo) / fs), fB.width / fs, fB.height / fs) } } } } else { var fq = fv.arrWordPos, fA = fv.textImg, fz = fv.tileX, fx = fv.tileY; for (var fF = 0, fy = fq.length; fF < fy; fF++) { var fI = fq[fF]; var fP = Math.round(fz + fI.destX); var fN = Math.round(fx + fI.destY); var fJ = fI.angle; fP = fp * fu + fP - fp; fN = fo * fu + fN - fo; if (fJ > 10 && fJ < 350) { fD.save(); var fM = Math.round(fP + fI.width / 2); var fL = Math.round(fN + fI.height / 2); fD.translate(fM, fL); fD.rotate(-fJ / 180 * Math.PI); fD.drawImage(fA, fI.srcX, fI.srcY, fI.width, fI.height, -Math.round(fI.width / 2), -Math.round(fI.height / 2), fI.width / fs, fI.height / fs); fD.restore() } else { fD.drawImage(fA, fI.srcX, fI.srcY, fI.width, fI.height, fP, fN, fI.width / fs, fI.height / fs) } } } } } }, isCollide: function (fq, fz, fy, e, fs, fn, fu) { for (var fp = 0, fo = fn.length; fp < fo; fp++) { var ft = fn[fp], fr = 1 / Math.pow(2, fu + 1), fx = fr * ft[3] / 2, fw = fr * ft[4] / 2, fv = ft[0]; if (fv != fq) { if (!(fz + e < ft[1] - fx || fz > ft[1] + ft[3] + fx || fy + fs < ft[2] - fw || fy > ft[2] + ft[4] + fw)) { return true } } } return false }, zoomingIconAndText: function (fO, fI, fo, fM, fN, gf, fV, fw, f1, fU, fF) { var gg = this.ratio; var fx = this.sizeRatio / gg; var gh = 2 / gg; var gr = gg / 2; var gb = fM.x; var ga = fM.y; var fP = 2 * gg; if (fF !== 0) { ga += fU } var fA = undefined, ft = undefined, fq = undefined, fv = undefined, fE = undefined; var f0 = gf > 0 ? true : false; if (!f0) { fA = []; var f4 = 1 - fV } for (var gn = 0, gl = fI.length; gn < gl; gn++) { var gi = fI[gn]; if (gi.isDel == false) { var gs = gi.baseDrawX; var gp = gi.baseDrawY; fO.save(); fO.translate(-fw * gg, -f1 * gg); if (gi.isFadeout) { if (!f0 && gi._schedule <= fV && !gi._isIgnore) { fO.globalAlpha = f4; gi._schedule = fV } else { gi._isIgnore = true; continue } } if (gi.type == "fixed") { var fQ = gi.iconPos, fX = gi.textPos, fr = gi.textImg, fR = gi.startScale; var fn; var f8 = 0; if (fQ) { f8 = fP } if (fQ && !gi.iconImg && this._iconCache[fQ.iconType]) { fn = this._iconCache[fQ.iconType].img } if (fQ && fR <= fN && fn) { fv = fQ.width; fE = fQ.height; ft = (gb + (gs - gb) * fo) * gg - fv / 2 / gh; fq = (ga + (gp - ga) * fo) * gg - fE / 2 / gh + fF; if (!f0 && this.isCollide(gn, ft, fq, fv, fE, fA, gf)) { gi.isFadeout = true } fO.drawImage(fn, fQ.srcX, fQ.srcY, fn.width, fn.height, Math.round(ft), Math.round(fq), fv / gh, fE / gh); !f0 && fA.push([gn, ft, fq, fv, fE]) } if (fX && fr && fR <= fN) { var fW; var fY; var fH = 0; var fT = 0; if (fQ) { fH = fQ.width; fT = fQ.height } var f9 = fX.length; var fz = 0; var fZ = 0; for (var fJ = 0; fJ < f9; fJ++) { var gk = fX[fJ]; fZ += gk.height; if (fz < gk.width) { fz = gk.width } } fZ += (fJ - 1) * fP; if (!f0 && this.isCollide(gn, ft, fq, fz, fZ, fA, gf)) { gi.isFadeout = true } var gj = 0; for (var fJ = 0; fJ < f9; fJ++) { var gk = fX[fJ]; switch (gi.direction) { case e3: fW = -(fH / 2 / gh + gk.width + f8); fY = -fZ / 2 + gj + fP * fJ; break; case fh: fW = fH / 2 / gh + f8; fY = -fZ / 2 + gj + fP * fJ; break; case dx: fW = -gk.width / 2; fY = -fT / 2 / gh - fZ + gj - fP * (fJ + 1); break; case cD: fW = -gk.width / 2; fY = fT / 2 / gh + gj + fP * (fJ + 1); break; case cB: fW = -gk.width / 2; fY = -fZ / 2 + gj + fP * fJ; break }gj += gk.height; ft = (gb + (gs - gb) * fo) * gg + fW / fx; fq = (ga + (gp - ga) * fo) * gg + fY / fx; +fF; fv = gk.width; fE = gk.height; if (!gi._tempRank) { fO.drawImage(fr, gk.srcX, gk.srcY, fv, fE, Math.round(ft), Math.round(fq), fv / fx, fE / fx) } else { this.alterColor(gk, fr, gi._tempRank); fO.drawImage(this._colorCvs, 0, 0, fv, fE, Math.round(ft), Math.round(fq), fv / fx, fE / fx) } !f0 && fA.push([gn, ft, fq, fv, fE]) } } } else { var fG = gi.arrWordPos, fr = gi.textImg, gq = gi.tileX, go = gi.tileY; var fy = fG[0]; var fu = Math.round(gq + fy.destX); var fs = Math.round(go + fy.destY); for (var gm = 0, f7 = fG.length; gm < f7; gm++) { var ge = fG[gm]; var gu = Math.round(gq + ge.destX); var gt = Math.round(go + ge.destY); var fL = ge.angle; var f6 = Math.round((gb + (gs - gb) * fo) * gg - fy.width / 2 + gu - fu); var f5 = Math.round((ga + (gp - ga) * fo) * gg - fy.height / 2 + gt - fs); ft = f6; fq = f5; fv = ge.width; fE = ge.height; if (!f0 && this.isCollide(gn, ft, fq, fv, fE, fA, gf)) { gi.isFadeout = true } if (fL > 10 && fL < 350) { var gd = f6 + ge.width / 2; var gc = f5 + ge.height / 2; var fp = fL / 180 * Math.PI; var fS = Math.cos(fp); var fB = Math.sin(fp); var f3 = fS; var fC = fS; var f2 = fB; var fD = -fB; var fK = gd - gd * fS - gc * fB; var e = gc + gd * fB - gc * fS; fO.save(); fO.transform(f3, fD, f2, fC, fK, e); fO.drawImage(fr, ge.srcX, ge.srcY, fv, fE, ft, fq, fv / fx, fE / fx); fO.restore() } else { fO.drawImage(fr, ge.srcX, ge.srcY, fv, fE, ft, fq, fv / fx, fE / fx) } !f0 && fA.push([gn, ft, fq, fv, fE]) } } fO.restore() } } } }); function eF(e) { this.initVars(e) } x.extend(eF.prototype, { initVars: function (e) { this._map = e._map; this._canvas2dMapMgr = e; this.base64Prefix = "data:image/png;base64,"; this.bizData = null; this.objTextsPng = null; this.arrIconsPng = null; this.bizLabels = null }, proecessBizData: function (fq, fu) { var fs = this; this.bizData = fq; this.objTextsPng = null; this.arrIconsPng = null; var fn = fq.textsPng; var fw = fq.iconsPng; if (!fn || !fw) { return } var ft = new Image(); ft.onload = function () { fs.objTextsPng = this; fs.calcIconAndTextInfo(fu); this.onload = null }; ft.src = this.base64Prefix + fn; var fv = fw.length; var e = []; for (var fp = 0; fp < fv; fp++) { var fr = fw[fp]; var fo = new Image(); (function (i) { fo.onload = function () { fv--; e[i] = this; if (fv === 0) { fs.arrIconsPng = e; fs.calcIconAndTextInfo(fu) } this.onload = null } })(fp); fo.src = this.base64Prefix + fr } }, calcIconAndTextInfo: function (fx) { if (this.objTextsPng && this.arrIconsPng) { var ft = this.bizData; var fr = ft.pois; var e = []; for (var fu = 0, fq = fr.length; fu < fq; fu++) { var fo = fr[fu]; var fs = this.arrIconsPng[fo.iconPng]; var fp = fs.height / 2; var fw = { type: "fixed", name: "", textImg: this.objTextsPng, iconImg: fs, rank: fo.rank, iconPos: { srcX: 0, srcY: 0, destX: -fs.width / 2, destY: -fp / 2, width: fs.width, height: fp, geoX: fo.x, geoY: fo.y, iconType: "vectorCustom" }, textPos: this.calcTextPos(fo.pos, fs), startScale: fo.from < 12 ? 12 : fo.from, guid: fo.guid, guidExt: 1, adver_log: fo.adver_log || "" }; var fn = { type: "fixed", textDirLeft: "left", name: "", textImg: this.objTextsPng, iconImg: fs, rank: fo.rank, iconPos: { srcX: 0, srcY: 0, destX: -fs.width / 2, destY: -fp / 2, width: fs.width, height: fp, geoX: fo.x, geoY: fo.y, iconType: "vectorCustom" }, textPos: this.calcTextPosLeft(fo.pos, fs), startScale: fo.from < 12 ? 12 : fo.from, guid: fo.guid, guidExt: 1, adver_log: fo.adver_log || "" }; var fv = [fw, fn]; e.push(fv) } this.bizLabels = e; fx && fx() } }, calcTextPos: function (fr, fn) { var i = []; var fq = fr.length / 4; var fp = fn.width / 2; if (fq === 1) { var fo = { srcX: fr[0], srcY: fr[1], destX: fp, destY: -fr[3] / 2, width: fr[2], height: fr[3] }; i.push(fo) } else { var fo = { srcX: fr[0], srcY: fr[1], destX: fp, destY: -fr[3], width: fr[2], height: fr[3] }; var e = { srcX: fr[4], srcY: fr[5], destX: fp, destY: 0, width: fr[6], height: fr[7] }; i.push(fo); i.push(e) } return i }, calcTextPosLeft: function (fr, fn) { var i = []; var fq = fr.length / 4; var fp = fn.width / 2; if (fq === 1) { var fo = { srcX: fr[0], srcY: fr[1], destX: -fp - fr[2], destY: -fr[3] / 2, width: fr[2], height: fr[3] }; i.push(fo) } else { var fo = { srcX: fr[0], srcY: fr[1], destX: -fp - fr[2], destY: -fr[3], width: fr[2], height: fr[3] }; var e = { srcX: fr[4], srcY: fr[5], destX: -fp - fr[2], destY: 0, width: fr[6], height: fr[7] }; i.push(fo); i.push(e) } return i }, clearBizData: function () { this.bizData = null; this.bizLabels = null } }); function bU() { } x.extend(bU.prototype, { centerAndZoomIn: function (fn, fu, fv) { fv = fv || {}; if (!this.loaded) { this.firstTileLoad = false } fu = this._getProperZoom(fu).zoom; if (fv.noAnimation !== true && this.loaded) { var fq = this._ifUseAnimation(fn, fu); if (fq) { this.flyToIn(fn, fu, fv); return } } var fs = this; if (!fn && !fu) { return } if (fn && !fn.equals(this.centerPoint)) { this.fire(new aB("oncenter_changed")) } if (fu && fu !== this.zoomLevel) { this.fire(new aB("onzoom_changed")) } fn = fn || this.centerPoint; fu = fu || this.zoomLevel; fu = this._getProperZoom(fu).zoom; if (this.mapType === BMAP_EARTH_MAP) { if (!this._earth) { this.mapType = BMAP_NORMAL_MAP; this.temp.originMapType = BMAP_EARTH_MAP; function ft() { fs._earth = new aI.Earth(fs, { showRealSunlight: fs.config.showRealSunlight, showMilkyway: fs.config.showMilkyway, earthBackground: fs.config.earthBackground }); fs._proxyEarthEvents(); fs._changeEarthMapType(BMAP_EARTH_MAP); x.extend(fs, aI.EarthView.prototype); delete fs.temp.originMapType } cI.load("earth", function () { if (aI["FeatureStyle" + fs.config.style]) { ft() } else { fs.loadMapStyleFiles(function () { ft() }) } }) } } this.lastLevel = this.zoomLevel || fu; this.zoomLevel = fu; var fr = new aB("onload"); fr.point = fn; fr.zoom = fu; this.centerPoint = new e5(fn.lng, fn.lat); this.defaultZoomLevel = this.defaultZoomLevel || this.zoomLevel; this.defaultCenter = this.defaultCenter || this.centerPoint; if (this.mapType !== BMAP_EARTH_MAP) { this.centerPoint = this.restrictCenter(this.centerPoint) } if (!this.loaded && !(this.temp.originMapType === BMAP_EARTH_MAP)) { var i = this.config.defaultMaxBounds; var fp = new bT(i, "baidu", this.mapType); var fo = new bI({ mapType: this.mapType, copyright: fp, dataType: er, customLayer: false, baseLayer: true, tileTypeName: "na" }); fo._isInnerLayer = true; this.addTileLayer(fo); if (this.mapType === BMAP_SATELLITE_MAP && this._isHybridShow === true) { this._addHybirdMap() } this.baseLayerAdded = true; this.on("zoom_changed", function () { if (this._heading === 0) { return } if (this.getZoom() < 7 && this.config.restrictCenter === true) { fs.resetHeading() } }) } this.loaded = true; this.dispatchEvent(fr); fv.callback && fv.callback() }, _ifUseAnimation: function (fo, ft) { var fs = this.getSize(); var fn = { zoom: this.zoomLevel }; var fv = { zoom: ft }; var fu = this.pointToPixelIn(this.centerPoint); var fp = this.pointToPixelIn(fo, fn); var fr = this.pointToPixelIn(this.centerPoint, fv); var fx = this.pointToPixelIn(fo, fv); var fq = Math.abs(fu.x - fp.x); var i = Math.abs(fu.y - fp.y); var e = Math.abs(fr.x - fx.x); var fw = Math.abs(fr.y - fx.y); if ((fq > fs.width || i > fs.height) && (e > fs.width || fw > fs.height)) { return false } return true }, _setPlatformPosition: function (fv, fu, fx) { fx = fx || {}; if (fv === 0 && fu === 0 && !fx.point) { return } if (isNaN(fx.initMapOffsetX)) { fx.initMapOffsetX = this.offsetX } if (isNaN(fx.initMapOffsetY)) { fx.initMapOffsetY = this.offsetY } var fr = cr(this._heading); if (this._tilt > 0) { fu = fu / Math.cos(cr(this._tilt)) } var fw = fv * Math.cos(fr) + fu * Math.sin(fr); var ft = -fv * Math.sin(fr) + fu * Math.cos(fr); fw = fw + fx.initMapOffsetX; ft = ft + fx.initMapOffsetY; if (fx.point) { var i = this.restrictCenter(fx.point); if (!i.equals(this.centerPoint)) { this.centerPoint = i.clone(); this.fire(new aB("oncenter_changed")) } } else { var fo = this.offsetX - fw; var e = this.offsetY - ft; var fs = this.centerPoint.lng; var fq = this.centerPoint.lat; var fp = new e5(fs, fq); var fn = this.getZoomUnits(); this.centerPoint = this.restrictCenter(new e5(fp.lng + fo * fn, fp.lat - e * fn), fn); this.fire(new aB("oncenter_changed")) } this.offsetX = fw; this.offsetY = ft; this.dispatchEvent(new aB("onmoving")) }, restrictCenter: function (fo, fp) { if (this.config.restrictCenter === false) { return fo } fp = fp || this.getZoomUnits(); var fn = this.pixelToPointIn(new cP(0, 0), { center: fo }); var i = this.pixelToPointIn(new cP(0, this.height), { center: fo }); if (this.zoomLevel < 5) { if (fn.lat > bV.MAX_LAT && i.lat < bV.MIN_LAT) { var fq = bV.MAX_LAT - fo.lat; var e = fo.lat - bV.MIN_LAT; var fs; if (fq < e) { fs = fq / (this.height / 2) } else { fs = e / (this.height / 2) } var fr = 18 - c2(fs); this.zoomLevel = fr; return fo } } if (fn.lat > bV.MAX_LAT) { fo.lat = bV.MAX_LAT - this.height / 2 * fp } else { if (i.lat < bV.MIN_LAT) { fo.lat = bV.MIN_LAT + this.height / 2 * fp } } return fo }, zoomTo: function (e, fz, fA) { var fv = be[this.mapType]; if (!fv) { return } var fu = this._getProperZoom(e); e = fu.zoom; if (this.zoomLevel === e) { return } var fq = e; this.lastLevel = this.zoomLevel; fA = fA || {}; if (this.zoomEventStatus === "idle") { this.fire(new aB("onzoomstart")); this.zoomEventStatus = "zooming" } if (!fz && (this.getInfoWindow() && this.temp.infoWin && this.temp.infoWin.isOpen())) { fz = this.getInfoWindow().getPoint() } var fn; if (fz) { fn = this.pointToPixelIn(fz) } var fr = this.pixelToPointIn(fn); var fs = this.centerPoint.clone(); this.fixPoint = fz; this.fixPixel = fn; this.fixCenter = fs; this.mousePosMCPoint = fr; if (fA.noAnimation) { e = fu.zoom; this.zoomLevel = e; this.fire(new aB("onzoom_changed")); var fp = this.getCurrentMaxTilt(); if (this._tilt > fp) { this._tilt = fp } if (fz) { if (this._heading % 360 !== 0 || this._tilt > 0) { var i = this._webglMapCamera.fromScreenPixelToMC(fn.x, fn.y, { center: fs, zoom: this.zoomLevel }); if (i) { var fw = i.sub(fr); var fo = fs.sub(fw); this.centerPoint = this.restrictCenter(fo) } } else { var ft = this.getZoomUnits(); var fo = new e5(fz.lng - ft * (fn.x - this.width / 2), fz.lat + ft * (fn.y - this.height / 2)); this.centerPoint = this.restrictCenter(fo, ft) } this.fire(new aB("oncenter_changed")) } this._checkFireZoomend(); return } this._animationInfo.zoom = { current: this.zoomLevel, diff: e - this.zoomLevel, target: e }; var fx = this; fA.callback = function () { fx._checkFireZoomend() }; var fy = this._tilt; if (this.fixPoint || fy > bV.MAX_DRAG_TILT_L2) { fA.renderCallback = function () { var fE = fx.getCurrentMaxTilt(); if (fx._tilt > fE) { fx._tilt = fE } var fF = fx.fixPixel; if (!fx.fixPixel || !fx.fixPoint) { return } var fB = fx.fixPixel; var fL = fx.fixPoint; var fI = fx.fixCenter; var fG = fx.mousePosMCPoint; if (fx._heading % 360 !== 0 || fx._tilt > 0) { var fC = fx._webglMapCamera.fromScreenPixelToMC(fB.x, fB.y, { center: fI, zoom: fx.zoomLevel, tilt: fx._tilt }); if (fC) { var fK = fC.sub(fG); var fD = fI.sub(fK); fx.centerPoint = fx.restrictCenter(fD) } } else { var fH = fB; var fJ = fx.getZoomUnits(); var fD = new e5(fL.lng - fJ * (fH.x - fx.width / 2), fL.lat + fJ * (fH.y - fx.height / 2)); fx.centerPoint = fx.restrictCenter(fD, fJ) } fx.fire(new aB("oncenter_changed")) } } if (fA.fromMouseWheel === true) { this._startInfiniteZoomAnimation(fA); return } this._startAnimation(fA) }, _checkFireZoomend: function () { var e = this; if (e.fireZoomendTimer) { clearTimeout(e.fireZoomendTimer) } e.fireZoomendTimer = setTimeout(function () { if (e.zoomEventStatus === "zooming") { e.fire(new aB("onzoomend")); e.zoomEventStatus = "idle" } e.fireZoomendTimer = null }, 150) }, deepZoomMedia: function (e) { var i = this; if (!i.temp.isStdCtrlBusy) { i.temp.isStdCtrlBusy = true; i.deepZoomTo(i.zoomLevel + e); setTimeout(function () { i.temp.isStdCtrlBusy = false }, 400) } }, deepZoomTo: function (e) { this.zoomTo(e) }, flyToIn: function (fn, fS, fD) { fD = fD || {}; var fp = this._getProperZoom(fS); fS = fp.zoom; if (this.centerPoint.equals(fn) && this.zoomLevel === fS && typeof fD.heading !== "number" && typeof fD.tilt !== "number") { return } var e = this.getHeading() % 360; var fv = this.getTilt(); var fB = 0; var fF = 0; var fy = this.getBounds().containsPoint(fn); if (typeof fD.heading === "number") { fB = fD.heading } else { if (fy) { fB = e } } if (typeof fD.tilt === "number") { fF = fD.tilt } else { if (fy) { fF = fv } } this._heading = e; var fP = fB - e; var fL = fF - fv; var fz = this; var fr = this.zoomLevel; var fs = 1.42; var fH = this.zoomScale(fS - fr); var fU = this.getZoomUnits(); var fx = this.centerPoint.div(fU); var fV = fn.div(fU); var fO = this.worldSize(); var fK = fs; var fJ = Math.max(this.width, this.height); var fI = fJ / fH; var fw = fV.sub(fx).mag(); var i = fK * fK; function fR(fX) { var fW = (fI * fI - fJ * fJ + (fX ? -1 : 1) * i * i * fw * fw) / (2 * (fX ? fI : fJ) * i * fw); return Math.log(Math.sqrt(fW * fW + 1) - fW) } function fo(fW) { return (Math.exp(fW) - Math.exp(-fW)) / 2 } function ft(fW) { return (Math.exp(fW) + Math.exp(-fW)) / 2 } function fC(fW) { return fo(fW) / ft(fW) } var fu = fR(0); var fM = function (fW) { return (ft(fu) / ft(fu + fK * fW)) }; var fN = function (fW) { return fJ * ((ft(fu) * fC(fu + fK * fW) - fo(fu)) / i) / fw }; var fq = (fR(1) - fu) / fK; if (Math.abs(fw) < 0.000001 || fq === Infinity || isNaN(fq)) { if (Math.abs(fJ - fI) < 0.000001) { this._animationInfo.zoom = { current: this.zoomLevel, diff: fS - this.zoomLevel }; this._animationInfo.center = { current: this.centerPoint, diff: fn.sub(this.centerPoint) }; this._animationInfo.heading = { current: e, diff: fB - e }; this._animationInfo.tilt = { current: fv, diff: fF - fv }; this.setLock(true); this._startAnimation({ callback: function (fW) { fz.setLock(false); if (fD.callback) { fD.callback(fW) } }, duration: fD.duration }); return } var fT = fI < fJ ? -1 : 1; fq = Math.abs(Math.log(fI / fJ)) / fK; fN = function () { return 0 }; fM = function (fW) { return Math.exp(fT * fK * fW) } } var fQ = 1.7; if (fq < 0.3) { fQ = 0.8 } else { if (fq > 5) { fQ = (fq - 5) / 2 + fQ } } var fE = fD.duration || 1000 * fq / fQ; if (isNaN(fE)) { var fG = {}; for (var fA in fD) { fG[fA] = fD[fA]; fG.noAnimation = true } this.centerAndZoomIn(fn, fS, fG); return } this.fire(new aB("onmovestart")); this.fire(new aB("onzoomstart")); this.setLock(true); this._startAnimation({ duration: fE, renderCallback: function (fW, fX) { var fY = fW * fq; var f1 = fN(fY); var f0 = fr + fz.scaleZoom(1 / fM(fY)); if (f0 < fz.getMinZoom()) { f0 = fz.getMinZoom() } if (f0 > fz.getMaxZoom()) { f0 = fz.getMaxZoom() } if (f0 !== fz.zoomLevel) { fz.zoomLevel = f0; fz.fire(new aB("onzoom_changed")) } fz.centerPoint = fx.add(fV.sub(fx).mult(f1)).mult(fU); fz.fire(new aB("oncenter_changed")); if (typeof fB === "number") { var fZ = fW / 0.7; if (fZ > 1) { fZ = 1 } fz.setHeading(e + fP * fW, { noAnimation: true }) } if (typeof fF === "number") { fz.setTilt(fv + fL * fW, { noAnimation: true }) } }, callback: function (fW, fX) { fz.setLock(false); if (fX && fX.stop === true) { fz.fire(new aB("onmoveend")); fz.fire(new aB("onzoomend")); fD.callback && fD.callback(fW); return } if (fS !== fz.zoomLevel) { fz.zoomLevel = fS; fz.fire(new aB("onzoom_changed")) } fz.fire(new aB("onmoveend")); fz.fire(new aB("onzoomend")); fD.callback && fD.callback(fW) } }) }, zoomScale: function (e) { return Math.pow(2, e) }, scaleZoom: function (e) { return Math.log(e) / Math.LN2 }, panToIn: function (i, fn) { fn = fn || {}; if (!i || i.equals(this.centerPoint)) { fn.callback && fn.callback(); return } var fo = this.pointToPixelIn(i); var e = Math.round(this.width / 2); var fq = Math.round(this.height / 2); var fp = this._ifUseAnimation(i, this.zoomLevel); if (fn.noAnimation === true || fp === false) { this._panToIn(e - fo.x, fq - fo.y, i); fn.callback && fn.callback(); return } this.flyToIn(i, this.zoomLevel, fn) }, _panToIn: function (i, e, fo) { var fn = this.temp; if (fn.operating === true) { return } if (fn.dragAni) { fn.dragAni.stop(false, { readyToMove: true }); fn.dragAni = null } this.dispatchEvent(new aB("onmovestart")); this._setPlatformPosition(i, e, { point: fo }); this.dispatchEvent(new aB("onmoveend")) }, panBy: function (i, e, fn) { i = Math.round(i) || 0; e = Math.round(e) || 0; fn = fn || {}; if (Math.abs(i) <= this.width && Math.abs(e) <= this.height && fn.noAnimation !== true) { this._panBy(i, e, fn) } else { this._panToIn(i, e, fn.point); fn.callback && fn.callback() } }, _panBy: function (i, e, fp) { if (this.temp.operating === true) { return } fp = fp || {}; this.dispatchEvent(new aB("onmovestart")); var fo = this; var fn = fo.temp; fn.pl = fo.offsetX; fn.pt = fo.offsetY; if (fn.tlPan) { fn.tlPan.cancel() } if (fn.dragAni) { fn.dragAni.stop(false, { readyToMove: true }); fn.dragAni = null } fn.tlPan = new l({ fps: fp.fps || fo.config.fps, duration: fp.duration || fo.config.actionDuration, transition: fp.transition || bq.easeInOutQuad, render: function (fq) { this.terminative = fo.temp.operating; if (fo.temp.operating) { return } fo._setPlatformPosition(i * fq, e * fq, { initMapOffsetX: fn.pl, initMapOffsetY: fn.pt }) }, finish: function (fq) { fo.dispatchEvent(new aB("onmoveend")); fo.temp.tlPan = false; if (fo.temp.stopArrow === true) { fo.temp.stopArrow = false; if (fo.temp.arrow !== 0) { fo._arrow() } } } }) }, _startAnimation: function (i) { var fp = this._animationInfo; console.log(fp); var fn = this; i = i || {}; if (fn._ani) { fn._ani.stop(!!i.goToEnd, { stopCurrentAnimation: i.stopCurrentAnimation }) } if (fn._infiniteAni) { fn._infiniteAni.stop(); fn._infiniteAni = null } var fq = i.duration || 500; var fr = i.transition || bq.ease; var e = new aB("onanimation_start"); this.fire(e); if (i.unstopable) { fp = this._animationInfoUnstopable } var fo = new l({ duration: fq, transition: fr, render: function (fu, ft) { for (var fs in fp) { if (!fp.hasOwnProperty(fs)) { continue } var fw = fp[fs].current; var fv = fp[fs].diff; fn._setValueTick(fs, fw, fv, fu) } if (i.renderCallback) { i.renderCallback(fu, ft) } }, finish: function (fs) { fn.fire(new aB("onanimation_end")); if (i.unstopable) { fn._animationInfoUnstopable = {}; fn._unstopableAni = null } else { fn._ani = null; fn._animationInfo = {} } if (i.mapNeedCbk) { i.mapNeedCbk() } if (i.callback) { i.callback(fs) } }, onStop: function (fs) { fs = fs || {}; fn.fire(new aB("onanimation_end")); if (fs.stopCurrentAnimation) { fn._animationInfo = {} } fn._ani = null; if (i.mapNeedCbk) { i.mapNeedCbk() } if (i.callback) { i.callback(null, { stop: true }) } } }); if (i.unstopable) { fn._unstopableAni = fo } else { fn._ani = fo } }, _startInfiniteZoomAnimation: function (e) { var i = this; if (i._ani) { i._ani.stop(!!e.goToEnd, { stopCurrentAnimation: e.stopCurrentAnimation }) } if (i._infiniteAni) { return } this.fire(new aB("onanimation_start")); i._infiniteAni = new l({ duration: 10000, transition: bq.linear, render: function () { var fn = i._animationInfo.zoom; if (Math.abs(fn.current - fn.target) < 0.001) { i._setValue("zoom", fn.target); i._infiniteAni.stop(); return } fn.current += (fn.target - fn.current) * 0.35; i._setValue("zoom", fn.current); if (e.renderCallback) { e.renderCallback() } }, finish: function () { i._infiniteAni = null; i._animationInfo = {}; i.fire(new aB("onanimation_end")); if (e.callback) { e.callback() } }, onStop: function () { i._infiniteAni = null; i._animationInfo = {}; i.fire(new aB("onanimation_end")); if (e.callback) { e.callback() } } }) }, _setValue: function (e, fn) { if (e === "zoom") { this._preZoomLevel = this.zoomLevel; var i = this._getProperZoom(fn); fn = i.zoom; if (fn !== this.zoomLevel) { this.zoomLevel = fn; if (fn < 5) { this.restrictCenter(this.centerPoint) } this.fire(new aB("on" + e + "_changed")) } return } else { if (e === "center") { this.centerPoint = fn } } this["_" + e] = fn; this.fire(new aB("on" + e + "_changed")) }, _setValueTick: function (e, fp, fo, i) { if (e === "center") { var fn = new e5(fp.lng + fo.lng * i, fp.lat + fo.lat * i); this._setValue(e, fn); return } if (e === "zoom") { this._setValue(e, Math.pow(fp, 1 - i) * Math.pow(fp + fo, i)); return } this._setValue(e, fp + fo * i) }, setHeading: function (fo, i) { i = i || {}; if (fo === this._heading) { i.callback && i.callback(); return } var fn = d5(this._heading, 360); var e = d5(fo, 360); if (e === fn) { this._heading = fo; i.callback && i.callback(); return } if (i.noAnimation) { this._setValue("heading", fo); i.callback && i.callback(); return } if (i.unstopable) { this._animationInfoUnstopable.heading = { current: this._heading, diff: fo - this._heading } } else { this._animationInfo.heading = { current: this._heading, diff: fo - this._heading } } this._startAnimation(i) }, resetHeading: function (e) { var i = this._heading; while (i < 0) { i += 360 } i = i % 360; if (i > 180) { i -= 360 } this._heading = i; e = e || {}; e.unstopable = true; this.setHeading(0, e) }, getHeading: function () { return this._heading }, setTilt: function (e, i) { i = i || {}; if (e === this._tilt) { i.callback && i.callback(); return } if (e > bV.MAX_TILT) { e = bV.MAX_TILT } if (e < bV.MIN_TILT) { e = bV.MIN_TILT } if (i && i.noAnimation) { this._setValue("tilt", e); i.callback && i.callback(); return } this._animationInfo.tilt = { current: this._tilt, diff: e - this._tilt }; this._startAnimation(i) }, getTilt: function () { return this._tilt }, getCenterIn: function () { return this.centerPoint }, getZoom: function () { return this.zoomLevel }, getCameraPosition: function (fn) { fn = fn || {}; var e = fn.center || this.centerPoint; var fo = fn.zoom || this.zoomLevel; var fr = typeof fn.heading === "number" ? fn.heading : this._heading; var i = typeof fn.tilt === "number" ? fn.tilt : this._tilt; var fq = this._webglMapCamera.generateMVMatrix(e, fo, fr, i); var fp = mat4.create(Float32Array); mat4.invert(fp, fq); return this._webglMapCamera.getPosition(fp) } }); function dV(i) { this._jobQueue = []; this._idleOnlyJobQueue = []; var e = this; this.isIdle = true; i.on("updateframe", function (fo) { var fn = 12 - fo.frameTime; fn = fn < 1 ? 1 : fn; e.isIdle = false; if (e.idleWorkTimer) { clearInterval(e.idleWorkTimer); e.idleWorkTimer = null } e.runJobs(fn) }); this._idleWorkerTicker = (function (fn) { return function () { if (fn.isIdle) { fn.runJobs(); fn.runIdleOnlyJobs() } } })(this); i.on("mapglidle", function () { e.isIdle = true; e.runJobs(); e.runIdleOnlyJobs(); e.idleWorkTimer = setInterval(e._idleWorkerTicker, dV.MAX_IDLE_TIME) }) } dV.MAX_IDLE_TIME = 50; dV.MAX_FRAME_TIME = 6; dV.prototype.runJobs = function (i) { if (this._jobQueue.length === 0) { return } var fo = dL(); var e = 0; i = i || dV.MAX_FRAME_TIME; while (this._jobQueue.length && e < i) { var fn = this._jobQueue.shift(); if (fn.state !== "invalid") { fn.call() } e = dL() - fo } }; dV.prototype.runIdleOnlyJobs = function () { if (this._idleOnlyJobQueue.length === 0) { return } var fn = dL(); var e = 0; while (this._idleOnlyJobQueue.length && e < dV.MAX_IDLE_TIME) { var i = this._idleOnlyJobQueue.shift(); if (i.state !== "invalid") { i.call() } e = dL() - fn } }; dV.prototype.checkIdleRunning = function () { if (this.isIdle && !this.idleWorkTimer) { this.runJobs(); this.runIdleOnlyJobs(); this.idleWorkTimer = setInterval(this._idleWorkerTicker, 50) } }; dV.prototype.addJob = function (e) { this._jobQueue.push(e); this.checkIdleRunning() }; dV.prototype.clearJobs = function () { this._jobQueue.length = 0; this._idleOnlyJobQueue.length = 0 }; dV.prototype.addIdleOnlyJob = function (e) { this._idleOnlyJobQueue.push(e); this.checkIdleRunning() }; var bi = {}; (function (fr) { if (!fv) { var fv = 0.000001 } if (!i) { var i = (typeof Float32Array !== "undefined") ? Float32Array : Array } if (!fp) { var fp = Math.random } var fn = {}; var fq = Math.PI / 180; fn.toRadian = function (fw) { return fw * fq }; var fu = {}; fu.create = function (fx) { fx = fx || i; var fw = new fx(2); fw[0] = 0; fw[1] = 0; return fw }; fu.clone = function (fw, fy) { fy = fy || i; var fx = new fy(2); fx[0] = fw[0]; fx[1] = fw[1]; return fx }; fu.fromValues = function (fw, fz, fy) { fy = fy || i; var fx = new fy(2); fx[0] = fw; fx[1] = fz; return fx }; fu.copy = function (fx, fw) { fx[0] = fw[0]; fx[1] = fw[1]; return fx }; fu.set = function (fx, fw, fy) { fx[0] = fw; fx[1] = fy; return fx }; fu.add = function (fy, fx, fw) { fy[0] = fx[0] + fw[0]; fy[1] = fx[1] + fw[1]; return fy }; fu.subtract = function (fy, fx, fw) { fy[0] = fx[0] - fw[0]; fy[1] = fx[1] - fw[1]; return fy }; fu.sub = fu.subtract; fu.multiply = function (fy, fx, fw) { fy[0] = fx[0] * fw[0]; fy[1] = fx[1] * fw[1]; return fy }; fu.mul = fu.multiply; fu.divide = function (fy, fx, fw) { fy[0] = fx[0] / fw[0]; fy[1] = fx[1] / fw[1]; return fy }; fu.div = fu.divide; fu.min = function (fy, fx, fw) { fy[0] = Math.min(fx[0], fw[0]); fy[1] = Math.min(fx[1], fw[1]); return fy }; fu.max = function (fy, fx, fw) { fy[0] = Math.max(fx[0], fw[0]); fy[1] = Math.max(fx[1], fw[1]); return fy }; fu.scale = function (fy, fx, fw) { fy[0] = fx[0] * fw; fy[1] = fx[1] * fw; return fy }; fu.scaleAndAdd = function (fy, fx, fw, fz) { fy[0] = fx[0] + (fw[0] * fz); fy[1] = fx[1] + (fw[1] * fz); return fy }; fu.distance = function (fy, fx) { var fw = fx[0] - fy[0], fz = fx[1] - fy[1]; return Math.sqrt(fw * fw + fz * fz) }; fu.dist = fu.distance; fu.squaredDistance = function (fy, fx) { var fw = fx[0] - fy[0], fz = fx[1] - fy[1]; return fw * fw + fz * fz }; fu.sqrDist = fu.squaredDistance; fu.length = function (fx) { var fw = fx[0], fy = fx[1]; return Math.sqrt(fw * fw + fy * fy) }; fu.len = fu.length; fu.squaredLength = function (fx) { var fw = fx[0], fy = fx[1]; return fw * fw + fy * fy }; fu.sqrLen = fu.squaredLength; fu.negate = function (fx, fw) { fx[0] = -fw[0]; fx[1] = -fw[1]; return fx }; fu.normalize = function (fz, fy) { var fx = fy[0], fA = fy[1]; var fw = fx * fx + fA * fA; if (fw > 0) { fw = 1 / Math.sqrt(fw); fz[0] = fy[0] * fw; fz[1] = fy[1] * fw } return fz }; fu.dot = function (fx, fw) { return fx[0] * fw[0] + fx[1] * fw[1] }; fu.cross = function (fy, fx, fw) { var fz = fx[0] * fw[1] - fx[1] * fw[0]; fy[0] = fy[1] = 0; fy[2] = fz; return fy }; fu.lerp = function (fy, fx, fw, fz) { var fB = fx[0], fA = fx[1]; fy[0] = fB + fz * (fw[0] - fB); fy[1] = fA + fz * (fw[1] - fA); return fy }; fu.random = function (fw, fy) { fy = fy || 1; var fx = fp() * 2 * Math.PI; fw[0] = Math.cos(fx) * fy; fw[1] = Math.sin(fx) * fy; return fw }; fu.transformMat2 = function (fz, fy, fx) { var fw = fy[0], fA = fy[1]; fz[0] = fx[0] * fw + fx[2] * fA; fz[1] = fx[1] * fw + fx[3] * fA; return fz }; fu.transformMat2d = function (fz, fy, fx) { var fw = fy[0], fA = fy[1]; fz[0] = fx[0] * fw + fx[2] * fA + fx[4]; fz[1] = fx[1] * fw + fx[3] * fA + fx[5]; return fz }; fu.transformMat3 = function (fz, fy, fx) { var fw = fy[0], fA = fy[1]; fz[0] = fx[0] * fw + fx[3] * fA + fx[6]; fz[1] = fx[1] * fw + fx[4] * fA + fx[7]; return fz }; fu.transformMat4 = function (fz, fy, fx) { var fw = fy[0], fA = fy[1]; fz[0] = fx[0] * fw + fx[4] * fA + fx[12]; fz[1] = fx[1] * fw + fx[5] * fA + fx[13]; return fz }; fu.rotate = function (fz, fx, fw, fD) { var fC = fx[0] - fw[0]; var fB = fx[1] - fw[1]; var fy = Math.sin(fD); var fA = Math.cos(fD); fz[0] = fC * fA - fB * fy + fw[0]; fz[1] = fC * fy + fB * fA + fw[1]; return fz }; fu.forEach = (function () { var fw = fu.create(); return function (fz, fD, fE, fC, fB, fx) { var fA, fy; if (!fD) { fD = 2 } if (!fE) { fE = 0 } if (fC) { fy = Math.min((fC * fD) + fE, fz.length) } else { fy = fz.length } for (fA = fE; fA < fy; fA += fD) { fw[0] = fz[fA]; fw[1] = fz[fA + 1]; fB(fw, fw, fx); fz[fA] = fw[0]; fz[fA + 1] = fw[1] } return fz } })(); fu.str = function (fw) { return "vec2(" + fw[0] + ", " + fw[1] + ")" }; fr.vec2 = fu; var ft = {}; ft.create = function (fx) { fx = fx || i; var fw = new fx(3); fw[0] = 0; fw[1] = 0; fw[2] = 0; return fw }; ft.clone = function (fw, fy) { fy = fy || i; var fx = new fy(3); fx[0] = fw[0]; fx[1] = fw[1]; fx[2] = fw[2]; return fx }; ft.fromValues = function (fw, fA, fy, fz) { fz = fz || i; var fx = new fz(3); fx[0] = fw; fx[1] = fA; fx[2] = fy; return fx }; ft.copy = function (fx, fw) { fx[0] = fw[0]; fx[1] = fw[1]; fx[2] = fw[2]; return fx }; ft.set = function (fx, fw, fz, fy) { fx[0] = fw; fx[1] = fz; fx[2] = fy; return fx }; ft.add = function (fy, fx, fw) { fy[0] = fx[0] + fw[0]; fy[1] = fx[1] + fw[1]; fy[2] = fx[2] + fw[2]; return fy }; ft.subtract = function (fy, fx, fw) { fy[0] = fx[0] - fw[0]; fy[1] = fx[1] - fw[1]; fy[2] = fx[2] - fw[2]; return fy }; ft.sub = ft.subtract; ft.multiply = function (fy, fx, fw) { fy[0] = fx[0] * fw[0]; fy[1] = fx[1] * fw[1]; fy[2] = fx[2] * fw[2]; return fy }; ft.mul = ft.multiply; ft.divide = function (fy, fx, fw) { fy[0] = fx[0] / fw[0]; fy[1] = fx[1] / fw[1]; fy[2] = fx[2] / fw[2]; return fy }; ft.div = ft.divide; ft.min = function (fy, fx, fw) { fy[0] = Math.min(fx[0], fw[0]); fy[1] = Math.min(fx[1], fw[1]); fy[2] = Math.min(fx[2], fw[2]); return fy }; ft.max = function (fy, fx, fw) { fy[0] = Math.max(fx[0], fw[0]); fy[1] = Math.max(fx[1], fw[1]); fy[2] = Math.max(fx[2], fw[2]); return fy }; ft.scale = function (fy, fx, fw) { fy[0] = fx[0] * fw; fy[1] = fx[1] * fw; fy[2] = fx[2] * fw; return fy }; ft.scaleAndAdd = function (fy, fx, fw, fz) { fy[0] = fx[0] + (fw[0] * fz); fy[1] = fx[1] + (fw[1] * fz); fy[2] = fx[2] + (fw[2] * fz); return fy }; ft.distance = function (fy, fx) { var fw = fx[0] - fy[0], fA = fx[1] - fy[1], fz = fx[2] - fy[2]; return Math.sqrt(fw * fw + fA * fA + fz * fz) }; ft.dist = ft.distance; ft.squaredDistance = function (fy, fx) { var fw = fx[0] - fy[0], fA = fx[1] - fy[1], fz = fx[2] - fy[2]; return fw * fw + fA * fA + fz * fz }; ft.sqrDist = ft.squaredDistance; ft.length = function (fx) { var fw = fx[0], fz = fx[1], fy = fx[2]; return Math.sqrt(fw * fw + fz * fz + fy * fy) }; ft.len = ft.length; ft.squaredLength = function (fx) { var fw = fx[0], fz = fx[1], fy = fx[2]; return fw * fw + fz * fz + fy * fy }; ft.sqrLen = ft.squaredLength; ft.negate = function (fx, fw) { fx[0] = -fw[0]; fx[1] = -fw[1]; fx[2] = -fw[2]; return fx }; ft.normalize = function (fz, fy) { var fx = fy[0], fB = fy[1], fA = fy[2]; var fw = fx * fx + fB * fB + fA * fA; if (fw > 0) { fw = 1 / Math.sqrt(fw); fz[0] = fy[0] * fw; fz[1] = fy[1] * fw; fz[2] = fy[2] * fw } return fz }; ft.dot = function (fx, fw) { return fx[0] * fw[0] + fx[1] * fw[1] + fx[2] * fw[2] }; ft.cross = function (fx, fC, fB) { var fw = fC[0], fE = fC[1], fD = fC[2], fA = fB[0], fz = fB[1], fy = fB[2]; fx[0] = fE * fy - fD * fz; fx[1] = fD * fA - fw * fy; fx[2] = fw * fz - fE * fA; return fx }; ft.lerp = function (fy, fx, fw, fz) { var fC = fx[0], fB = fx[1], fA = fx[2]; fy[0] = fC + fz * (fw[0] - fC); fy[1] = fB + fz * (fw[1] - fB); fy[2] = fA + fz * (fw[2] - fA); return fy }; ft.random = function (fw, fA) { fA = fA || 1; var fy = fp() * 2 * Math.PI; var fz = (fp() * 2) - 1; var fx = Math.sqrt(1 - fz * fz) * fA; fw[0] = Math.cos(fy) * fx; fw[1] = Math.sin(fy) * fx; fw[2] = fz * fA; return fw }; ft.transformMat4 = function (fz, fy, fx) { var fw = fy[0], fB = fy[1], fA = fy[2]; fz[0] = fx[0] * fw + fx[4] * fB + fx[8] * fA + fx[12]; fz[1] = fx[1] * fw + fx[5] * fB + fx[9] * fA + fx[13]; fz[2] = fx[2] * fw + fx[6] * fB + fx[10] * fA + fx[14]; return fz }; ft.transformMat3 = function (fz, fy, fx) { var fw = fy[0], fB = fy[1], fA = fy[2]; fz[0] = fw * fx[0] + fB * fx[3] + fA * fx[6]; fz[1] = fw * fx[1] + fB * fx[4] + fA * fx[7]; fz[2] = fw * fx[2] + fB * fx[5] + fA * fx[8]; return fz }; ft.transformQuat = function (fC, fI, fw) { var fJ = fI[0], fH = fI[1], fG = fI[2], fE = fw[0], fD = fw[1], fB = fw[2], fF = fw[3], fz = fF * fJ + fD * fG - fB * fH, fy = fF * fH + fB * fJ - fE * fG, fx = fF * fG + fE * fH - fD * fJ, fA = -fE * fJ - fD * fH - fB * fG; fC[0] = fz * fF + fA * -fE + fy * -fB - fx * -fD; fC[1] = fy * fF + fA * -fD + fx * -fE - fz * -fB; fC[2] = fx * fF + fA * -fB + fz * -fD - fy * -fE; return fC }; ft.rotateX = function (fy, fx, fw, fB) { var fA = [], fz = []; fA[0] = fx[0] - fw[0]; fA[1] = fx[1] - fw[1]; fA[2] = fx[2] - fw[2]; fz[0] = fA[0]; fz[1] = fA[1] * Math.cos(fB) - fA[2] * Math.sin(fB); fz[2] = fA[1] * Math.sin(fB) + fA[2] * Math.cos(fB); fy[0] = fz[0] + fw[0]; fy[1] = fz[1] + fw[1]; fy[2] = fz[2] + fw[2]; return fy }; ft.rotateY = function (fy, fx, fw, fB) { var fA = [], fz = []; fA[0] = fx[0] - fw[0]; fA[1] = fx[1] - fw[1]; fA[2] = fx[2] - fw[2]; fz[0] = fA[2] * Math.sin(fB) + fA[0] * Math.cos(fB); fz[1] = fA[1]; fz[2] = fA[2] * Math.cos(fB) - fA[0] * Math.sin(fB); fy[0] = fz[0] + fw[0]; fy[1] = fz[1] + fw[1]; fy[2] = fz[2] + fw[2]; return fy }; ft.rotateZ = function (fy, fx, fw, fB) { var fA = [], fz = []; fA[0] = fx[0] - fw[0]; fA[1] = fx[1] - fw[1]; fA[2] = fx[2] - fw[2]; fz[0] = fA[0] * Math.cos(fB) - fA[1] * Math.sin(fB); fz[1] = fA[0] * Math.sin(fB) + fA[1] * Math.cos(fB); fz[2] = fA[2]; fy[0] = fz[0] + fw[0]; fy[1] = fz[1] + fw[1]; fy[2] = fz[2] + fw[2]; return fy }; ft.forEach = (function () { var fw = ft.create(); return function (fz, fD, fE, fC, fB, fx) { var fA, fy; if (!fD) { fD = 3 } if (!fE) { fE = 0 } if (fC) { fy = Math.min((fC * fD) + fE, fz.length) } else { fy = fz.length } for (fA = fE; fA < fy; fA += fD) { fw[0] = fz[fA]; fw[1] = fz[fA + 1]; fw[2] = fz[fA + 2]; fB(fw, fw, fx); fz[fA] = fw[0]; fz[fA + 1] = fw[1]; fz[fA + 2] = fw[2] } return fz } })(); ft.str = function (fw) { return "vec3(" + fw[0] + ", " + fw[1] + ", " + fw[2] + ")" }; fr.vec3 = ft; var fs = {}; fs.create = function (fx) { fx = fx || i; var fw = new fx(4); fw[0] = 0; fw[1] = 0; fw[2] = 0; fw[3] = 0; return fw }; fs.clone = function (fw, fy) { fy = fy || i; var fx = new fy(4); fx[0] = fw[0]; fx[1] = fw[1]; fx[2] = fw[2]; fx[3] = fw[3]; return fx }; fs.fromValues = function (fw, fB, fz, fx, fA) { fA = fA || i; var fy = new fA(4); fy[0] = fw; fy[1] = fB; fy[2] = fz; fy[3] = fx; return fy }; fs.copy = function (fx, fw) { fx[0] = fw[0]; fx[1] = fw[1]; fx[2] = fw[2]; fx[3] = fw[3]; return fx }; fs.set = function (fy, fw, fA, fz, fx) { fy[0] = fw; fy[1] = fA; fy[2] = fz; fy[3] = fx; return fy }; fs.add = function (fy, fx, fw) { fy[0] = fx[0] + fw[0]; fy[1] = fx[1] + fw[1]; fy[2] = fx[2] + fw[2]; fy[3] = fx[3] + fw[3]; return fy }; fs.subtract = function (fy, fx, fw) { fy[0] = fx[0] - fw[0]; fy[1] = fx[1] - fw[1]; fy[2] = fx[2] - fw[2]; fy[3] = fx[3] - fw[3]; return fy }; fs.sub = fs.subtract; fs.multiply = function (fy, fx, fw) { fy[0] = fx[0] * fw[0]; fy[1] = fx[1] * fw[1]; fy[2] = fx[2] * fw[2]; fy[3] = fx[3] * fw[3]; return fy }; fs.mul = fs.multiply; fs.divide = function (fy, fx, fw) { fy[0] = fx[0] / fw[0]; fy[1] = fx[1] / fw[1]; fy[2] = fx[2] / fw[2]; fy[3] = fx[3] / fw[3]; return fy }; fs.div = fs.divide; fs.min = function (fy, fx, fw) { fy[0] = Math.min(fx[0], fw[0]); fy[1] = Math.min(fx[1], fw[1]); fy[2] = Math.min(fx[2], fw[2]); fy[3] = Math.min(fx[3], fw[3]); return fy }; fs.max = function (fy, fx, fw) { fy[0] = Math.max(fx[0], fw[0]); fy[1] = Math.max(fx[1], fw[1]); fy[2] = Math.max(fx[2], fw[2]); fy[3] = Math.max(fx[3], fw[3]); return fy }; fs.scale = function (fy, fx, fw) { fy[0] = fx[0] * fw; fy[1] = fx[1] * fw; fy[2] = fx[2] * fw; fy[3] = fx[3] * fw; return fy }; fs.scaleAndAdd = function (fy, fx, fw, fz) { fy[0] = fx[0] + (fw[0] * fz); fy[1] = fx[1] + (fw[1] * fz); fy[2] = fx[2] + (fw[2] * fz); fy[3] = fx[3] + (fw[3] * fz); return fy }; fs.distance = function (fz, fx) { var fw = fx[0] - fz[0], fB = fx[1] - fz[1], fA = fx[2] - fz[2], fy = fx[3] - fz[3]; return Math.sqrt(fw * fw + fB * fB + fA * fA + fy * fy) }; fs.dist = fs.distance; fs.squaredDistance = function (fz, fx) { var fw = fx[0] - fz[0], fB = fx[1] - fz[1], fA = fx[2] - fz[2], fy = fx[3] - fz[3]; return fw * fw + fB * fB + fA * fA + fy * fy }; fs.sqrDist = fs.squaredDistance; fs.length = function (fy) { var fw = fy[0], fA = fy[1], fz = fy[2], fx = fy[3]; return Math.sqrt(fw * fw + fA * fA + fz * fz + fx * fx) }; fs.len = fs.length; fs.squaredLength = function (fy) { var fw = fy[0], fA = fy[1], fz = fy[2], fx = fy[3]; return fw * fw + fA * fA + fz * fz + fx * fx }; fs.sqrLen = fs.squaredLength; fs.negate = function (fx, fw) { fx[0] = -fw[0]; fx[1] = -fw[1]; fx[2] = -fw[2]; fx[3] = -fw[3]; return fx }; fs.normalize = function (fA, fz) { var fx = fz[0], fC = fz[1], fB = fz[2], fy = fz[3]; var fw = fx * fx + fC * fC + fB * fB + fy * fy; if (fw > 0) { fw = 1 / Math.sqrt(fw); fA[0] = fz[0] * fw; fA[1] = fz[1] * fw; fA[2] = fz[2] * fw; fA[3] = fz[3] * fw } return fA }; fs.dot = function (fx, fw) { return fx[0] * fw[0] + fx[1] * fw[1] + fx[2] * fw[2] + fx[3] * fw[3] }; fs.lerp = function (fy, fx, fw, fz) { var fC = fx[0], fB = fx[1], fA = fx[2], fD = fx[3]; fy[0] = fC + fz * (fw[0] - fC); fy[1] = fB + fz * (fw[1] - fB); fy[2] = fA + fz * (fw[2] - fA); fy[3] = fD + fz * (fw[3] - fD); return fy }; fs.random = function (fw, fx) { fx = fx || 1; fw[0] = fp(); fw[1] = fp(); fw[2] = fp(); fw[3] = fp(); fs.normalize(fw, fw); fs.scale(fw, fw, fx); return fw }; fs.transformMat4 = function (fA, fz, fx) { var fw = fz[0], fC = fz[1], fB = fz[2], fy = fz[3]; fA[0] = fx[0] * fw + fx[4] * fC + fx[8] * fB + fx[12] * fy; fA[1] = fx[1] * fw + fx[5] * fC + fx[9] * fB + fx[13] * fy; fA[2] = fx[2] * fw + fx[6] * fC + fx[10] * fB + fx[14] * fy; fA[3] = fx[3] * fw + fx[7] * fC + fx[11] * fB + fx[15] * fy; return fA }; fs.transformQuat = function (fC, fI, fw) { var fJ = fI[0], fH = fI[1], fG = fI[2], fE = fw[0], fD = fw[1], fB = fw[2], fF = fw[3], fz = fF * fJ + fD * fG - fB * fH, fy = fF * fH + fB * fJ - fE * fG, fx = fF * fG + fE * fH - fD * fJ, fA = -fE * fJ - fD * fH - fB * fG; fC[0] = fz * fF + fA * -fE + fy * -fB - fx * -fD; fC[1] = fy * fF + fA * -fD + fx * -fE - fz * -fB; fC[2] = fx * fF + fA * -fB + fz * -fD - fy * -fE; return fC }; fs.forEach = (function () { var fw = fs.create(); return function (fz, fD, fE, fC, fB, fx) { var fA, fy; if (!fD) { fD = 4 } if (!fE) { fE = 0 } if (fC) { fy = Math.min((fC * fD) + fE, fz.length) } else { fy = fz.length } for (fA = fE; fA < fy; fA += fD) { fw[0] = fz[fA]; fw[1] = fz[fA + 1]; fw[2] = fz[fA + 2]; fw[3] = fz[fA + 3]; fB(fw, fw, fx); fz[fA] = fw[0]; fz[fA + 1] = fw[1]; fz[fA + 2] = fw[2]; fz[fA + 3] = fw[3] } return fz } })(); fs.str = function (fw) { return "vec4(" + fw[0] + ", " + fw[1] + ", " + fw[2] + ", " + fw[3] + ")" }; fr.vec4 = fs; var fo = {}; fo.create = function (fx) { fx = fx || i; var fw = new fx(4); fw[0] = 1; fw[1] = 0; fw[2] = 0; fw[3] = 1; return fw }; fo.clone = function (fw, fy) { fy = fy || i; var fx = new fy(4); fx[0] = fw[0]; fx[1] = fw[1]; fx[2] = fw[2]; fx[3] = fw[3]; return fx }; fo.copy = function (fx, fw) { fx[0] = fw[0]; fx[1] = fw[1]; fx[2] = fw[2]; fx[3] = fw[3]; return fx }; fo.identity = function (fw) { fw[0] = 1; fw[1] = 0; fw[2] = 0; fw[3] = 1; return fw }; fo.transpose = function (fy, fx) { if (fy === fx) { var fw = fx[1]; fy[1] = fx[2]; fy[2] = fw } else { fy[0] = fx[0]; fy[1] = fx[2]; fy[2] = fx[1]; fy[3] = fx[3] } return fy }; fo.invert = function (fA, fy) { var fz = fy[0], fx = fy[1], fw = fy[2], fC = fy[3], fB = fz * fC - fw * fx; if (!fB) { return null } fB = 1 / fB; fA[0] = fC * fB; fA[1] = -fx * fB; fA[2] = -fw * fB; fA[3] = fz * fB; return fA }; fo.adjoint = function (fy, fw) { var fx = fw[0]; fy[0] = fw[3]; fy[1] = -fw[1]; fy[2] = -fw[2]; fy[3] = fx; return fy }; fo.determinant = function (fw) { return fw[0] * fw[3] - fw[2] * fw[1] }; fo.multiply = function (fA, fF, fD) { var fz = fF[0], fy = fF[1], fx = fF[2], fw = fF[3]; var fG = fD[0], fE = fD[1], fC = fD[2], fB = fD[3]; fA[0] = fz * fG + fx * fE; fA[1] = fy * fG + fw * fE; fA[2] = fz * fC + fx * fB; fA[3] = fy * fC + fw * fB; return fA }; fo.mul = fo.multiply; fo.rotate = function (fA, fD, fC) { var fz = fD[0], fy = fD[1], fx = fD[2], fw = fD[3], fE = Math.sin(fC), fB = Math.cos(fC); fA[0] = fz * fB + fx * fE; fA[1] = fy * fB + fw * fE; fA[2] = fz * -fE + fx * fB; fA[3] = fy * -fE + fw * fB; return fA }; fo.scale = function (fA, fB, fD) { var fz = fB[0], fy = fB[1], fx = fB[2], fw = fB[3], fE = fD[0], fC = fD[1]; fA[0] = fz * fE; fA[1] = fy * fE; fA[2] = fx * fC; fA[3] = fw * fC; return fA }; fo.str = function (fw) { return "mat2(" + fw[0] + ", " + fw[1] + ", " + fw[2] + ", " + fw[3] + ")" }; fo.frob = function (fw) { return (Math.sqrt(Math.pow(fw[0], 2) + Math.pow(fw[1], 2) + Math.pow(fw[2], 2) + Math.pow(fw[3], 2))) }; fo.LDU = function (fw, fz, fy, fx) { fw[2] = fx[2] / fx[0]; fy[0] = fx[0]; fy[1] = fx[1]; fy[3] = fx[3] - fw[2] * fy[1]; return [fw, fz, fy] }; fr.mat2 = fo; var e = {}; e.create = function (fx) { fx = fx || i; var fw = new fx(16); fw[0] = 1; fw[1] = 0; fw[2] = 0; fw[3] = 0; fw[4] = 0; fw[5] = 1; fw[6] = 0; fw[7] = 0; fw[8] = 0; fw[9] = 0; fw[10] = 1; fw[11] = 0; fw[12] = 0; fw[13] = 0; fw[14] = 0; fw[15] = 1; return fw }; e.clone = function (fw) { var fx = new i(16); fx[0] = fw[0]; fx[1] = fw[1]; fx[2] = fw[2]; fx[3] = fw[3]; fx[4] = fw[4]; fx[5] = fw[5]; fx[6] = fw[6]; fx[7] = fw[7]; fx[8] = fw[8]; fx[9] = fw[9]; fx[10] = fw[10]; fx[11] = fw[11]; fx[12] = fw[12]; fx[13] = fw[13]; fx[14] = fw[14]; fx[15] = fw[15]; return fx }; e.copy = function (fx, fw) { fx[0] = fw[0]; fx[1] = fw[1]; fx[2] = fw[2]; fx[3] = fw[3]; fx[4] = fw[4]; fx[5] = fw[5]; fx[6] = fw[6]; fx[7] = fw[7]; fx[8] = fw[8]; fx[9] = fw[9]; fx[10] = fw[10]; fx[11] = fw[11]; fx[12] = fw[12]; fx[13] = fw[13]; fx[14] = fw[14]; fx[15] = fw[15]; return fx }; e.identity = function (fw) { fw[0] = 1; fw[1] = 0; fw[2] = 0; fw[3] = 0; fw[4] = 0; fw[5] = 1; fw[6] = 0; fw[7] = 0; fw[8] = 0; fw[9] = 0; fw[10] = 1; fw[11] = 0; fw[12] = 0; fw[13] = 0; fw[14] = 0; fw[15] = 1; return fw }; e.transpose = function (fz, fy) { if (fz === fy) { var fD = fy[1], fB = fy[2], fA = fy[3], fw = fy[6], fC = fy[7], fx = fy[11]; fz[1] = fy[4]; fz[2] = fy[8]; fz[3] = fy[12]; fz[4] = fD; fz[6] = fy[9]; fz[7] = fy[13]; fz[8] = fB; fz[9] = fw; fz[11] = fy[14]; fz[12] = fA; fz[13] = fC; fz[14] = fx } else { fz[0] = fy[0]; fz[1] = fy[4]; fz[2] = fy[8]; fz[3] = fy[12]; fz[4] = fy[1]; fz[5] = fy[5]; fz[6] = fy[9]; fz[7] = fy[13]; fz[8] = fy[2]; fz[9] = fy[6]; fz[10] = fy[10]; fz[11] = fy[14]; fz[12] = fy[3]; fz[13] = fy[7]; fz[14] = fy[11]; fz[15] = fy[15] } return fz }; e.invert = function (fP, fU) { var fY = fU[0], fW = fU[1], fV = fU[2], fS = fU[3], fA = fU[4], fz = fU[5], fy = fU[6], fx = fU[7], fO = fU[8], fN = fU[9], fM = fU[10], fL = fU[11], f0 = fU[12], fZ = fU[13], fX = fU[14], fT = fU[15], fK = fY * fz - fW * fA, fJ = fY * fy - fV * fA, fI = fY * fx - fS * fA, fH = fW * fy - fV * fz, fG = fW * fx - fS * fz, fF = fV * fx - fS * fy, fE = fO * fZ - fN * f0, fD = fO * fX - fM * f0, fC = fO * fT - fL * f0, fB = fN * fX - fM * fZ, fR = fN * fT - fL * fZ, fQ = fM * fT - fL * fX, fw = fK * fQ - fJ * fR + fI * fB + fH * fC - fG * fD + fF * fE; if (!fw) { return null } fw = 1 / fw; fP[0] = (fz * fQ - fy * fR + fx * fB) * fw; fP[1] = (fV * fR - fW * fQ - fS * fB) * fw; fP[2] = (fZ * fF - fX * fG + fT * fH) * fw; fP[3] = (fM * fG - fN * fF - fL * fH) * fw; fP[4] = (fy * fC - fA * fQ - fx * fD) * fw; fP[5] = (fY * fQ - fV * fC + fS * fD) * fw; fP[6] = (fX * fI - f0 * fF - fT * fJ) * fw; fP[7] = (fO * fF - fM * fI + fL * fJ) * fw; fP[8] = (fA * fR - fz * fC + fx * fE) * fw; fP[9] = (fW * fC - fY * fR - fS * fE) * fw; fP[10] = (f0 * fG - fZ * fI + fT * fK) * fw; fP[11] = (fN * fI - fO * fG - fL * fK) * fw; fP[12] = (fz * fD - fA * fB - fy * fE) * fw; fP[13] = (fY * fB - fW * fD + fV * fE) * fw; fP[14] = (fZ * fJ - f0 * fH - fX * fK) * fw; fP[15] = (fO * fH - fN * fJ + fM * fK) * fw; return fP }; e.adjoint = function (fE, fH) { var fL = fH[0], fJ = fH[1], fI = fH[2], fF = fH[3], fz = fH[4], fy = fH[5], fx = fH[6], fw = fH[7], fD = fH[8], fC = fH[9], fB = fH[10], fA = fH[11], fN = fH[12], fM = fH[13], fK = fH[14], fG = fH[15]; fE[0] = (fy * (fB * fG - fA * fK) - fC * (fx * fG - fw * fK) + fM * (fx * fA - fw * fB)); fE[1] = -(fJ * (fB * fG - fA * fK) - fC * (fI * fG - fF * fK) + fM * (fI * fA - fF * fB)); fE[2] = (fJ * (fx * fG - fw * fK) - fy * (fI * fG - fF * fK) + fM * (fI * fw - fF * fx)); fE[3] = -(fJ * (fx * fA - fw * fB) - fy * (fI * fA - fF * fB) + fC * (fI * fw - fF * fx)); fE[4] = -(fz * (fB * fG - fA * fK) - fD * (fx * fG - fw * fK) + fN * (fx * fA - fw * fB)); fE[5] = (fL * (fB * fG - fA * fK) - fD * (fI * fG - fF * fK) + fN * (fI * fA - fF * fB)); fE[6] = -(fL * (fx * fG - fw * fK) - fz * (fI * fG - fF * fK) + fN * (fI * fw - fF * fx)); fE[7] = (fL * (fx * fA - fw * fB) - fz * (fI * fA - fF * fB) + fD * (fI * fw - fF * fx)); fE[8] = (fz * (fC * fG - fA * fM) - fD * (fy * fG - fw * fM) + fN * (fy * fA - fw * fC)); fE[9] = -(fL * (fC * fG - fA * fM) - fD * (fJ * fG - fF * fM) + fN * (fJ * fA - fF * fC)); fE[10] = (fL * (fy * fG - fw * fM) - fz * (fJ * fG - fF * fM) + fN * (fJ * fw - fF * fy)); fE[11] = -(fL * (fy * fA - fw * fC) - fz * (fJ * fA - fF * fC) + fD * (fJ * fw - fF * fy)); fE[12] = -(fz * (fC * fK - fB * fM) - fD * (fy * fK - fx * fM) + fN * (fy * fB - fx * fC)); fE[13] = (fL * (fC * fK - fB * fM) - fD * (fJ * fK - fI * fM) + fN * (fJ * fB - fI * fC)); fE[14] = -(fL * (fy * fK - fx * fM) - fz * (fJ * fK - fI * fM) + fN * (fJ * fx - fI * fy)); fE[15] = (fL * (fy * fB - fx * fC) - fz * (fJ * fB - fI * fC) + fD * (fJ * fx - fI * fy)); return fE }; e.determinant = function (fR) { var fW = fR[0], fU = fR[1], fS = fR[2], fQ = fR[3], fz = fR[4], fy = fR[5], fx = fR[6], fw = fR[7], fN = fR[8], fM = fR[9], fL = fR[10], fK = fR[11], fY = fR[12], fX = fR[13], fV = fR[14], fT = fR[15], fJ = fW * fy - fU * fz, fI = fW * fx - fS * fz, fH = fW * fw - fQ * fz, fG = fU * fx - fS * fy, fF = fU * fw - fQ * fy, fE = fS * fw - fQ * fx, fD = fN * fX - fM * fY, fC = fN * fV - fL * fY, fB = fN * fT - fK * fY, fA = fM * fV - fL * fX, fP = fM * fT - fK * fX, fO = fL * fT - fK * fV; return fJ * fO - fI * fP + fH * fA + fG * fB - fF * fC + fE * fD }; e.multiply = function (fI, fM, fJ) { var fQ = fM[0], fP = fM[1], fN = fM[2], fK = fM[3], fC = fM[4], fA = fM[5], fy = fM[6], fw = fM[7], fH = fM[8], fG = fM[9], fF = fM[10], fE = fM[11], fS = fM[12], fR = fM[13], fO = fM[14], fL = fM[15]; var fD = fJ[0], fB = fJ[1], fz = fJ[2], fx = fJ[3]; fI[0] = fD * fQ + fB * fC + fz * fH + fx * fS; fI[1] = fD * fP + fB * fA + fz * fG + fx * fR; fI[2] = fD * fN + fB * fy + fz * fF + fx * fO; fI[3] = fD * fK + fB * fw + fz * fE + fx * fL; fD = fJ[4]; fB = fJ[5]; fz = fJ[6]; fx = fJ[7]; fI[4] = fD * fQ + fB * fC + fz * fH + fx * fS; fI[5] = fD * fP + fB * fA + fz * fG + fx * fR; fI[6] = fD * fN + fB * fy + fz * fF + fx * fO; fI[7] = fD * fK + fB * fw + fz * fE + fx * fL; fD = fJ[8]; fB = fJ[9]; fz = fJ[10]; fx = fJ[11]; fI[8] = fD * fQ + fB * fC + fz * fH + fx * fS; fI[9] = fD * fP + fB * fA + fz * fG + fx * fR; fI[10] = fD * fN + fB * fy + fz * fF + fx * fO; fI[11] = fD * fK + fB * fw + fz * fE + fx * fL; fD = fJ[12]; fB = fJ[13]; fz = fJ[14]; fx = fJ[15]; fI[12] = fD * fQ + fB * fC + fz * fH + fx * fS; fI[13] = fD * fP + fB * fA + fz * fG + fx * fR; fI[14] = fD * fN + fB * fy + fz * fF + fx * fO; fI[15] = fD * fK + fB * fw + fz * fE + fx * fL; return fI }; e.mul = e.multiply; e.translate = function (fI, fK, fD) { var fC = fD[0], fB = fD[1], fA = fD[2], fN, fM, fL, fJ, fz, fy, fx, fw, fH, fG, fF, fE; if (fK === fI) { fI[12] = fK[0] * fC + fK[4] * fB + fK[8] * fA + fK[12]; fI[13] = fK[1] * fC + fK[5] * fB + fK[9] * fA + fK[13]; fI[14] = fK[2] * fC + fK[6] * fB + fK[10] * fA + fK[14]; fI[15] = fK[3] * fC + fK[7] * fB + fK[11] * fA + fK[15] } else { fN = fK[0]; fM = fK[1]; fL = fK[2]; fJ = fK[3]; fz = fK[4]; fy = fK[5]; fx = fK[6]; fw = fK[7]; fH = fK[8]; fG = fK[9]; fF = fK[10]; fE = fK[11]; fI[0] = fN; fI[1] = fM; fI[2] = fL; fI[3] = fJ; fI[4] = fz; fI[5] = fy; fI[6] = fx; fI[7] = fw; fI[8] = fH; fI[9] = fG; fI[10] = fF; fI[11] = fE; fI[12] = fN * fC + fz * fB + fH * fA + fK[12]; fI[13] = fM * fC + fy * fB + fG * fA + fK[13]; fI[14] = fL * fC + fx * fB + fF * fA + fK[14]; fI[15] = fJ * fC + fw * fB + fE * fA + fK[15] } return fI }; e.scale = function (fz, fx, fy) { var fw = fy[0], fB = fy[1], fA = fy[2]; fz[0] = fx[0] * fw; fz[1] = fx[1] * fw; fz[2] = fx[2] * fw; fz[3] = fx[3] * fw; fz[4] = fx[4] * fB; fz[5] = fx[5] * fB; fz[6] = fx[6] * fB; fz[7] = fx[7] * fB; fz[8] = fx[8] * fA; fz[9] = fx[9] * fA; fz[10] = fx[10] * fA; fz[11] = fx[11] * fA; fz[12] = fx[12]; fz[13] = fx[13]; fz[14] = fx[14]; fz[15] = fx[15]; return fz }; e.rotate = function (fQ, fX, fZ, fw) { var fG = fw[0], fF = fw[1], fE = fw[2], fR = Math.sqrt(fG * fG + fF * fF + fE * fE), fL, fV, fK, f1, f0, fY, fW, fD, fC, fB, fA, fP, fO, fN, fM, fJ, fI, fH, fU, fT, fS, fz, fy, fx; if (Math.abs(fR) < fv) { return null } fR = 1 / fR; fG *= fR; fF *= fR; fE *= fR; fL = Math.sin(fZ); fV = Math.cos(fZ); fK = 1 - fV; f1 = fX[0]; f0 = fX[1]; fY = fX[2]; fW = fX[3]; fD = fX[4]; fC = fX[5]; fB = fX[6]; fA = fX[7]; fP = fX[8]; fO = fX[9]; fN = fX[10]; fM = fX[11]; fJ = fG * fG * fK + fV; fI = fF * fG * fK + fE * fL; fH = fE * fG * fK - fF * fL; fU = fG * fF * fK - fE * fL; fT = fF * fF * fK + fV; fS = fE * fF * fK + fG * fL; fz = fG * fE * fK + fF * fL; fy = fF * fE * fK - fG * fL; fx = fE * fE * fK + fV; fQ[0] = f1 * fJ + fD * fI + fP * fH; fQ[1] = f0 * fJ + fC * fI + fO * fH; fQ[2] = fY * fJ + fB * fI + fN * fH; fQ[3] = fW * fJ + fA * fI + fM * fH; fQ[4] = f1 * fU + fD * fT + fP * fS; fQ[5] = f0 * fU + fC * fT + fO * fS; fQ[6] = fY * fU + fB * fT + fN * fS; fQ[7] = fW * fU + fA * fT + fM * fS; fQ[8] = f1 * fz + fD * fy + fP * fx; fQ[9] = f0 * fz + fC * fy + fO * fx; fQ[10] = fY * fz + fB * fy + fN * fx; fQ[11] = fW * fz + fA * fy + fM * fx; if (fX !== fQ) { fQ[12] = fX[12]; fQ[13] = fX[13]; fQ[14] = fX[14]; fQ[15] = fX[15] } return fQ }; e.rotateX = function (fw, fD, fC) { var fI = Math.sin(fC), fB = Math.cos(fC), fH = fD[4], fG = fD[5], fF = fD[6], fE = fD[7], fA = fD[8], fz = fD[9], fy = fD[10], fx = fD[11]; if (fD !== fw) { fw[0] = fD[0]; fw[1] = fD[1]; fw[2] = fD[2]; fw[3] = fD[3]; fw[12] = fD[12]; fw[13] = fD[13]; fw[14] = fD[14]; fw[15] = fD[15] } fw[4] = fH * fB + fA * fI; fw[5] = fG * fB + fz * fI; fw[6] = fF * fB + fy * fI; fw[7] = fE * fB + fx * fI; fw[8] = fA * fB - fH * fI; fw[9] = fz * fB - fG * fI; fw[10] = fy * fB - fF * fI; fw[11] = fx * fB - fE * fI; return fw }; e.rotateY = function (fA, fH, fG) { var fI = Math.sin(fG), fF = Math.cos(fG), fz = fH[0], fy = fH[1], fx = fH[2], fw = fH[3], fE = fH[8], fD = fH[9], fC = fH[10], fB = fH[11]; if (fH !== fA) { fA[4] = fH[4]; fA[5] = fH[5]; fA[6] = fH[6]; fA[7] = fH[7]; fA[12] = fH[12]; fA[13] = fH[13]; fA[14] = fH[14]; fA[15] = fH[15] } fA[0] = fz * fF - fE * fI; fA[1] = fy * fF - fD * fI; fA[2] = fx * fF - fC * fI; fA[3] = fw * fF - fB * fI; fA[8] = fz * fI + fE * fF; fA[9] = fy * fI + fD * fF; fA[10] = fx * fI + fC * fF; fA[11] = fw * fI + fB * fF; return fA }; e.rotateZ = function (fA, fD, fC) { var fI = Math.sin(fC), fB = Math.cos(fC), fz = fD[0], fy = fD[1], fx = fD[2], fw = fD[3], fH = fD[4], fG = fD[5], fF = fD[6], fE = fD[7]; if (fD !== fA) { fA[8] = fD[8]; fA[9] = fD[9]; fA[10] = fD[10]; fA[11] = fD[11]; fA[12] = fD[12]; fA[13] = fD[13]; fA[14] = fD[14]; fA[15] = fD[15] } fA[0] = fz * fB + fH * fI; fA[1] = fy * fB + fG * fI; fA[2] = fx * fB + fF * fI; fA[3] = fw * fB + fE * fI; fA[4] = fH * fB - fz * fI; fA[5] = fG * fB - fy * fI; fA[6] = fF * fB - fx * fI; fA[7] = fE * fB - fw * fI; return fA }; e.fromRotationTranslation = function (fJ, fH, fF) { var fC = fH[0], fB = fH[1], fA = fH[2], fD = fH[3], fK = fC + fC, fw = fB + fB, fE = fA + fA, fz = fC * fK, fy = fC * fw, fx = fC * fE, fI = fB * fw, fG = fB * fE, fN = fA * fE, fO = fD * fK, fM = fD * fw, fL = fD * fE; fJ[0] = 1 - (fI + fN); fJ[1] = fy + fL; fJ[2] = fx - fM; fJ[3] = 0; fJ[4] = fy - fL; fJ[5] = 1 - (fz + fN); fJ[6] = fG + fO; fJ[7] = 0; fJ[8] = fx + fM; fJ[9] = fG - fO; fJ[10] = 1 - (fz + fI); fJ[11] = 0; fJ[12] = fF[0]; fJ[13] = fF[1]; fJ[14] = fF[2]; fJ[15] = 1; return fJ }; e.fromQuat = function (fG, fD) { var fA = fD[0], fz = fD[1], fy = fD[2], fB = fD[3], fH = fA + fA, fw = fz + fz, fC = fy + fy, fx = fA * fH, fF = fz * fH, fE = fz * fw, fN = fy * fH, fM = fy * fw, fK = fy * fC, fL = fB * fH, fJ = fB * fw, fI = fB * fC; fG[0] = 1 - fE - fK; fG[1] = fF + fI; fG[2] = fN - fJ; fG[3] = 0; fG[4] = fF - fI; fG[5] = 1 - fx - fK; fG[6] = fM + fL; fG[7] = 0; fG[8] = fN + fJ; fG[9] = fM - fL; fG[10] = 1 - fx - fE; fG[11] = 0; fG[12] = 0; fG[13] = 0; fG[14] = 0; fG[15] = 1; return fG }; e.frustum = function (fA, fx, fF, fw, fE, fC, fB) { var fD = 1 / (fF - fx), fz = 1 / (fE - fw), fy = 1 / (fC - fB); fA[0] = (fC * 2) * fD; fA[1] = 0; fA[2] = 0; fA[3] = 0; fA[4] = 0; fA[5] = (fC * 2) * fz; fA[6] = 0; fA[7] = 0; fA[8] = (fF + fx) * fD; fA[9] = (fE + fw) * fz; fA[10] = (fB + fC) * fy; fA[11] = -1; fA[12] = 0; fA[13] = 0; fA[14] = (fB * fC * 2) * fy; fA[15] = 0; return fA }; e.perspective = function (fz, fy, fx, fA, fw) { var fC = 1 / Math.tan(fy / 2), fB = 1 / (fA - fw); fz[0] = fC / fx; fz[1] = 0; fz[2] = 0; fz[3] = 0; fz[4] = 0; fz[5] = fC; fz[6] = 0; fz[7] = 0; fz[8] = 0; fz[9] = 0; fz[10] = (fw + fA) * fB; fz[11] = -1; fz[12] = 0; fz[13] = 0; fz[14] = (2 * fw * fA) * fB; fz[15] = 0; return fz }; e.ortho = function (fz, fx, fF, fw, fD, fC, fB) { var fA = 1 / (fx - fF), fE = 1 / (fw - fD), fy = 1 / (fC - fB); fz[0] = -2 * fA; fz[1] = 0; fz[2] = 0; fz[3] = 0; fz[4] = 0; fz[5] = -2 * fE; fz[6] = 0; fz[7] = 0; fz[8] = 0; fz[9] = 0; fz[10] = 2 * fy; fz[11] = 0; fz[12] = (fx + fF) * fA; fz[13] = (fD + fw) * fE; fz[14] = (fB + fC) * fy; fz[15] = 1; return fz }; e.lookAt = function (fK, fR, fS, fC) { var fQ, fP, fN, fy, fx, fw, fF, fE, fD, fL, fO = fR[0], fM = fR[1], fJ = fR[2], fB = fC[0], fA = fC[1], fz = fC[2], fI = fS[0], fH = fS[1], fG = fS[2]; if (Math.abs(fO - fI) < fv && Math.abs(fM - fH) < fv && Math.abs(fJ - fG) < fv) { return e.identity(fK) } fF = fO - fI; fE = fM - fH; fD = fJ - fG; fL = 1 / Math.sqrt(fF * fF + fE * fE + fD * fD); fF *= fL; fE *= fL; fD *= fL; fQ = fA * fD - fz * fE; fP = fz * fF - fB * fD; fN = fB * fE - fA * fF; fL = Math.sqrt(fQ * fQ + fP * fP + fN * fN); if (!fL) { fQ = 0; fP = 0; fN = 0 } else { fL = 1 / fL; fQ *= fL; fP *= fL; fN *= fL } fy = fE * fN - fD * fP; fx = fD * fQ - fF * fN; fw = fF * fP - fE * fQ; fL = Math.sqrt(fy * fy + fx * fx + fw * fw); if (!fL) { fy = 0; fx = 0; fw = 0 } else { fL = 1 / fL; fy *= fL; fx *= fL; fw *= fL } fK[0] = fQ; fK[1] = fy; fK[2] = fF; fK[3] = 0; fK[4] = fP; fK[5] = fx; fK[6] = fE; fK[7] = 0; fK[8] = fN; fK[9] = fw; fK[10] = fD; fK[11] = 0; fK[12] = -(fQ * fO + fP * fM + fN * fJ); fK[13] = -(fy * fO + fx * fM + fw * fJ); fK[14] = -(fF * fO + fE * fM + fD * fJ); fK[15] = 1; return fK }; e.str = function (fw) { return "mat4(" + fw[0] + ", " + fw[1] + ", " + fw[2] + ", " + fw[3] + ", " + fw[4] + ", " + fw[5] + ", " + fw[6] + ", " + fw[7] + ", " + fw[8] + ", " + fw[9] + ", " + fw[10] + ", " + fw[11] + ", " + fw[12] + ", " + fw[13] + ", " + fw[14] + ", " + fw[15] + ")" }; e.frob = function (fw) { return (Math.sqrt(Math.pow(fw[0], 2) + Math.pow(fw[1], 2) + Math.pow(fw[2], 2) + Math.pow(fw[3], 2) + Math.pow(fw[4], 2) + Math.pow(fw[5], 2) + Math.pow(fw[6], 2) + Math.pow(fw[6], 2) + Math.pow(fw[7], 2) + Math.pow(fw[8], 2) + Math.pow(fw[9], 2) + Math.pow(fw[10], 2) + Math.pow(fw[11], 2) + Math.pow(fw[12], 2) + Math.pow(fw[13], 2) + Math.pow(fw[14], 2) + Math.pow(fw[15], 2))) }; fr.mat4 = e })(window); function bZ() { this.result = { bkData: [], eleData: [[], [], [], [], [], []], tileLabels: [] } } x.extend(bZ.prototype, { createLayer: function (fn, i) { var e = this.result.bkData; i = i || {}; if (!e[fn]) { e[fn] = [[], [], []] } e[fn].dataType = i.dataType || 2; e[fn].png8 = i.png8 || false; e[fn].clipTile = i.clipTile || false }, removeLayer: function (i) { var e = this.result.bkData; e[i] = null }, getResult: function () { return this.result }, setData: function (fq, fp, fr) { var e = this.result.bkData; var fn = e[fp] ? e[fp][fr] : null; if (!fn) { return } for (var fo = 0; fo < fn.length; fo++) { if (fn[fo].key && fn[fo].key === fq.key) { fn[fo] = fq; return } } fn.push(fq) }, setLabelData: function (e) { this.result.tileLabels = e }, getLabelData: function () { return this.result.tileLabels }, setOverlayData: function (i, e) { if (!this.result.eleData[e]) { return } this.result.eleData[e] = i }, clearLabelOverlayData: function () { this.result.eleData[2] = []; this.result.eleData[3] = []; this.result.eleData[4] = [] }, clearData: function (fo) { var e = this.result.bkData; if (typeof fo === "number") { if (e[fo]) { e[fo][0] = []; e[fo][1] = []; e[fo][2] = [] } return } for (var fn = 0; fn < e.length; fn++) { if (!e[fn]) { continue } e[fn][0] = []; e[fn][1] = []; e[fn][2] = [] } }, sortThumbData: function (i) { var e = this.result.bkData; var fn = e[i]; if (!fn) { return } if (fn[0] && fn[0].length > 0) { fn[0].sort(function (fp, fo) { return fp.tileInfo.useZoom - fo.tileInfo.useZoom }) } } }); var dz = (function () { var fy = new Int8Array(4); var fn = new Int32Array(fy.buffer, 0, 1); var ft = new Float32Array(fy.buffer, 0, 1); function fA(fH) { fn[0] = fH; return ft[0] } function i(fH) { ft[0] = fH; return fn[0] } function fu(fH) { var fJ = (fH[3] << 24 | fH[2] << 16 | fH[1] << 8 | fH[0]); var fI = fA(fJ & 4278190079); return fI } var fp = 0; var fs = 1; var fw = 2; var fD = 0; var fB = 1; var fz = 2; var fq = 6; var fv = 7; function fx(fH, fI) { var fJ; if (fI % 2 === 0) { fJ = [-fH[1], fH[0]] } else { fJ = [fH[1], -fH[0]] } return fJ } function e(fH, fI, fJ) { var fK = fx(fH, fI); var fL; if (fJ === fs) { return fK } else { if (fI === 4 || fI === 5) { fL = [fK[0] - fH[0], fK[1] - fH[1]] } else { fL = [fK[0] + fH[0], fK[1] + fH[1]] } if (fJ === fp) { vec2.normalize(fL, fL) } return fL } } function fo(fL, fK, fJ, fH) { var fI = vec2.dot(fL, fK); if (fJ === fz || fJ === fB) { if ((fH === 0 || fH === 1) && fI > 0) { return true } else { if ((fH === 2 || fH === 3) && fI < 0) { return true } } } if ((fH === 0 || fH === 1) && fI < 0) { return true } else { if ((fH === 2 || fH === 3) && fI > 0) { return true } } return false } function fG(fI, fN, fP) { var fO = fx(fI, fN); var fK; var fM = fI; var fL = fP; var fR = []; vec2.normalize(fR, [fM[0] + fL[0], fM[1] + fL[1]]); var fQ = vec2.dot(fO, [-fR[1], fR[0]]); if (Math.abs(fQ) < 0.1) { fQ = 1 } var fJ = 1 / fQ; fK = [-fR[1] * fJ, fR[0] * fJ]; var fH = vec2.dot(fI, fK); if (fH < 0) { vec2.negate(fK, fK) } return { cos2: fH, offset: fK } } function fE(fI, fN, fP, fH) { var fO = fx(fI, fN); var fM; var fL; var fK; if (fN === 0 || fN === 1) { fM = fP; fL = fI } else { fM = fI; fL = fP } if (!fM || !fL) { return fO } var fR = [fM[0] + fL[0], fM[1] + fL[1]]; if (fR[0] === 0 && fR[1] === 0) { vec2.normalize(fR, fL) } else { vec2.normalize(fR, fR) } var fS = fo(fR, fO, fH, fN); if (fS) { return fO } var fQ = vec2.dot(fO, [-fR[1], fR[0]]); if (Math.abs(fQ) < 0.1) { fQ = 1 } var fJ = 1 / fQ; fK = [-fR[1] * fJ, fR[0] * fJ]; return fK } function fF(fR, fS, fL, fT, fQ, fJ, fM, fK, fP) { var fO; var fI = 0; var fH = false; if (fP === undefined) { fO = fQ.length / fq - 1 } else { fO = fQ.length / fv - 1 } fr(fS[0], fR[0], fT, fL, 4, fM, fK, undefined, fQ, fP); fO++; fI++; fr(fS[0], fR[0], fT, fL, 5, fM, fK, undefined, fQ, fP); fO++; fI++; for (var fN = 0; fN < fR.length; fN++) { fr(fS[fN], fR[fN], fT, fL, 0, fM, fK, fR[fN - 1], fQ, fP); fC(fJ, ++fO, ++fI, fH); fr(fS[fN], fR[fN], fT, fL, 1, fM, fK, fR[fN - 1], fQ, fP); fC(fJ, ++fO, ++fI, fH); fr(fS[fN + 1], fR[fN], fT, fL, 2, fM, fK, fR[fN + 1], fQ, fP); fC(fJ, ++fO, ++fI, fH); fr(fS[fN + 1], fR[fN], fT, fL, 3, fM, fK, fR[fN + 1], fQ, fP); fC(fJ, ++fO, ++fI, fH); if (fL === fB && fN !== fR.length - 1) { fr(fS[fN + 1], fR[fN], fT, fL, 8, fM, fK, fR[fN + 1], fQ, fP); fC(fJ, ++fO, ++fI, fH); fH = fH ? false : true } } fr(fS[fS.length - 1], fR[fR.length - 1], fT, fL, 6, fM, fK, undefined, fQ, fP); fC(fJ, ++fO, ++fI, fH); fr(fS[fS.length - 1], fR[fR.length - 1], fT, fL, 7, fM, fK, undefined, fQ, fP); fC(fJ, ++fO, ++fI, fH) } function fr(fT, fK, fU, fJ, fO, fM, fI, fS, fQ, fP) { var fR = fO % 2 === 0 ? 1 : -1; var fN; if (fO === 4 || fO === 5 || fO === 6 || fO === 7) { fN = e(fK, fO, fU) } else { if (fO === 0 || fO === 1 || fO === 2 || fO === 3) { fN = fE(fK, fO, fS, fJ) } else { if (fO === 8) { var fL = fG(fK, fO, fS); fN = fL.offset; vec2.normalize(fN, fN); var fH = fL.cos2; if (fH < 0) { fR = -fR } } } } fQ[fQ.length] = fT[0] * 10; fQ[fQ.length] = fT[1] * 10; fQ[fQ.length] = fN[0] * fI * 10; fQ[fQ.length] = fN[1] * fI * 10; fQ[fQ.length] = fM; fQ[fQ.length] = fR; if (fP !== undefined) { fQ[fQ.length] = fP } } function fC(fL, fJ, fH, fK) { var fI; if (fH % 2 === 0) { if (fK) { fL[fL.length] = fJ - 2; fL[fL.length] = fJ - 1; fL[fL.length] = fJ } else { fL[fL.length] = fJ - 1; fL[fL.length] = fJ - 2; fL[fL.length] = fJ } } else { if (fK) { fL[fL.length] = fJ - 1; fL[fL.length] = fJ - 2; fL[fL.length] = fJ } else { fL[fL.length] = fJ - 2; fL[fL.length] = fJ - 1; fL[fL.length] = fJ } } } return { getVertexCount: function (fI, fH) { if (fH === fB) { return fI * 5 - 2 } else { return fI * 4 } }, overlayLine: function (fQ, fJ, fR, fN, fH, fL, fI, fO) { var fP = []; for (var fM = 0; fM < fQ.length; fM++) { if (fM !== fQ.length - 1) { var fK = [fQ[fM + 1][0] - fQ[fM][0], fQ[fM + 1][1] - fQ[fM][1]]; var fS = []; if (fK[0] === 0 && fK[1] === 0) { fS = [0, 0] } else { vec2.normalize(fS, fK) } fP[fP.length] = [fS[0], fS[1]] } } return fF(fP, fQ, fJ, fR, fN, fH, fu(fL), fI, fO) }, toSolidVertices: function (fL, fI) { var fJ = new Float32Array(fL.length / fv * 5); var fH = new Int16Array(fJ.buffer); var fN = 0; var fK = 0; for (var fM = 0; fM < fL.length; fM += fv) { fH[fN] = ~~fL[fM]; fH[fN + 1] = ~~fL[fM + 1]; fH[fN + 2] = ~~fL[fM + 2]; fH[fN + 3] = ~~fL[fM + 3]; fJ[fK + 2] = fL[fM + 4]; fH[fN + 6] = fL[fM + 5]; fH[fN + 7] = fI ? fI : 0; fH[fN + 8] = fL[fM + 6]; fH[fN + 9] = 0; fN += 10; fK += 5 } return fJ } } })(); var c5 = 1; var er = 2; var dY = { drawIndex: 0, devicePixelRatio: ay(), zoomState: 1, curViewTilesInfo: null, iconSetImg: null, LAST_CALC_ZOOM: -1, LAST_LOAD_VECTOR_ZOOM_CHANGE: false, lastCollisionTestTime: 0, remove: function () { this.tileCache.clear() }, initDrawData: function () { this.drawIndex = this.zIndex; this.map._featureMgr.createLayer(this.drawIndex, { dataType: this.dataType, png8: this.png8, clipTile: this.clipTile }) }, destroyDrawData: function () { this.map._featureMgr.removeLayer(this.drawIndex) }, setZIndex: function (e) { this.zIndex = e }, getTileKey: function (e, fo) { fo = fo || {}; var i = typeof fo.useZoom === "number" ? fo.useZoom : e.useZoom; var fn = e.style || this.mapStyleId || "default"; return this.mapType + "_" + fn + "_" + e.col + "_" + e.row + "_" + e.zoom + "_" + i }, getTileRenderDataKey: function (i) { var fn = i.col; var fo = i.zoom; var e = i.baseTileSize; fn = cE.calcLoopParam(fn, fo, e).col; return this.mapType + "_" + fn + "_" + i.row + "_" + fo + "_" + i.useZoom }, getTileUnits: function (e) { var fo = this.map; var fn = be[fo.getMapType()]; var i = fn.baseUnits * Math.pow(2, fn.zoomLevelBase - e); return i }, getTilesUrl: function (fp, fy, fz) { var i = fp.x; var fA = fp.y; var fv = ad("ditu", "normal"); var fr = fv.ver; var fs = fv.udt; i = cE.calcLoopParam(i, fy, fz).col; var fx = be.B_NORMAL_MAP.vectorTileUrls; var fq = Math.abs(i + fA) % fx.length; var fw = fx[fq]; if (window.offLineIPAddress) { fx = [window.offLineIPAddress + "pvd/"]; fw = fx[0] } var fn = "x=" + i + "&y=" + fA + "&z=" + Math.floor(fy); var fu = this.devicePixelRatio > 1 ? "&scaler=2" : ""; var ft = "&textimg=1"; if (this.map.config.textRenderType === "canvas") { ft = "&textimg=0" } var fo = this.map.config.style; if (typeof fo === "string" && fo !== "default") { fn += "&styleId=" + dp.mapStyleNameIdPair[fo] } fn += "&styles=pl" + ft + fu + "&v=" + fr + "&udt=" + fs + "&json=0"; var e = fw + "?qt=vtile&param=" + window.encodeURIComponent(el(fn)); return e }, getRasterTilesUrl: function (fn, fq, fo) { var fp = be[this.map.mapType]; var i = this.map.config.style; var e = fp.tileUrls[Math.abs(fq + fn) % fp.tileUrls.length] + "?qt=tile&x=" + fn + "&y=" + fq + "&z=" + fo + ((i === "default" || typeof i !== "string") ? "" : ("&styleId=" + dp.mapStyleNameIdPair[i])) + "&styles=pl&udt=" + this.normalUdt + "&scaler=" + this.scaler + "&p=1"; e = e.replace(/-(\d+)/gi, "M$1"); return e }, getZoomState: function () { var fn = this.map; var i = fn.getZoom(); var e = i - this.lastZoom; if (e > 0) { this.zoomState = 1 } else { if (e < 0) { this.zoomState = -1 } } this.lastZoom = i; return this.zoomState }, releaseOutViewTileData: function (e) { var fp = this.map._workerMgr.releasePendingData(e); for (var fo = 0, fn = fp.length; fo < fn; fo++) { var fq = this.getTileKey(fp[fo]); this.tileCache.removeData(fq) } }, loadLayerData: function (e, fo, i) { this.hasZoomChange = i; this.curViewTilesInfo = e; this.mapStyleId = this.map.getMapStyleId(); this.releaseOutViewTileData(e); var fn = this.getZoomState(); if (this.dataType === er) { if (fo) { this.getVectorLayerDataFromCache(e, fn) } else { this.loadVectorLayerData(e) } } else { this.loadRasterLayerData(e, fo) } }, getVectorLayerDataFromCache: function (ft, fD) { this.map.temp.isPermitSpotOver = false; this.tileLabels = []; if (this.baseLayer === true) { var fx = this.map._customLabelMgr.virtualTile; if (fx && fx.label) { this.tileLabels.push(fx.label) } } this.thumbCache = {}; var fE = -1; for (var fA = 0, fy = ft.length; fA < fy; fA++) { var fB = ft[fA]; var fp = fB.col; var fq = fB.row; var fn = fB.zoom; var fz = this._getTileTexImgKey(fB); var fo = fB.useZoom; fE = fn; var fr = this.getTileKey(fB); var fG = this.tileCache.getData(fr); if (fG && fG.status === "ready") { var fH = fG; this.map._featureMgr.setData(fG, this.drawIndex, 2); if (fG.label) { if (fG.label.status === "ready") { fG.label.tileInfo = fG.tileInfo; this.tileLabels.push(fG.label); if (fG.label.textureSources && fG.label.textureSources[fo] && this.map._webglMapScene) { var fF = this.map._webglMapScene._painter; if (!fF._labelTextureAtlasOffset[fz]) { fF._addToAsyncJob(fG.label.textureSources[fo]) } } } else { if (fG.label.status !== "processing") { this.processLabelData(fG) } } } } else { var fC = { tileInfo: fB, dataType: er, key: fr }; this.map._featureMgr.setData(fC, this.drawIndex, 2); if (this.useThumbData) { this.setThumbData(fp, fq, fn, fo, fD) } } } this.tileLabels.labelZoom = fE; this.updateLabels(fD); var fu = this.map.getZoom(); var fs = Math.floor(fu); var fw = fu - fs; var fv = Math.floor(this.LAST_CALC_ZOOM); var e = this.LAST_CALC_ZOOM - fv; var fI = false; if (this.hasZoomChange) { if (Math.abs(fu - this.LAST_CALC_ZOOM) >= 0.5) { fI = true } else { if (fw < 0.5 && e >= 0.5) { fI = true } else { if (fw >= 0.5 && e < 0.5) { fI = true } } } if (fI) { this.cacheDataCollideLabels(0) } this.LAST_CALC_ZOOM = fu } else { if (this.tileLabels.length > 0) { this.cacheDataCollideLabels(30) } } }, loadVectorLayerData: function (fw, fy) { this.map.temp.isPermitSpotOver = false; var fv = this; function fu(i, fA) { var fC = fv.tileCache.getData(fA); if (!fC) { return } if (!i || i.error) { if (typeof alog !== "undefined") { alog("exception.fire", "catch", { msg: i.tileKey + ":" + i.message, path: "api.js", ln: 1 }) } var fB = new aB("ontileloaderror"); i = i || {}; fB.error = i.error || ""; fB.message = i.message || ""; fv.map.fire(fB); fC.status = "init"; fC.reloadTimer = setTimeout(function () { if (fC.retry < 3) { fC.retry++; fC.status = "loading"; fv.loadVectorTileData(i.tileInfo, fu) } else { fv.tileCache.removeData(fA) } }, 4000); fv.map._featureMgr.clearData(fv.drawIndex); fv._checkTilesLoaded(); fv.getVectorLayerDataFromCache(fv.curViewTilesInfo, fv.getZoomState()); return } if (fC.reloadTimer) { clearTimeout(fC.reloadTimer); fC.reloadTimer = null } fv.callbackDataQueue.push([i, fA]); if (fv.processDataTimer) { return } fv.processDataTimer = setTimeout(function () { while (fv.callbackDataQueue.length > 0) { var fD = fv.callbackDataQueue.shift(); fv.vectorTileDataCbk(fD[0], fD[1]); fv._checkTilesLoaded() } fv.map._featureMgr.clearData(fv.drawIndex); fv.getVectorLayerDataFromCache(fv.curViewTilesInfo, fv.getZoomState()); fv.processDataTimer = null }, 200) } for (var ft = 0, fr = fw.length; ft < fr; ft++) { var fo = fw[ft]; var fp = fo.col; var fz = fo.row; var fx = fo.zoom; var fn = fo.loopOffsetX; var fs = this.getTileKey(fo); var e = this.tileCache.getData(fs); if (!e) { e = { status: "init", tileInfo: fo, dataType: er, key: fs, retry: 0 } } if (e.status !== "ready" && e.status !== "loading") { this.numLoading++; e.status = "loading"; this.tileCache.setData(fs, e); var fq = this.getProcessedLabelZoom(fo); if (fq) { fo.processedLabelZooms = fq } this.loadVectorTileData(fo, fu) } } }, setThumbData: function (i, fp, fo, e, fn) { if (fn === 1) { if (this._findParentZoomTile(i, fp, fo, e, 8) === false) { this._findChildZoomTile(i, fp, fo, e, 3) } } else { if (fn === -1) { if (this._findChildZoomTile(i, fp, fo, e, 3) === false) { this._findParentZoomTile(i, fp, fo, e, 8) } } } this.map._featureMgr.sortThumbData(this.drawIndex) }, _findParentZoomTile: function (fr, fA, fz, fp, fu) { var fq = be[this.getMapType()]; var fn = fq.minDataZoom; var e = fr; var fx = fA; var fv = fz; var fw = fp; for (var ft = 1; ft <= fu; ft++) { var fo = this.tileType.getParentTile(e, fx, fv, fw, fn); if (fo === null) { continue } var fy = this.getTileKey(fo); var fs = this.tileCache.getData(fy); if (fs && fs.status === "ready") { if (this.thumbCache[fy]) { continue } this.map._featureMgr.setData(fs, this.drawIndex, 0); this.thumbCache[fy] = true; return true } e = fo.col; fx = fo.row; fv = fo.zoom; fw = fo.useZoom } return false }, _findChildZoomTile: function (fs, fu, e, fp, fD) { var fB = be[this.getMapType()]; var fx = fB.maxDataZoom; var fr = fs; var ft = fu; var fv = e; var fo = fp; var fq = true; for (var fA = 1; fA <= fD; fA++) { var fy = false; var fn = this.tileType.getChildTiles(fr, ft, fv, fo, fx, fA); if (!fn) { continue } for (var fz = 0; fz < fn.length; fz++) { var fw = this.getTileKey(fn[fz]); var fC = this.tileCache.getData(fw); if (fC && fC.status === "ready") { if (!this.thumbCache[fw]) { this.map._featureMgr.setData(fC, this.drawIndex, 1); this.thumbCache[fw] = true } fy = true } else { fq = false } } if (fy) { break } } return fq }, loadVectorTileData: function (i, fp) { var fn = i.col; var ft = i.row; var fr = i.zoom; var fs = i.baseTileSize; var e = this.getTilesUrl(new cP(fn, ft), fr, fs); if (!e) { return } var fq = this.getTileKey(i); aP(this.map); if (!this.processData) { this.map._workerMgr.loadTileData(e, i, fq, fp); return } var fp = "cbk" + fq.replace(/-/g, "_"); var fo = this; aI[fp] = function (fu) { var fv = (function (fw) { return function () { fw.tileInfo = i; var fC = fo.processData(fw); if (!fC.road) { return } var fz = { tileInfo: i, renderData: { base: [] }, status: "ready", key: fq, mapType: fo.mapType }; var fF = []; var fI = []; for (var fB = 0; fB < fC.road.length; fB++) { var fE = fC.road[fB]; var fD = -1; for (var fA = 0; fA < fE.length; fA++) { var fG = fE[fA]; var fH = []; if (fF.length / 7 + fG[0].length / 2 > 65536) { fz.renderData.base.push({ type: "line", data: [dz.toSolidVertices(fF, 4000), new Uint16Array(fI)] }); fF = []; fI = [] } for (var fy = 0; fy < fG[0].length; fy += 2) { fH[fH.length] = [fG[0][fy], fG[0][fy + 1]] } var fx = fG[3]; dz.overlayLine(fH, fG[1], fG[2], fF, fI, fx, fG[4], fB + 20) } fz.renderData.base.push({ type: "line", data: [dz.toSolidVertices(fF, 4000), new Uint16Array(fI)] }) } fo.tileCache.setData(fq, fz); fo.map._featureMgr.clearData(fo.drawIndex); fo.getVectorLayerDataFromCache(fo.curViewTilesInfo, fo.getZoomState()); fo.map.dispatchEvent(new aB("onrefresh")) } })(fu); fo.map.jobScheduler.addJob(fv); delete aI[fp] }; e += "&fn=" + encodeURIComponent(c0 + "." + fp); e0.load(e) }, vectorTileDataCbk: function (fo, fp) { var ft = new aB("ontileloaded"); ft.perfStat = fo.perfStat || []; var e = this.map; e.fire(ft); var i = fo.tileInfo; var fn = i.col; var fy = i.row; var fx = i.zoom; var fw = i.baseTileSize; var fr = this.tileCache.getData(fp); if (!fr) { return } if (!this.showLabel) { fo.label = null } fr.renderData = fo; fr.tileInfo = i; var fq = cE.calcLoopParam(fn, fx, fw); var fu = fq.geoOffsetX; fr.tileInfo.loopOffsetX = fu; fr.status = "ready"; fr.mapType = this.mapType; this.tileCache.setData(fp, fr); fr.label = fo.label; fo.label = null; if (fo.indoorData) { e._indoorMgr.setData(fo.indoorData) } var fs = "id_" + fn + "_" + fy + "_" + fx; if (!this.curViewTilesInfo[fs]) { e.fire(new aB("ontilenotinview")); return } this.processLabelData(fr); if (fo.indoorData && e._indoorMgr.currentUid) { this._refreshIndoorData(e._indoorMgr.currentUid, e._indoorMgr.currentFloor) } var fv = new aB("onrefresh"); fv.source = "webgllayer"; this.map.dispatchEvent(fv) }, _refreshIndoorData: function (fw, fv) { var fy = this.map._indoorMgr.getIndoorData(fw); var fB = fy.tileKeys; var fz = Math.floor(this.map.getZoom()); for (var ft = 0; ft < fB.length; ft++) { var fq = fB[ft]; var fs = this.tileCache.getData(fq); if (!fs) { continue } var fA = fs.renderData; fA.indoorBase = []; fA.indoorBaseContour = []; fA.indoorBorder3D = []; fA.indoorArea3D = []; fs.label.indoorLabel = []; this.labelProcessor.clearCollisionCache(fs.label); for (var fu in fA.indoorData) { if (fu === "tileInfo") { continue } var e = fA.indoorData[fu]; var fp = e.defaultFloor; if (fu === fw) { fp = fv; e.currentFloor = fv } if (e.floors[fp]) { if (e.floors[fp].base) { for (var fr = 0; fr < e.floors[fp].base.length; fr++) { fA.indoorBase.push(e.floors[fp].base[fr]) } } if (e.floors[fp].contour) { for (var fr = 0; fr < e.floors[fp].contour.length; fr++) { fA.indoorBaseContour.push(e.floors[fp].contour[fr]) } } if (e.floors[fp].indoorBorder3D) { fA.indoorBorder3D.push(e.floors[fp].indoorBorder3D) } if (e.floors[fp].area3D) { fA.indoorArea3D.push(e.floors[fp].area3D) } if (e.floors[fp].pois) { fs.label.indoorLabel = fs.label.indoorLabel.concat(e.floors[fp].pois) } } } this.updateAllIconsTextureCoords(fs); var fx = this; this.labelProcessor.loadIconImages(fs, function (i) { fx.updateAllIconsTextureCoords(i) }); var fo = fq.split("_"); var fn = parseInt(fo[fo.length - 1], 10); if (fn !== fz) { continue } fx.map._featureMgr.setData(fs, this.drawIndex, 2) } this.dataBackCollideLabels(); this.map.dispatchEvent(new aB("onrefresh")) }, _removeIndoorData: function (i) { if (!i.indoorData) { return } for (var e in i.indoorData) { if (e === "tileInfo") { continue } this.map._indoorMgr.removeData(e, i.key) } }, getProcessedLabelZoom: function (fo) { var fp = b4.baseZoomInfo[fo.zoom]; if (!fp) { return false } var fn = []; for (var fq = 0; fq < fp.length; fq++) { var fr = this.getTileKey(fo, { useZoom: fp[fq] }); var e = this.tileCache.getData(fr); if (e && e.status === "ready" && e.label && e.label.status === "ready") { fn.push(fp[fq]) } } if (fn.length) { return fn } else { return false } }, getSameZoomDataFromCache: function (fn) { var fo = b4.baseZoomInfo[fn.zoom]; for (var fp = 0; fp < fo.length; fp++) { var fq = this.getTileKey(fn, { useZoom: fo[fp] }); if (fn.useZoom === fo[fp]) { continue } var e = this.tileCache.getData(fq); if (e && e.status === "ready" && e.label && e.label.status === "ready") { return e } } return false }, hasSameLabelData: function (fo, fn) { for (var e = 0; e < fn.length; e++) { if (fn[e].key === fo) { return true } } return false }, getDataByFloorName: function (fn, fo) { for (var e = 0; e < fn.length; e++) { if (fn[e].floorName === fo) { return fn[e] } } return null }, mergeIndoorLabelData: function (ft, e) { for (var fr in ft) { if (fr === "tileInfo") { continue } if (e[fr]) { var fn = ft[fr].floors; var fu = e[fr].floors; for (var fp = 0; fp < fn.length; fp++) { var fo = fn[fp]; var fs = fo.floorName; var fq = this.getDataByFloorName(fu, fs); if (fq) { if (fq.pois) { fq.pois = fq.pois.concat(fo.pois); fo.pois = fq.pois } else { fq.pois = fo.pois } } } } } }, mergeSameZoomLabelData: function (fr) { var fp = fr.label; if (!fp) { return } var e = fr.tileInfo; var fq = this.getSameZoomDataFromCache(e); if (!fq) { return } var fo = fq.label; if (!fo) { return } for (var fn = 0; fn < fp.fixedLabel.length; fn++) { if (!this.hasSameLabelData(fp.fixedLabel[fn].key, fo.fixedLabel)) { fo.hasNewData = true; fo.fixedLabel.push(fp.fixedLabel[fn]) } } for (var fn = 0; fn < fp.lineLabel.length; fn++) { if (!this.hasSameLabelData(fp.lineLabel[fn].key, fo.lineLabel)) { fo.hasNewData = true; fo.lineLabel.push(fp.lineLabel[fn]) } } for (var fn = 0; fn < fp.indoorLabel.length; fn++) { if (!this.hasSameLabelData(fp.indoorLabel[fn].key, fo.indoorLabel)) { fo.hasNewData = true; fo.indoorLabel.push(fp.indoorLabel[fn]) } } fr.label = fo; if (fq.renderData.indoorData && fr.renderData.indoorData) { this.mergeIndoorLabelData(fr.renderData.indoorData, fq.renderData.indoorData) } }, processLabelData: function (fq) { if (!fq.label) { return } if (fq.label.status === "processing") { return } fq.label.status = "processing"; var fo = this; fo.updateAllIconsTextureCoords(fq); this.labelProcessor.loadIconImages(fq, function (fr) { fo.updateAllIconsTextureCoords(fr) }); if (this.map.config.textRenderType === "canvas") { var e = this.labelProcessor.drawLabelsOnCanvas(fq, function (ft, fu) { var fs = fq.tileInfo; fo.mergeSameZoomLabelData(fq); if (ft) { if (!fq.label.textureHeights) { fq.label.textureHeights = [] } fq.label.textureHeights[fs.useZoom] = ft.height } if (fu) { if (!fq.label.indoorTextureHeights) { fq.label.indoorTextureHeights = [] } fq.label.indoorTextureHeights[fs.useZoom] = fu.height } var fr = fo._getTileTexImgKey(fs); fo._doWorkAfterLabelImageLoad(fq, ft, fu, fr) }); return } var fn = fq.label.textImageBitmap || fq.label.textImgStr; var fp = fq.label.indoorTextImageBitmap || fq.label.indoorTextImgStr; this.labelProcessor.loadImgByStr(fn, fp, function i(fw, fu) { var ft = fq.label.textureHeight; var fx = fq.label.indoorTextureHeight; fq.label.textureHeight = undefined; fq.label.indoorTextureHeight = undefined; var fs = fq.tileInfo; fo.mergeSameZoomLabelData(fq); var fv = fq.label; fv.textImgStr = ""; fv.indoorTextImgStr && (fv.indoorTextImgStr = ""); if (!fv.textureHeights) { fv.textureHeights = [] } fv.textureHeights[fs.useZoom] = ft; if (!fv.indoorTextureHeights) { fv.indoorTextureHeights = [] } fv.indoorTextureHeights[fs.useZoom] = fx; var fr = fo._getTileTexImgKey(fs); fo._doWorkAfterLabelImageLoad(fq, fw, fu, fr) }) }, _getTileTexImgKey: function (i) { var fn = i.style || this.mapStyleId || "default"; var e = fn + "_" + i.col + "_" + i.row + "_" + i.zoom; if (this.map.config.textRenderType === "canvas") { e += "_" + i.useZoom } return e }, _doWorkAfterLabelImageLoad: function (fs, fq, fo, i) { var fr = this; var fp = fs.label; fp.tileInfo = fs.tileInfo; fp.status = "ready"; if (fq || fo) { var e = fp.tileInfo; if (fq) { fq.id = i; if (!fp.textureSources) { fp.textureSources = [] } fp.textureSources[e.useZoom] = fq } if (fo) { fo.id = i + "_indoor"; if (!fp.indoorTextureSources) { fp.indoorTextureSources = [] } fp.indoorTextureSources[e.useZoom] = fo } if (fr.map._webglMapScene) { var fn = fr.map._webglMapScene._painter; if (fq) { fn._addToAsyncJob(fp.textureSources[e.useZoom]) } } } if (fs.custom !== true) { fr.tileLabels.push(fp) } if (fr.collisionTimer) { return } fr.collisionTimer = setTimeout(function () { fr.dataBackCollideLabels(); fr.collisionTimer = null }, 300) }, _updateIconTextureCoords: function (fs, fn) { if (!fs) { return } var fr = this.map; for (var fo = 0; fo < fs.length; fo++) { var fq = fs[fo]; if (!fq.iconPos) { continue } if (fr._webglMapScene) { var e = fr._webglMapScene._painter; var fp = fn + "_" + fq.iconPos.iconType; fq.iconPos.texcoord = e._iconTextureAtlasCoords[fp] || null } } }, updateAllIconsTextureCoords: function (fp) { if (fp) { if (fp.label) { var i = fp.tileInfo.style; this._updateIconTextureCoords(fp.label.fixedLabel, i); this._updateIconTextureCoords(fp.label.indoorLabel, i) } } else { var fo = this.tileCache.getAllData(); for (var fn in fo) { var e = fo[fn].data; if (e.status === "ready" && e.label) { var i = e.tileInfo.style; this._updateIconTextureCoords(e.label.fixedLabel, i); this._updateIconTextureCoords(e.label.indoorLabel, i) } } } this.updateLabels(); this.map.dispatchEvent(new aB("onrefresh")) }, cacheDataCollideLabels: function (fn) { var fp = this; var i = this.map._featureMgr; function fo() { fp.cacheLabelTimer = null; var fq; var fr = fp.map.getTilt(); var fs = fp.map.getHeading() % 360; if (fp.tileLabels.length === 0 || (fp.tileLabels.length === 1 && fp.tileLabels[0].tileInfo.zoom === 0)) { fq = i.getLabelData(); if (fq.length > 0) { fq = fp.labelProcessor.collisionTest(fq, -1) } } else { if (fr || fs) { if (this._collisionTimer) { if (!fr) { clearTimeout(this._collisionTimer) } else { if (Date.now() - fp.lastCollisionTestTime > 500) { fp.lastCollisionTestTime = Date.now() } else { clearTimeout(this._collisionTimer) } } } this._collisionTimer = setTimeout(function () { fq = fp.labelProcessor.collisionTest(fp.tileLabels); if (fq) { i.setLabelData(fq) } fp.updateLabels(); fp.map.dispatchEvent(new aB("onrefresh")); fp._collisionTimer = null }, 60); return } else { fq = fp.labelProcessor.getCachedLabels(fp.tileLabels) } } if (fq) { i.setLabelData(fq) } fp.updateLabels(); fp.map.dispatchEvent(new aB("onrefresh")) } if (!fn) { clearTimeout(fp.cacheLabelTimer); fo() } else { if (fp.cacheLabelTimer) { return } fp.cacheLabelTimer = setTimeout(function e() { fo() }, fn) } }, dataBackCollideLabels: function () { var i = this; if ((i.tileLabels && i.tileLabels.length === 0)) { return } var e; i.labelProcessor.calcLabelsCollision(i.tileLabels); e = i.labelProcessor.getCachedLabels(i.tileLabels); if (e) { i.map._featureMgr.setLabelData(e) } i.updateLabels(); i.map.dispatchEvent(new aB("onrefresh")); if (d9()) { this.labelProcessor._refreshSpotData() } }, updateLabels: function (fp) { var fq = this.map; var i = fq._featureMgr; var fn = i.getLabelData(); if (fn.length > 0) { var fo = fq.getZoom(); if (fn.labelZoom - fo < 3) { this.labelProcessor.updateLabels(fn); var e = this.labelProcessor.fixDataFormat(fn); i.setOverlayData(e[0], 2); i.setOverlayData(e[1], 3); i.setOverlayData(e[2], 4) } else { i.clearLabelOverlayData() } fq.temp.isPermitSpotOver = false; this.labelProcessor.curSpotAdded = false } }, loadRasterLayerData: function (fo, fs) { if (fs) { for (var fq = 0, fp = fo.length; fq < fp; fq++) { var fn = fo[fq]; var ft = this.getTileKey(fn); var e = this.tileCache.getData(ft); if (e && e.status === "ready") { this.map._featureMgr.setData(e, this.drawIndex, 2) } } return } for (var fq = 0, fp = fo.length; fq < fp; fq++) { var fn = fo[fq]; var ft = this.getTileKey(fn); var e = this.tileCache.getData(ft); if (!e) { this.tileCache.setData(ft, {}); var fr = this; this.loadRasterTileData(fn, function (i, fu) { fr.rasterTileDataCbk(i, fu) }) } } }, loadRasterTileData: function (i, e) { var fp = i.col; var fs = i.row; var fq = i.zoom; var fo = this.getTilesUrl(new cP(fp, fs), fq); if (!fo) { return } var fr = this.getTileKey(i); var fn = this.loadTileImage(fo, fr, e); fn.tileInfo = i }, loadTileImage: function (fo, fn, e) { var i = new Image(); i.crossOrigin = "anonymous"; i.onload = function () { e && e(this, fn) }; i.onerror = function () { e && e(null, fn) }; i.src = fo; return i }, rasterTileDataCbk: function (fq, fo) { if (!fq) { this.tileCache.removeData(fo); return } var i = fq.tileInfo; var fn = i.col; var fw = i.row; var fv = i.zoom; var e = this.tileCache.getData(fo); if (!e) { return } var fp = cE.calcLoopParam(fn, fv); var ft = fp.geoOffsetX; fq.tileInfo.loopOffsetX = ft; e.textureSource = fq; e.dataType = c5; e.tileInfo = i; e.renderData = { vertexAll: [0, 0, 0, 0, 0, 256, 0, 0, 1, 0, 256, 256, 0, 1, 1, 0, 0, 0, 0, 0, 256, 256, 0, 1, 1, 0, 256, 0, 0, 1] }; e.status = "ready"; this.tileCache.setData(fo, e); var fr = "id_" + fn + "_" + fw + "_" + fv; var fs = false; if (this.curViewTilesInfo[fr]) { e.dataType = c5; e.png8 = this.png8 || false; this.map._featureMgr.setData(e, this.drawIndex, 2); fs = true } if (fs) { var fu = new aB("onrefresh"); fu.source = "webgllayer"; this.map.dispatchEvent(fu) } }, _checkTilesLoaded: function () { this.numLoading--; if (this.map.firstTileLoad === false) { this.map.dispatchEvent(new aB("onfirsttilesloaded")); this.map.firstTileLoad = true } var e = this; if (this.numLoading === 0) { if (this._checkLoadedTimer) { clearTimeout(this._checkLoadedTimer); this._checkLoadedTimer = null } this._checkLoadedTimer = setTimeout(function () { if (e.numLoading === 0) { e.map.dispatchEvent(new aB("ontilesloaded")) } e._checkLoadedTimer = null }, 60) } }, isClickableLabel: function (e) { if (e.isDel) { return false } if (e.zoom > 9 && !e.guid) { return false } if (e.zoom <= 9 && !e.name && !e.guid) { return false } return true } }; var bg = 5; var cB = 4; var e3 = 3; var dx = 2; var fh = 1; var cD = 0; function r(e) { this._ratio = ay(); this._iconCache = {}; this._map = e; this._drawingCanvasPool = []; this._drawingCanvasHeight = 4096 } x.extend(r.prototype, { _loadIcons: function (i, fs) { var fq = 0; var fp = this; var fn = this._map.config.style; for (var fr in i) { fq++; var e = new Image(); e.id = fr; e.crossOrigin = "anonymous"; e.onload = function () { fp._iconCache[this.id].loaded = true; fq--; if (fq === 0) { fs() } this.onload = null }; e.onerror = function () { fp._iconCache[this.id] = null; fq--; if (fq === 0) { fs() } this.onerror = null }; var fo = dp.getIconSetPath(fn) + fr + ".png"; e.src = fo; this._iconCache[fr] = { loaded: false, image: e } } }, _getEmptyDrawingCanvas: function () { for (var fn = 0; fn < this._drawingCanvasPool.length; fn++) { if (this._drawingCanvasPool[fn]._free === true) { this._drawingCanvasPool[fn]._free = false; return this._drawingCanvasPool[fn] } } var e = this._createNewDrawingCanvas(); this._drawingCanvasPool.push(e); e._free = false; return e }, _createNewDrawingCanvas: function () { var e = H("canvas"); e.width = 512; e.height = this._drawingCanvasHeight; e._free = true; e._id = aI.getGUID(); var i = e.getContext("2d"); i.textBaseline = "bottom"; i.lineJoin = "round"; return e }, drawLabelsOnCanvas: function (fG, fo) { var fw = fG.label.fixedLabel.slice(0); var fC = fG.label.lineLabel.slice(0); var fn = fG.label.indoorLabel.slice(0); if (fw.length === 0 && fC.length === 0 && fn.length === 0) { fo(); return } var fr = function (fL, i) { return fL.styleId - i.styleId }; fw.sort(fr); fC.sort(fr); fn.sort(fr); var fF = {}; var e = this._getEmptyDrawingCanvas(); var fB = e.getContext("2d"); fB.clearRect(0, 0, e.width, e.height); var fJ = 0; var fx = null; var fq = 0; if (fw.length > 0) { while (fq < fw.length && !fw[fq].styleText[0]) { fq++ } if (fw[fq] && fw[fq].styleText[0]) { fx = fw[fq].styleText[0].fontSize + fw[fq].styleText[0].haloSize * 2 } } if (fx === null && fn.length > 0) { fq = 0; while (fq < fn.length && !fn[fq].styleText[0]) { fq++ } if (fn[fq] && fn[fq].styleText[0]) { fx = fn[fq].styleText[0].fontSize + fn[fq].styleText[0].haloSize * 2 } } if (fx === null && fC.length > 0) { fq = 0; while (fq < fC.length && !fC[fq].styleText[0]) { fq++ } if (fC[fq] && fC[fq].styleText[0]) { fx = fC[fq].styleText[0].fontSize + fC[fq].styleText[0].haloSize * 2 } } if (fx === null || isNaN(fx)) { fo(); return } var ft = 0; var fs = fx; var fz = {}; var fK = 0; var fA = []; for (var fE = 0; fE < fw.length; fE++) { var fv = fw[fE]; var fy = fv.name; var fD = fv.styleText; if (!fy || fD.length === 0) { continue } var fp = fv.icon; if (fv.textOnIcon && (!this._iconCache[fp] || this._iconCache[fp].loaded === false)) { fA.push(fv); fK++; if (!fz[fp]) { fz[fp] = true } continue } var fH = this._drawEachText(fB, fv, fJ, ft, fs, fx, fF); if (!fH) { continue } ft = fH.curX; fs = fH.curY; fx = fH.curLineHeight; fJ = fH.styleId } var fH = this._drawEachTypeOfLabels(fB, fn, fJ, ft, fs, fx, fF); fJ = fH.curStyleId; ft = fH.curX; fs = fH.curY; fx = fH.curLineHeight; var fH = this._drawEachTypeOfLabels(fB, fC, fJ, ft, fs, fx, fF); fJ = fH.curStyleId; ft = fH.curX; fs = fH.curY; fx = fH.curLineHeight; if (fK > 0) { var fI = this; this._loadIcons(fz, function () { fH = fI._drawEachTypeOfLabels(fB, fA, fJ, ft, fs, fx, fF); fJ = fH.curStyleId; ft = fH.curX; fs = fH.curY; fx = fH.curLineHeight; var i = fI._generateEachLabelCanvas(e, fs, fw, fC, fn, fG); fo(i[0], i[1]) }); return } var fu = this._generateEachLabelCanvas(e, fs, fw, fC, fn, fG); fo(fu[0], fu[1]) }, drawCustomLabelsOnCanvas: function (fr, fx) { if (fr.length === 0) { fx(); return } var fn = 0; var e = (fr[0].style.fontSize + (fr[0].style.haloSize || 0) * 2) || 0; var fo = e; var ft = this._getEmptyDrawingCanvas(); var fy = ft.getContext("2d"); fy.clearRect(0, 0, ft.width, ft.height); var fu = {}; var fw = -1; for (var fp = 0; fp < fr.length; fp++) { if (!fr[fp].name) { continue } var fv = this._drawEachText(fy, fr[fp], fw, fn, e, fo, fu); if (!fv) { continue } fn = fv.curX; e = fv.curY; fo = fv.curLineHeight; fw = fv.styleId } var fq = e; var fs = this._copyToNewCanvas(ft, fq); for (var fp = 0; fp < fr.length; fp++) { if (!fr[fp].name && fr[fp].style.iconSize) { this._addFixedLabelBounds(fr[fp]); continue } if (!fr[fp].textSize) { continue } this._updateFixedLabelCoords(fr[fp], fq); this._addFixedLabelBounds(fr[fp]) } fx(fs) }, _drawEachTypeOfLabels: function (fx, fr, fv, fo, fn, fp, ft) { for (var fq = 0; fq < fr.length; fq++) { var fs = fr[fq]; var fw = fs.name; var e = fs.styleText; if (!fw || e.length === 0) { continue } var fu = this._drawEachText(fx, fs, fv, fo, fn, fp, ft); if (!fu) { continue } fo = fu.curX; fn = fu.curY; fp = fu.curLineHeight; fv = fu.styleId; if (fu.curY > this._drawingCanvasHeight) { return { curX: fo, curY: fn, curLineHeight: fp, curStyleId: fv } } } return { curX: fo, curY: fn, curLineHeight: fp, curStyleId: fv } }, _drawIndoorTextLabelOnCanvas: function (fp) { var e = this._getEmptyDrawingCanvas(); var fw = e.getContext("2d"); fw.clearRect(0, 0, e.width, e.height); var fE = 0; var fv = null; var fu = 0; var fs; var fB = {}; var fA = []; for (var fq in fp) { if (fq === "tileInfo") { continue } var fo = fp[fq]; var fz = fo.defaultFloor; var ft = fo.floors; for (var fy = 0; fy < ft.length; fy++) { if (fy === fz) { continue } var fC = ft[fy]; if (!fC.pois) { continue } var fr = fC.pois; for (var fx = 0; fx < fr.length; fx++) { if (fv === null && fr[fx].styleText[0]) { fv = fr[fx].styleText[0].fontSize + fr[fx].styleText[0].haloSize * 2; fs = fv } fA.push(fr[fx]) } } } if (fv === null) { return null } fA.sort(function (fF, i) { return i.rank - fF.rank || fF.styleId - i.styleId }); var fD = this._drawEachTypeOfLabels(fw, fA, fE, fu, fs, fv, fB); fE = fD.curStyleId; fu = fD.curX; fs = fD.curY; fv = fD.curLineHeight; var fn = this._copyToNewCanvas(e, fs); return fn }, _updateIndoorLabelsCoords: function (fv, fw) { for (var fu in fv) { if (fu === "tileInfo") { continue } var e = fv[fu]; var fq = e.defaultFloor; var fr = e.floors; for (var fs = 0; fs < fr.length; fs++) { if (fs === fq) { continue } var fn = fr[fs]; if (!fn.pois) { continue } var fp = fn.pois; for (var fo = 0; fo < fp.length; fo++) { var ft = fp[fo]; if (ft.name && (!ft.textSize || ft.textSize.length === 0)) { fp.splice(fo, 1); fo--; continue } this._updateFixedLabelCoords(ft, fw); this._addFixedLabelBounds(ft) } } } }, _generateEachLabelCanvas: function (fr, fq, fs, e, fu, fn) { fq = Math.min(fq, this._drawingCanvasHeight); var ft = this._copyToNewCanvas(fr, fq); var fo = null; if (fn.renderData.indoorData) { fo = this._drawIndoorTextLabelOnCanvas(fn.renderData.indoorData); if (fo) { this._updateIndoorLabelsCoords(fn.renderData.indoorData, fo.height) } } for (var fp = 0; fp < fs.length; fp++) { if (!fs[fp].textSize) { continue } this._updateFixedLabelCoords(fs[fp], fq); this._addFixedLabelBounds(fs[fp]) } for (var fp = 0; fp < fu.length; fp++) { if (!fu[fp].textSize) { continue } this._updateFixedLabelCoords(fu[fp], fq); this._addFixedLabelBounds(fu[fp]) } for (var fp = 0; fp < e.length; fp++) { this._updateLineLabelCoords(e[fp], fq) } return [ft, fo] }, _copyToNewCanvas: function (fn, i) { if (i === 0) { return null } var fo = H("canvas"); fo.width = fn.width; fo.height = i; var e = fo.getContext("2d"); e.drawImage(fn, 0, 0, 512, i, 0, 0, 512, i); fo._id = fn._id; fn._free = true; return fo }, _drawEachText: function (fD, fr, i, fF, fE, fM, fo) { var fL = fr.name; var fv = fr.styleText ? fr.styleText[0] : fr.style; if (!fv) { return null } var fy = fv.fontSize; var f1 = fv.haloSize || 0; if (!fz) { } var fV = fv.fontRgba ? "rgba(" + fv.fontRgba.join(",") + ")" : fv.color; var fq = fv.haloRgba ? "rgba(" + fv.haloRgba.join(",") + ")" : fv.strokeColor; var f3 = fr.styleId || 0; if (f1 > 2) { f1 = 2 } var fN = []; var fC = []; var fJ = 0; if (fo && !fo[f3]) { fo[f3] = {} } var fx = fy + f1 * 2; var fO = fx; if (fr.containDescendings) { fO += 4 } if (f1 === 0) { fO += 2 } if (fr.textOnIcon) { fO = Math.max(fO, fr.iconSize[1]) } if (f3 !== i || fO > fM) { i = f3; fD.font = fy + "px sans-serif"; if (fO > fM) { var fK = fO - fM; fM += fK; fE += fK } if (f1 > 0) { fD.lineWidth = f1 * 2; fD.strokeStyle = fq } fD.fillStyle = fV } if (fr.type === "line") { var ft = fL.split(""); for (var f4 = 0; f4 < ft.length; f4++) { var fX = ft[f4]; var fG; var fP; if (fo[f3][fX]) { var fz = fo[f3][fX]; fG = fz.displaySize; fP = fz.curWordPosition } else { var fn = Math.ceil(fD.measureText(fX).width); if (fF + fn > 512) { fF = 0; fE += fO; fM = fO } if (fE > this._drawingCanvasHeight) { return { curX: fF, curY: fE, curLineHeight: fM, styleId: f3 } } var fY = fF; if (f1 > 0) { fn += f1; fY -= Math.round(f1 / 2); fD.strokeText(fX, fF, fE) } fD.fillText(fX, fF, fE); var fU = [fn, fO]; fG = [Math.round(fU[0] / 2), Math.round(fU[1] / 2)]; fP = [fY, fE - fO]; fo[f3][fX] = { displaySize: fG, curWordPosition: fP, totalHeight: fJ }; fF += fn + 2 } fN.push(fG); fC.push(fP) } fJ = Math.round(fN[0][1]) } else { if (fo[f3][fL]) { var fz = fo[f3][fL]; fN = fz.textSize; fC = fz.labelImagePosition; fJ = fz.totalHeight } else { var fA = fL.split("\\"); if (fA.length > 1 && fr.textOnIcon) { var f5 = 0; var f2 = 0; var f6 = []; var fH = 8; for (var f4 = 0; f4 < fA.length; f4++) { var fL = fA[f4]; var fw = Math.ceil(fD.measureText(fL).width); if (fw > f5) { f5 = fw } f6.push(Math.round(fw / 2)); f2 += fO } var fu = f5 + 2 * fH; var f0 = f2 + 2 * fH; if (fF + fu > 512) { fF = 0; fE += fM } fE += f2 - fO + 2 * fH; var fT = fF; var fI = fE - f0; var e = Math.round(fu / 2); var fB = this._iconCache[fr.icon].image; this.drawStretchedIcon(fD, fB, [fT, fI], fH, f5, f2); for (var f4 = 0; f4 < fA.length; f4++) { var fL = fA[f4]; var fZ = fT + (e - f6[f4]); var fW = fI + 4 + (f4 + 1) * fO; fD.fillText(fL, fZ, fW) } fN.push([Math.round(fu / 2), Math.round(f0 / 2)]); fC.push([fT, fI]); fF += fu; fM = f0; fJ = Math.round(f0 / 2) } else { for (var f4 = 0; f4 < fA.length; f4++) { var fL = fA[f4]; var fw = Math.ceil(fD.measureText(fL).width); var fu = fw; var fp = 0; if (fr.textOnIcon) { fp = 10; fu += fp * 2; if (fr.styleId === 519) { fu = fr.iconSize[0]; fp = Math.round((fu - fw) / 2) } } if (fF + fu > 512) { fF = 0; fE += fO; fM = fO } if (fE > this._drawingCanvasHeight) { return { curX: fF, curY: fE, curLineHeight: fM, styleId: f3 } } var fT = fF; var fI = fE - fO; var fS = fF; var fR = fE; if (fr.containDescendings) { fR -= 4 } if (fr.textOnIcon) { var fB = this._iconCache[fr.icon].image; var fQ = fr.iconSize; if (fr.styleId === 519) { fD.drawImage(fB, 0, 0, fQ[0], fQ[1], fT, fI, fQ[0], fQ[1]) } else { this.draw3StretchedIcon(fD, fB, [fT, fI], fp, fw, fQ[1]) } fS += fp; if (fr.iconSize[1] > fx) { fR -= (fr.iconSize[1] - fx) / 2 - 1 } fu += 1 } if (f1 > 0) { fu += f1; fT -= Math.round(f1 / 2); fD.strokeText(fL, fS, fR) } fD.fillText(fL, fS, fR); var fs = [fu, fO]; var fG = [Math.round(fs[0] / 2), Math.round(fs[1] / 2)]; fN.push(fG); fC.push([fT, fI]); fJ += Math.round(fG[1]); fF += fu } } fo[f3][fL] = { textSize: fN, labelImagePosition: fC, totalHeight: fJ } } } fr.textSize = fN; fr.labelImagePosition = fC; fr.totalHeight = fJ; return { curX: fF, curY: fE, curLineHeight: fM, styleId: f3 } }, drawStretchedIcon: function (e, fn, fo, fr, fs, i) { var fq = fo[0]; var fp = fo[1]; e.drawImage(fn, 0, 0, fr, fr, fq, fp, fr, fr); e.drawImage(fn, fr, 0, 1, fr, fq + fr, fp, fs, fr); e.drawImage(fn, fn.width - fr, 0, fr, fr, fq + fs + fr, fp, fr, fr); e.drawImage(fn, 0, fr, fr, 1, fq, fp + fr, fr, i); e.drawImage(fn, fr, fr, 1, 1, fq + fr, fp + fr, fs, i); e.drawImage(fn, fn.width - fr, fr, fr, 1, fq + fs + fr, fp + fr, fr, i); e.drawImage(fn, 0, fn.height - fr, fr, fr, fq, fp + i + fr, fr, fr); e.drawImage(fn, fr, fn.height - fr, 1, fr, fq + fr, fp + i + fr, fs, fr); e.drawImage(fn, fn.width - fr, fn.height - fr, fr, fr, fq + fs + fr, fp + i + fr, fr, fr) }, draw3StretchedIcon: function (e, i, fn, fq, fs, fr) { var fp = fn[0]; var fo = fn[1]; e.drawImage(i, 0, 0, fq, i.height, fp, fo, fq, i.height); e.drawImage(i, fq, 0, 1, i.height, fp + fq, fo, fs, i.height); e.drawImage(i, i.width - fq, 0, fq, i.height, fp + fq + fs, fo, fq, i.height) }, _updateFixedLabelCoords: function (fp, fE) { if (fE === 0) { return } var fz = []; var fL = []; var fM = 0; var fC = fp.totalHeight; var fU = fp.textSize.length; var fq = fp.direction; if (typeof fq !== "number") { fq = 0 } for (var fN = 0; fN < fU; fN++) { var fF = fp.labelImagePosition[fN]; var fD = fp.textSize[fN]; var fB = fF[0]; var fo = fF[1]; var fr = fD[0]; var fw = fD[1]; var fy = 0; var fK = 0; if (typeof fp.textMargin === "number") { fK = fp.textMargin } var fx; var e; var ft = 0; var fA = 0; if (!fp.iconPos) { if (!fp.custom) { fq = cB } } else { ft = fp.iconPos.width; fA = fp.iconPos.height } switch (fq) { case e3: var fn = fC / 2 - fw + fy * (fU - 1) / 2; fx = Math.round(-ft / 2 - fr - fK); e = Math.round(fn - fM - fy * fN); break; case fh: var fn = fC / 2 - fw + fy * (fU - 1) / 2; fx = Math.round(ft / 2 + fK); e = Math.round(fn - fM - fy * fN); break; case dx: var fn = fA / 2 + fC - fw + fy * fU; fx = Math.round(-fr / 2); e = Math.round(fn - fM - fy * fN); break; case cD: var fn = -fA / 2 - fy - fw; fx = Math.round(-fr / 2); e = Math.round(fn - fM - fy * fN); break; case cB: var fn = -fC / 2 - fy * (fU - 1) / 2; fx = Math.round(-fr / 2); e = Math.round(fn - fM - fy * fN); break }fM += fw; var fv = fx + fr; var fV = e; var fu = fv; var fT = fV + fw; var fs = fx; var fS = fT; fz.push(fx, e, fv, fV, fu, fT, fx, e, fu, fT, fs, fS); var fR = fB / 512; var fJ = (fE - fo - fw * 2) / fE; var fQ = (fB + fr * 2) / 512; var fI = fJ; var fP = fQ; var fH = (fE - fo) / fE; var fO = fR; var fG = fH; fL.push(fR, fJ, fQ, fI, fP, fH, fR, fJ, fP, fH, fO, fG) } if (!fp.textPos) { fp.textPos = {} } fp.textPos.vertex = fz; fp.textPos.texcoord = fL }, _addFixedLabelBounds: function (fu) { var fq = 1000; var fo = 1000; var fn = -1000; var e = -1000; if (fu.iconPos) { var fs = fu.iconPos["vertex"]; for (var ft = 0, fp = fs.length; ft < fp; ft += 2) { var fy = fs[ft]; var fw = fs[ft + 1]; if (fy < fq) { fq = fy } if (fy > fn) { fn = fy } if (fw < fo) { fo = fw } if (fw > e) { e = fw } } } if (fu.custom && fu.style.iconSize && !fu.name) { var fv = fu.style.iconSize; var fx = fu.direction; switch (fx) { case cB: fq = -Math.round(fv[0] / 2); fo = -Math.round(fv[1] / 2); fn = Math.round(fv[0] / 2); e = Math.round(fv[1] / 2); break; case dx: fq = -Math.round(fv[0] / 2); fo = 0; fn = Math.round(fv[0] / 2); e = fv[1]; break } } if (fu.textPos) { var fr = fu.textPos["vertex"]; for (var ft = 0, fp = fr.length; ft < fp; ft += 2) { var fy = fr[ft]; var fw = fr[ft + 1]; if (fy < fq) { fq = fy } if (fy > fn) { fn = fy } if (fw < fo) { fo = fw } if (fw > e) { e = fw } } } fu.bds = [fq, fo, fn, e] }, _updateLineLabelCoords: function (fF, fv) { if (fv === 0) { return } var fo = fF.wordsInfo; var fC = fF.wordCount; if (!fF.labelImagePosition) { return } var fx = fF.labelImagePosition.slice(0); if (fF.reverse) { fx.reverse() } var fO = 1000; var fL = 1000; var fM = -1000; var fK = -1000; for (var fG = 0; fG < fC; fG++) { var fP = fx[fG]; var fN = fP[0]; var fD = fP[1]; var fB = fF.textSize[fG]; var fu = fB[0]; var e = fB[1]; var ft = fN / 512; var fA = (fv - fD - e * 2) / fv; var fr = (fN + fu * 2) / 512; var fz = fA; var fp = fr; var fy = (fv - fD) / fv; var fn = ft; var fw = fy; fo[fG].size = [fu, e]; fo[fG].texcoord = [ft, fA, fr, fz, fp, fy, ft, fA, fp, fy, fn, fw]; var fJ = fo[fG].offset[0]; var fI = fo[fG].offset[1]; var fH = fJ - fu / 2; var fs = fI + e / 2; var fq = fI - e / 2; var fE = fJ + fu / 2; if (fH < fO) { fO = fH } if (fE > fM) { fM = fE } if (fq < fL) { fL = fq } if (fs > fK) { fK = fs } } fF.bds = [fO, fL, fM, fK] } }); var bJ = { 0: "00000000", 16: "00010000", 32: "00100000", 48: "00110000", 64: "01000000", 96: "01100000" }; function br(fn, fo, fp) { var e = fn.bds; if (!e) { return false } var i = fn.tracer; var fs; if (i) { if (!bJ[i]) { fs = i.toString(2); if (fs.length < 8) { fs = new Array(8 - fs.length + 1).join("0") + fs } bJ[i] = fs } fs = bJ[i]; var fr = b4.mapZoomStartZoomMapping[fo]; return fs[fo - fr] === "1" } var fq = fn.displayRange; if (fp >= fq[0] && fp <= fq[1]) { return true } return false } function b5(i, e) { this.map = i.map; this.layer = i; e = e || []; this.allLabels = []; this._spotData = []; this._strategyInfo = null; this.RANK1 = 1000000; this.RANK2 = 2000000; this.RANK3 = 3000000; this.RANK4 = 4000000; this.RANK5 = 5000000; this._useRound = false; this._mapIsMoving = false; this._onMapIdleCallback = e.onMapIdleCallback; this.map.temp.isPermitSpotOver = true; this.currentSelectedLabel = null; this.map._labelProcessor = this; this.iconCache = {}; this.fixedLabelData = []; this.lineLabelData = []; this.highlightLabelData = []; this._iconLoadTimer = null; this._labelTextCanvas = null; if (this.map.config.textRenderType === "canvas") { this._labelTextCanvas = this.map.tileMgr.getLabelTextCanvas() } this.bind() } x.extend(b5.prototype, { bind: function () { var fn = this.map; var i = this; fn.addEventListener("mapstatusbusy_inner", function (fo) { i._useRound = false; i._mapIsMoving = true }); fn.addEventListener("mapstatusidle_inner", function (fo) { i._useRound = true; i._mapIsMoving = false }); fn.addEventListener("onspotmouseover", function (fq) { if (!this.temp.isPermitSpotOver) { return } if (fq.spots.length > 0) { var fp = fq.spots[0].userdata.uid; var fr = fq.spots[0].userdata.tilePosStr; var fo = i.getLabelByUid(fp, fr); fo && fo.formatedData && i._toHighlightColor(fo.formatedData) } }); fn.addEventListener("onspotmouseout", function (fq) { if (!this.temp.isPermitSpotOver) { return } if (fq.spots.length > 0) { var fp = fq.spots[0].userdata.uid; var fr = fq.spots[0].userdata.tilePosStr; var fo = i.getLabelByUid(fp, fr); fo && fo.formatedData && i._toDefaultColor(fo.formatedData) } }); fn.addEventListener("spotclick", function (fq) { if (fq.spots && fq.spots.length > 0) { if (fq.spots[0].userdata.zoom < 10) { return } var fp = fq.spots[0].userdata.uid; var fr = fq.spots[0].userdata.tilePosStr; if (i.currentSelectedLabel && (i.currentSelectedLabel.uid !== fp || i.currentSelectedLabel.tilePosStr !== fr)) { i._recoverNormalState() } var fo = i.getLabelByUid(fp, fr); fo && i._changeBaseMapState(fo) } else { i._recoverNormalState() } }); fn.on("spot_status_reset", function () { i._recoverNormalState() }); fn.on("spot_highlight", function (fp) { var fo = i.getLabelByUid(fp.uid, fp.tilePosStr); fo && fo.formatedData && i._toHighlightColor(fo.formatedData) }); fn.addEventListener("mousemove", function (fo) { if (i.curSpotAdded) { return } if (this.currentOperation !== cy.idle || i._mapIsMoving === true) { return } i._refreshSpotData(); this.temp.isPermitSpotOver = true; i.curSpotAdded = true }); if (d9()) { function e() { i._refreshSpotData() } fn.addEventListener("mapstatusidle_inner", e) } fn.on("style_loaded", function () { if (i.map.config.textRenderType === "canvas" && !i._labelTextCanvas) { i._labelTextCanvas = i.map.tileMgr.getLabelTextCanvas() } }) }, getLabelByUid: function (fr, fs) { var e = this.map._featureMgr.getResult().tileLabels; for (var fq = 0; fq < e.length; fq++) { var fn = e[fq].fixedLabel; for (var fp = 0; fp < fn.length; fp++) { if (e[fq].fixedLabel[fp].guid === fr && e[fq].fixedLabel[fp].tilePosStr === fs) { return e[fq].fixedLabel[fp] } } var fo = e[fq].indoorLabel; for (var fp = 0; fp < fo.length; fp++) { if (e[fq].indoorLabel[fp].guid === fr && e[fq].indoorLabel[fp].tilePosStr === fs) { return e[fq].indoorLabel[fp] } } } return null }, getTileByLabelUid: function (fr) { var e = this.map._featureMgr.getResult().tileLabels; for (var fq = 0; fq < e.length; fq++) { var fn = e[fq].fixedLabel; for (var fp = 0; fp < fn.length; fp++) { if (e[fq].fixedLabel[fp].guid === fr) { return e[fq] } } var fo = e[fq].indoorLabel; for (var fp = 0; fp < fo.length; fp++) { if (e[fq].indoorLabel[fp].guid === fr) { return e[fq] } } } return null }, _toHighlightColor: function (fn) { if (fn.tempRank && fn.tempRank === this.RANK5) { return } var e = this.map._featureMgr.getResult().eleData[4] || []; var fp = false; for (var fo = 0; fo < e.length; fo++) { if (e[fo] === fn || (e[fo].guid === fn.guid && e[fo].tilePosStr === fn.tilePosStr && e[fo].zoom === fn.zoom)) { fp = true; break } } if (fp) { return } e.push(fn); this.map._featureMgr.setOverlayData(e, 4); this.map.dispatchEvent(new aB("onrefresh")) }, _toDefaultColor: function (fn) { if (fn.tempRank && fn.tempRank === this.RANK5) { return } var e = this.map._featureMgr.getResult().eleData[4] || []; for (var fo = 0; fo < e.length; fo++) { if (fn === e[fo] || (fn.guid === e[fo].guid && fn.tilePosStr === e[fo].tilePosStr && fn.zoom === e[fo].zoom)) { e.splice(fo, 1); break } } this.map._featureMgr.setOverlayData(e, 4); this.map.dispatchEvent(new aB("onrefresh")) }, _changeBaseMapState: function (i) { var fp = i.guid; var ft = i.formatedData.guidExt; var fv = { guid: fp, tilePosStr: i.tilePosStr, guidExt: ft }; this._strategyInfo = fv; this.currentSelectedLabel = i; var fo = this.map._featureMgr; var e = fo.getLabelData(); e = this.collisionTest(e); this.updateLabels(e); var fw = this.fixDataFormat(e); fo.setOverlayData(fw[0], 2); fo.setOverlayData(fw[1], 3); fo.setOverlayData(fw[2], 4); var fn = this.getTileByLabelUid(fp); this.currentSelectedLabel.tileInfo = fn.tileInfo; var fu = fn.tileInfo.zoom; var fs = this.layer.tileCache.getAllData(); for (var fr in fs) { var fq = fs[fr].data; if (!fq.label) { continue } this.clearCollisionCache(fq.label) } this.map.dispatchEvent(new aB("onrefresh")) }, _recoverNormalState: function () { this._strategyInfo = null; var fs = false; var fq = this.map._featureMgr.getLabelData(); if (this.currentSelectedLabel) { var fn = this.currentSelectedLabel.guid; this.clearCollisionCache(this.getTileByLabelUid(fn)); var fp = this.layer.tileCache.getAllData(); for (var fo in fp) { var fr = fp[fo].data; if (!fr.label) { continue } this.clearCollisionCache(fr.label) } this.currentSelectedLabel.tempRank = null; this.currentSelectedLabel = null; fs = true } fq = this.collisionTest(fq); this.updateLabels(fq); var e = this.fixDataFormat(fq); var i = this.map._featureMgr; i.setOverlayData(e[0], 2); i.setOverlayData(e[1], 3); i.setOverlayData([], 4); this.map.dispatchEvent(new aB("onrefresh")); if (fs) { this.curSpotAdded = false; this._refreshSpotData() } }, loadIconImages: function (fp, fA) { var fs = fp.label; var fq = fp.tileInfo.style; var fn = fs.fixedLabel; var fx = fs.indoorLabel; var fB = fn.length + fx.length; var fu = this; var fo = 0; var fz = 200; for (var fr = 0; fr < fB; fr++) { var ft; if (fr < fn.length) { ft = fn[fr] } else { ft = fx[fr - fn.length] } if (!ft.iconPos) { continue } var fw = ft.iconPos.iconType; var fy = fq + "_" + fw; fo++; if (this.iconCache[fy]) { if (this.iconCache[fy].loaded) { fA(fp) } continue } var fv = new Image(); fv.id = fy; fv.crossOrigin = "anonymous"; fv.onload = function () { fu.iconCache[this.id].loaded = true; fu._addToIconTexture(this); if (fu._iconLoadTimer === null) { fu._iconLoadTimer = setTimeout(function () { fA(); fu._iconLoadTimer = null }, fz) } this.onload = null }; fv.onerror = function () { if (!fu._iconLoadTimer) { fu._iconLoadTimer = setTimeout(function () { fA(); fu._iconLoadTimer = null }, fz) } fu.iconCache[this.id] = null; this.onerror = null }; var e = dp.getIconSetPath(this.map.config.style) + fw + ".png"; fv.src = e; this.iconCache[fy] = { loaded: false, image: fv } } return fo }, _addToIconTexture: function (fq) { if (!this.map._webglMapScene) { return } var fs = this.map._webglMapScene._painter; var e = fs._iconTextureAtlas.addTexture(fq); fs._iconTextureAtlasOffset[fq.id] = e; var fv = 0 * fq.width / 1024 + e.width; var fp = 0 * fq.height / 1024 + e.height; var fu = fq.width / 1024 + e.width; var fo = fp; var ft = fu; var fn = fq.height / 1024 + e.height; var fr = fv; var i = fn; fs._iconTextureAtlasCoords[fq.id] = [fv, fp, fu, fo, ft, fn, fv, fp, ft, fn, fr, i] }, loadImgByStr: function (fo, fp, fq) { if (!fo && !fp) { fq && fq(null, null); return } if (typeof fo === "object" && typeof fp === "object") { fq(fo, fp); return } var i = 0; var fn = null; var e = null; if (fo) { i++; fn = new Image(); fn.onload = function () { i--; if (i === 0) { fq && fq(this, e) } this.onload = null }; fn.src = fo } if (fp) { i++; e = new Image(); e.onload = function () { i--; if (i === 0) { fq && fq(fn, this) } this.onload = null }; e.src = fp } }, collisionTest: function (ft, f6, fL) { if (!ft) { return [] } var fD = this.map; var fS = fD.getHeading(); fS = this.calcLoopHeading(fS); var f1 = fD.height; var fX = this.allLabels; fX.length = 0; ft.sort(function (f8, i) { var ga = f8.tileInfo; var f9 = i.tileInfo; if (ga.col * ga.row < f9.col * f9.row) { return -1 } else { return 1 } }); var fu = ft.labelZoom; var fE = fD.getTilt(); var fw = fD.getZoom(); var fW; if (fL) { fW = fL } else { fW = this.getZoomStep() } for (var f4 = 0, f2 = ft.length; f4 < f2; f4++) { var fH = ft[f4]; var fs = fH.tileInfo; var fp = fs.zoom; var fV = fs.loopOffsetX / Math.pow(2, 18 - fp); if (!fS && !fE) { if (fH.unnecessaryCollisionTest && fH.unnecessaryCollisionTest[fL]) { continue } } var fO = fH.fixedLabel || []; for (var f3 = 0, fJ = fO.length; f3 < fJ; f3++) { var fq = fO[f3]; fq.zoom = fp; if (f6 === -1 && fq.isDel) { continue } if (!br(fq, fs.useZoom, fw)) { fq.isDel = true; continue } this.calcCollisionBounds(fq, fW, fV, f1); fX.push(fq) } var fN = fH.indoorLabel || []; for (var f3 = 0, fJ = fN.length; f3 < fJ; f3++) { var fq = fN[f3]; fq.zoom = fp; if (f6 === -1 && fq.isDel) { continue } if (!br(fq, fs.useZoom)) { fq.isDel = true; continue } this.calcCollisionBounds(fq, fW, fV, f1); fX.push(fq) } var fr = fH.lineLabel || []; for (var f3 = 0, fJ = fr.length; f3 < fJ; f3++) { var fq = fr[f3]; if (f6 === -1 && fq.isDel) { continue } if (!br(fq, fs.useZoom)) { fq.isDel = true; continue } var f7 = fq.pt; var fK = fD.pointToPixelIn(f7, { zoom: fW, useRound: this._useRound }); var fI = fK.x + fV; var fG = f1 - fK.y; var fM = fq.bds; var f0 = fM[0]; var fY = fM[1]; var fB = fM[2]; var fA = fM[3]; var fT = f0; var fR = fY; var fz = fB; var fy = fA; if ((fS >= 0 && fS < 45) || (fS >= 315 && fS < 360)) { fT = f0; fR = fY; fz = fB; fy = fA } else { if (fS >= 45 && fS < 135) { fT = fY; fR = -fB; fz = fA; fy = -f0 } else { if (fS >= 135 && fS < 225) { fT = -fB; fR = -fA; fz = -f0; fy = -fY } else { if (fS >= 225 && fS < 315) { fT = -fA; fR = f0; fz = -fY; fy = fB } } } } fq._tempBds = [fI + fT, fG + fR, fI + fz, fG + fy]; fX.push(fq) } } var fU = this._strategyInfo; if (fU) { var fx = fU.guid; var fF = fU.guidExt; var fn = false; for (var f4 = 0, f2 = fX.length; f4 < f2; f4++) { var fZ = fX[f4]; delete fZ.tempRank; if (!this.layer.isClickableLabel(fZ) || (fF === 1 && !fZ.guidExt)) { continue } if (fx === fZ.guid && fU.tilePosStr === fZ.tilePosStr) { fZ.tempRank = this.RANK5; fn = true } } if (!fn && this.currentSelectedLabel) { this.currentSelectedLabel.tempRank = this.RANK5; var fs = this.currentSelectedLabel.tileInfo; var fp = fs.zoom; var fV = fs.loopOffsetX / Math.pow(2, 18 - fp); this.calcCollisionBounds(this.currentSelectedLabel, fW, fV, f1); fX.push(this.currentSelectedLabel) } } else { for (var f4 = 0, f2 = fX.length; f4 < f2; f4++) { var fZ = fX[f4]; if (fZ.type === "line" || !fZ.iconPos) { continue } delete fZ.tempRank } } fX.sort(function (f9, f8) { var ga = f9.tempRank ? f9.tempRank : f9.rank; var i = f8.tempRank ? f8.tempRank : f8.rank; return i - ga || f9.startZoom - f8.startZoom || f8.pt.lng - f9.pt.lng || f8.pt.lat - f9.pt.lat }); var fo = 0; if (fE > 0) { fo = 6 } var fw = fD.getZoom(); if (fw >= 8 && fw < 9) { fw < 8.5 ? (fo = 6) : (fo = 3) } var e = 2; if (fw < 6 && fw >= 5) { e = -1 } for (var f4 = 0, f2 = fX.length; f4 < f2; f4++) { var fQ = fX[f4]; var fv = fQ._tempBds; fQ.isDel = false; fQ._intersectIdx = []; for (f3 = f4 + 1; f3 < f2; f3++) { var fC = fX[f3]; var f5 = fC._tempBds; if (!(fv[2] + fo + e < f5[0] - fo || fv[0] - fo > f5[2] + fo + e || fv[3] + fo + e < f5[1] - fo || fv[1] - fo > f5[3] + fo + e)) { fQ._intersectIdx.push(f3) } } } for (var f4 = 0, f2 = fX.length; f4 < f2; f4++) { var fZ = fX[f4]; if (fZ.isDel === false) { var fP = fZ._intersectIdx; for (var f3 = 0, fJ = fP.length; f3 < fJ; f3++) { fX[fP[f3]].isDel = true } } } return ft }, calcCollisionBounds: function (ft, fr, i, fs) { var fq = ft.pt; var fo = this.map; var fp = fo.pointToPixelIn(fq, { zoom: fr, useRound: this._useRound }); var fn = fp.x + i; var fu = fs - fp.y; var e = ft.bds; ft._tempBds = [fn + e[0], fu + e[1], fn + e[2], fu + e[3]] }, getZoomStep: function () { var fn = this.map.getZoom(); var e = Math.floor(fn); var i = fn - e >= 0.5 ? e + 0.5 : e; return i }, clearCollisionCache: function (e) { if (!e) { return } e.cacheState = null; e.unnecessaryCollisionTest = null }, getCachedLabels: function (e) { e = e || []; var fn = this.getZoomStep(); var fp = []; var fr = false; for (var fo = 0; fo < e.length; fo++) { var fq = e[fo]; if (!fq.cacheState || !fq.cacheState[fn]) { fr = true; break } if (fq.hasNewData) { fr = true; break } } if (fr) { this.calcLabelsCollision(e) } return e }, calcLabelsCollision: function (fn) { var fp = this.getZoomStep(); var fq = {}; var ft; var fo; fn = this.collisionTest(fn, undefined, fp); for (var fs = 0; fs < fn.length; fs++) { ft = fn[fs]; fo = ft.tileInfo; var fx = fo.col + "," + fo.row; fq[fx] = 1 } var e = {}; for (var fs = 0; fs < fn.length; fs++) { ft = fn[fs]; if (!ft.cacheState) { ft.cacheState = {} } fo = ft.tileInfo; var fw = fo.col; var fu = fo.row; fx = fw + "," + fu; if (ft.cacheState[fp] === "stable") { e[fx] = 1; if (!ft.hasNewData) { continue } } for (var fr = 0; fr < ft.fixedLabel.length; fr++) { var fv = ft.fixedLabel[fr]; if (!fv.cachedIsDel) { fv.cachedIsDel = {} } fv.cachedIsDel[fp] = fv.isDel } for (var fr = 0; fr < ft.indoorLabel.length; fr++) { var fv = ft.indoorLabel[fr]; if (!fv.cachedIsDel) { fv.cachedIsDel = {} } fv.cachedIsDel[fp] = fv.isDel } for (var fr = 0; fr < ft.lineLabel.length; fr++) { var fv = ft.lineLabel[fr]; if (!fv.cachedIsDel) { fv.cachedIsDel = {} } fv.cachedIsDel[fp] = fv.isDel } if (fq[(fw - 1) + "," + (fu - 1)] && fq[(fw - 1) + "," + fu] && fq[(fw - 1) + "," + (fu + 1)] && fq[fw + "," + (fu - 1)] && fq[fw + "," + (fu + 1)] && fq[(fw + 1) + "," + (fu - 1)] && fq[(fw + 1) + "," + fu] && fq[(fw + 1) + "," + (fu + 1)]) { ft.cacheState[fp] = "stable"; e[fx] = 1 } else { if (!ft.cacheState[fp]) { ft.cacheState[fp] = "unstable" } } } for (var fs = 0; fs < fn.length; fs++) { var ft = fn[fs]; fo = ft.tileInfo; var fx = fo.col + "," + fo.row; var fw = +fo.col; var fu = +fo.row; if (e[(fw - 1) + "," + (fu - 1)] && e[(fw - 1) + "," + fu] && e[(fw - 1) + "," + (fu + 1)] && e[fw + "," + (fu - 1)] && e[fw + "," + (fu + 1)] && e[(fw + 1) + "," + (fu - 1)] && e[(fw + 1) + "," + fu] && e[(fw + 1) + "," + (fu + 1)]) { if (!ft.unnecessaryCollisionTest) { ft.unnecessaryCollisionTest = {} } ft.unnecessaryCollisionTest[fp] = 1 } } fn.hasNewData = false }, updateLabels: function (fo) { var e = this.map; var fu = e.getZoom(); var fw = e.getHeading(); fw = this.calcLoopHeading(fw); var fv = e.getTilt(); var fp = this.getZoomStep(); for (var ft = 0, fq = fo.length; ft < fq; ft++) { var fs = fo[ft]; var fn = fs.tileInfo; var fr = fn.loopOffsetX || 0; this.updateFixedLabel(fs.fixedLabel, fv, fw, fs, fp, fu, fr); this.updateFixedLabel(fs.indoorLabel, fv, fw, fs, fp, fu, 0); this.updateLineLabel(fs.lineLabel, fv, fw, fs, fp) } }, updateFixedLabel: function (ft, fv, i, fx, fp, e, fo) { if (ft.length === 1) { } for (var fy = 0, fq = ft.length; fy < fq; fy++) { var fu = ft[fy]; if (!fu.cachedIsDel) { continue } if (!fv && !i && fx.cacheState && fx.cacheState[fp]) { fu.isDel = fu.cachedIsDel[fp]; if (typeof fu.isDel === "undefined") { fu.isDel = fu.cachedIsDel[fp] = true } } if (fu.startScale > e) { fu.isDel = true } if (fu.isDel) { continue } var fA = fu.pt; var fn = fu.iconPos; if (fn && fn.texcoord) { if (!fn.rtVertex) { fn.rtVertex = []; var fC = fn.vertex; var fr = ae(fA.lng); var fz = ae(fA.lat); fn.rtVertex = [fr[0], fz[0], fr[1], fz[1], 0, fC[0], fC[1], 0, 0, fn.texcoord[0], fn.texcoord[1], fr[0], fz[0], fr[1], fz[1], 0, fC[2], fC[3], 0, 0, fn.texcoord[2], fn.texcoord[3], fr[0], fz[0], fr[1], fz[1], 0, fC[4], fC[5], 0, 0, fn.texcoord[4], fn.texcoord[5], fr[0], fz[0], fr[1], fz[1], 0, fC[6], fC[7], 0, 0, fn.texcoord[6], fn.texcoord[7], fr[0], fz[0], fr[1], fz[1], 0, fC[8], fC[9], 0, 0, fn.texcoord[8], fn.texcoord[9], fr[0], fz[0], fr[1], fz[1], 0, fC[10], fC[11], 0, 0, fn.texcoord[10], fn.texcoord[11]] } } var fB = fu.textPos; if (fB) { if (!fB.rtVertex) { fB.rtVertex = []; var fC = fB.vertex; var fs = fB.rtVertex; var fr = ae(fA.lng); var fz = ae(fA.lat); var fE = ae(fo); for (var fw = 0, fD = fC.length; fw < fD; fw += 12) { fs.push(fr[0], fz[0], fr[1], fz[1], 0, fC[fw], fC[fw + 1], fE[0], fE[1], fB.texcoord[0], fB.texcoord[1]); fs.push(fr[0], fz[0], fr[1], fz[1], 0, fC[fw + 2], fC[fw + 3], fE[0], fE[1], fB.texcoord[2], fB.texcoord[3]); fs.push(fr[0], fz[0], fr[1], fz[1], 0, fC[fw + 4], fC[fw + 5], fE[0], fE[1], fB.texcoord[4], fB.texcoord[5]); fs.push(fr[0], fz[0], fr[1], fz[1], 0, fC[fw + 6], fC[fw + 7], fE[0], fE[1], fB.texcoord[6], fB.texcoord[7]); fs.push(fr[0], fz[0], fr[1], fz[1], 0, fC[fw + 8], fC[fw + 9], fE[0], fE[1], fB.texcoord[8], fB.texcoord[9]); fs.push(fr[0], fz[0], fr[1], fz[1], 0, fC[fw + 10], fC[fw + 11], fE[0], fE[1], fB.texcoord[10], fB.texcoord[11]) } } } } }, updateLineLabel: function (ft, fX, fN, fI, fJ) { ft = ft || []; var fD = this.map; var fw = fD.getZoomUnits(); for (var fW = 0, fU = ft.length; fW < fU; fW++) { var fs = ft[fW]; if (!fs.cachedIsDel) { continue } if (!fX && !fN && fI.cacheState && fI.cacheState[fJ]) { fs.isDel = fs.cachedIsDel[fJ]; if (typeof fs.isDel === "undefined") { fs.isDel = fs.cachedIsDel[fJ] = true } } if (fs.isDel) { continue } if (!fs.styleText || fs.styleText.length === 0) { continue } var fu = fs.mcInTile; var fQ = fu.x; var fO = fu.y; var fH = fs.wordsInfo; var fF = fs.labelAngle; var fB = false; var fP = 0; if (fN !== 0) { var fC = fH[0].angle; var fT = this.calcLoopHeading(fC - fN); var fz = this.calcLoopHeading(fF - fN); if (fT > 45 && fT < 315) { if (fT > 45 && fT <= 135) { fP = 270 } else { if (fT > 135 && fT <= 225) { fP = 180 } else { if (fT > 225 && fT < 315) { fP = 90 } } } if (fF > 225 && fF <= 315 && fP <= 180) { fB = true } else { if ((fF >= 0 && fF <= 45 || fF >= 315 && fF < 360) && fP >= 180) { fB = true } } } } for (var fV = 0, fx = fH.length; fV < fx; fV++) { var fS = fH[fV]; var fA = fS.calcInfo; var fM = fS.offset[0]; var fK = fS.offset[1]; if (!fS.size) { continue } var e = fS.size[0]; var fn = fS.size[1]; var fy = fS.angle; if (!fA) { fA = {} } if (fN !== fA.mapHeading || fw !== fA.zoomUnits) { fA.mapHeading = fN; fA.zoomUnits = fw; if (fB) { var fE = fH[fx - 1 - fV]; fM = fE.offset[0]; fK = fE.offset[1]; fy = fE.angle } var fp = fQ + fM * fw; var fo = fO + fK * fw; fA.rotationCenter = { lng: fp, lat: fo }; fA.calcHeading = fP; fA.angle = fy; fA.offsetX = fM; fA.offsetY = fK; fS.calcInfo = fA } if (!fS.rtVertex) { fS.rtVertex = [] } fS.rtVertex.length = 0; var fG = fA.calcHeading + fA.angle; var fq = fA.rotationCenter; fM = fA.offsetX; fK = fA.offsetY; var fr = Math.round(fM - e / 2); var fR = Math.round(fM + e / 2); var fL = Math.round(fK + fn / 2); var fv = Math.round(fK - fn / 2); fS.rtVertex.push(fQ, fO, fS.z, fr, fv, fq.lng, fq.lat, fG, fS.texcoord[0], fS.texcoord[1], fQ, fO, fS.z, fR, fv, fq.lng, fq.lat, fG, fS.texcoord[2], fS.texcoord[3], fQ, fO, fS.z, fR, fL, fq.lng, fq.lat, fG, fS.texcoord[4], fS.texcoord[5], fQ, fO, fS.z, fr, fv, fq.lng, fq.lat, fG, fS.texcoord[6], fS.texcoord[7], fQ, fO, fS.z, fR, fL, fq.lng, fq.lat, fG, fS.texcoord[8], fS.texcoord[9], fQ, fO, fS.z, fr, fL, fq.lng, fq.lat, fG, fS.texcoord[10], fS.texcoord[11]) } } }, calcLoopHeading: function (e) { while (e >= 360) { e -= 360 } while (e < 0) { e += 360 } return e }, fixDataFormat: function (fw) { var fo = this.fixedLabelData; var e = this.lineLabelData; var fn = this.highlightLabelData; var fD = 0; var fs = 0; var fB = 0; var fC; if (this.currentSelectedLabel) { var fr = this.getLabelByUid(this.currentSelectedLabel.guid, this.currentSelectedLabel.tilePosStr); if (!fr || fr.isDel) { fo[fD] = this.currentSelectedLabel.formatedData; fD++; fn[fB] = this.currentSelectedLabel.formatedData; fB++ } } for (var fA = 0; fA < fw.length; fA++) { var fu = fw[fA]; var ft = fu.fixedLabel; var fp = fu.indoorLabel; var fz = fu.lineLabel; fC = this.fixFixedLabelDataFormat(ft, fu, fo, fD, fn, fB); fD = fC[0]; fB = fC[1]; fC = this.fixFixedLabelDataFormat(fp, fu, fo, fD, fn, fB, true); fD = fC[0]; fB = fC[1]; e[fs] = { tileInfo: fu.tileInfo, lineLabels: [] }; for (var fy = 0; fy < fz.length; fy++) { if (fz[fy].isDel) { continue } var fv = fz[fy].wordsInfo; if (fv) { for (var fx = 0; fx < fv.length; fx++) { if (!fv[fx].rtVertex) { continue } var fq = fv[fx].formatedData; if (!fq) { fq = { textureSource: fu.textureSources[fz[fy].processedInZoom], textureHeight: fu.textureHeights[fz[fy].processedInZoom], renderData: { vertex: fv[fx].rtVertex, textureCoord: fv[fx].texcoord } }; fv[fx].formatedData = fq } e[fs].lineLabels.push(fq) } } } fs++ } fo.length = fD; e.length = fs; fn.length = fB; return [e, fo, fn] }, fixFixedLabelDataFormat: function (fr, fu, fv, fs, fp, e, ft) { for (var i = 0; i < fr.length; i++) { if (fr[i].isDel) { continue } var fq = fr[i].textPos; var fo = fr[i].iconPos; var fn = null; if (fq && fq.rtVertex) { if (!fr[i].formatedData) { fn = { guid: fr[i].guid, guidExt: fr[i].guidExt, tilePosStr: fr[i].tilePosStr, zoom: fr[i].zoom, tempRank: fr[i].tempRank, textureSource: fu.textureSources[fr[i].processedInZoom], textureHeight: fu.textureHeights[fr[i].processedInZoom], renderData: { vertex: fq.rtVertex, textureCoord: fq.texcoord } }; if (ft && fr[i].onDefaultFloor === false) { fn.textureSource = fu.indoorTextureSources[fr[i].processedInZoom]; fn.textureHeight = fu.indoorTextureHeights[fr[i].processedInZoom] } fr[i].formatedData = fn } else { fn = fr[i].formatedData; fn.tempRank = fr[i].tempRank } if (this.currentSelectedLabel && fn.guid === this.currentSelectedLabel.guid && fn.tilePosStr === this.currentSelectedLabel.tilePosStr) { fp[e] = fn; e++ } } if (fo && fo.rtVertex) { if (fn) { if (!fn.iconRenderData) { fn.iconRenderData = { vertex: fo.rtVertex, textureCoord: fo.texcoord } } } else { fn = { guid: fr[i].guid, guidExt: fr[i].guidExt, zoom: fr[i].zoom, tempRank: fr[i].tempRank, iconRenderData: { vertex: fo.rtVertex, textureCoord: fo.texcoord } }; fr[i].formatedData = fn } } fv[fs] = fn; fs++ } return [fs, e] }, _refreshSpotData: function () { this._spotData.length = 0; var ft = this.map; var fr = Math.floor(ft.getZoom()); var fn = this.map._featureMgr.getLabelData(); if (fn) { for (var fp = 0, fo = fn.length; fp < fo; fp++) { this._addFixedSpotData(fn[fp].fixedLabel, fr); this._addFixedSpotData(fn[fp].indoorLabel, fr) } } var fu = this.currentSelectedLabel; if (fu && !this.getTileByLabelUid(fu.guid, fu.tilePosStr)) { var fq = this._getSpotDataFromLabel(this.currentSelectedLabel); if (fq) { this._spotData.push(fq) } } var fs = new aB("onspotsdataready"); fs.spots = this._spotData; ft._spotDataOnCanvas = this._spotData; ft.dispatchEvent(fs) }, _addFixedSpotData: function (fp, fo) { for (var e = 0; e < fp.length; e++) { var fn = fp[e]; if (!this.layer.isClickableLabel(fn) || (fn.guidExt === 1 && fn.startScale > fo)) { continue } var i = fp[e].spot || this._getSpotDataFromLabel(fp[e]); if (i) { this._spotData.push(i) } } }, _getSpotDataFromLabel: function (fn) { var fq = this.map; if (!fn.bds) { return null } var e = fn.bds.slice(0); var fo = null; if (fn.iconPos) { fo = new e5(fn.pt.lng, fn.pt.lat) } var i = fn.name ? fn.name.replace("\\\\", "<br>") : ""; if (fn.iconPos && fn.iconPos.iconType.indexOf("ditie") > -1 && fq.getZoom() > 14) { i = "" } var fp = { n: i, pt: new e5(fn.pt.lng, fn.pt.lat), userdata: { iconPoint: fo, uid: fn.guid, name: i, mapPoi: true, type: fn.iconPos ? fn.iconPos.iconType : "", rank: fn.rank, zoom: fn.zoom, tilePosStr: fn.tilePosStr }, bd: e, tag: "MAP_SPOT_INFO" }; fn.spot = fp; return fp }, drawLabelsOnCanvas: function (i, e) { this._labelTextCanvas.drawLabelsOnCanvas(i, e) } }); function dZ(e) { this._map = e; this.virtualTile = { custom: true, label: { fixedLabel: [], indoorLabel: [], lineLabel: [], textureHeights: [], status: "ready" }, tileInfo: { col: 0, row: 0, zoom: 0, useZoom: 0, loopOffsetX: 0 }, status: "ready" }; this.virtualTile.label.tileInfo = this.virtualTile.tileInfo; this.init() } dZ.prototype.init = function () { var fn = this._map; var i = this; function e() { i.updateLabels() } fn.addEventListener("add_tile_labels", e); fn.addEventListener("onremove_tile_labels", e); fn.addEventListener("onclear_labels", e) }; dZ.prototype.updateLabels = function () { var i = this._map.tileMgr.getLabelTextCanvas(); var fn = this._map; var e = this; i.drawCustomLabelsOnCanvas(fn._customTileLabels, function (fp) { var fo = e.virtualTile; if (fp) { fo.label.textureHeights[0] = [fp.height] } fo.label.fixedLabel = fn._customTileLabels; var fq = new aB("oncustom_labels_ready"); fq.virtualTile = fo; fq.labelCanvas = fp; fq.imgKey = aI.getGUID("custom_labels_"); fn.dispatchEvent(fq) }) }; aI.register(function (e) { e._customLabelMgr = new dZ(e) }); function c9(i) { var fo = null; try { if (ce.inMapHost) { fo = new Worker(i); fo.onerror = function (e) { e.preventDefault(); fo = p(i) } } else { fo = p(i) } } catch (fn) { fo = p(i) } return fo } function p(fq) { var ft = null; try { var fn; try { fn = new Blob(['importScripts("' + fq + '");'], { type: "application/javascript" }) } catch (fr) { var fp = new (window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder)(); fp.append('importScripts("' + fq + '");'); fn = fp.getBlob("application/javascript") } var fo = window.URL || window.webkitURL; var i = fo.createObjectURL(fn); ft = new Worker(i) } catch (fs) { } return ft } function ed(e) { this.init(e) } var aC = { init: function (fn) { var i = this; this.map = fn; this.arrPendingData = []; var e = navigator.hardwareConcurrency || 4; if (d9() && e > 2) { e = 2 } this.arrWorker = []; this.ratio = ay(); this.wordSpaceRatio = this.ratio; if (this.ratio > 1) { this.textSizeRatio = 2 } else { this.textSizeRatio = 1 } bP.canUseWebAssembly(function (fo) { var fr; if (fo) { fr = "https://api.map.baidu.com/res/webgl/10/worker_wasm_cuxc2r.js" } else { fr = "https://api.map.baidu.com/res/webgl/10/worker_asm_i54ubp.js" } for (var fq = 0; fq < e; fq++) { var ft = c9(fr); ft.onmessage = function fp(fv) { if (fv.data) { this._cbk && this._cbk(fv.data, this._parsingTileKey) } else { this._cbk && this._cbk(null, this._parsingTileKey) } this._isBusy = false; this._cbk = null; this._parsingTileInfo = null; this._parsingTileKey = null; if (i.arrPendingData.length > 0) { var fx = i.arrPendingData.shift(); var fu = fx.cbk; i.loadTileData(fx.url, fx.tileInfo, fx.tileKey, fu) } var fw = new aB("onrefresh"); fw.source = "workermgr"; fn.fire(fw) }; i.arrWorker.push(ft) } if (i.arrPendingData.length > 0) { for (var fq = 0; fq < Math.min(i.arrPendingData.length, e); fq++) { var fs = i.arrPendingData.shift(); i.loadTileData(fs.url, fs.tileInfo, fs.tileKey, fs.cbk) } } }); fn.on("style_willchange", function () { for (var fp = 0, fo = i.arrWorker.length; fp < fo; fp++) { i.arrWorker[fp].isSendFS = false } if (typeof this.config.style !== "string") { ed.stringifiedCustomStyleInfo = null } }) }, getIdleWorker: function () { for (var fn = 0, e = this.arrWorker.length; fn < e; fn++) { var fo = this.arrWorker[fn]; if (!fo._isBusy) { fo._isBusy = true; return fo } } return null }, releasePendingData: function (fn) { var fo = []; var fr = this.arrPendingData; for (var fq = fr.length - 1; fq >= 0; fq--) { var fs = fr[fq]; var e = fs.tileInfo; if (fn.tileTypeName !== e.tileTypeName) { continue } var fp = "id_" + e.col + "_" + e.row + "_" + e.zoom; if (!fn[fp]) { fr.splice(fq, 1); fo.push(e) } } return fo }, loadTileData: function (e, fn, fu, ft) { var fo = this.getIdleWorker(); if (fo) { fo._cbk = ft; fo._parsingTileInfo = fn; fo._parsingTileKey = fu; var i = { action: "loadTileData", url: e, tileInfo: fn, tileKey: fu }; var fs = this.map.getMapStyleId(); var fr = !!(fs.indexOf("custom") === 0); var fq = fs; if (fr) { fq = "Custom" } if (!fo.isSendFS) { if (!ed["stringifiedFeatureStyle" + fs] && aI["FeatureStyle" + fs]) { ed["stringifiedFeatureStyle" + fs] = JSON.stringify(aI["FeatureStyle" + fs]) } if (!ed["stringifiedIconSetInfo" + fq]) { ed["stringifiedIconSetInfo" + fq] = JSON.stringify(aI["iconSetInfo" + fq]) } if (!ed.stringifiedIndoorStyle) { ed.stringifiedIndoorStyle = JSON.stringify(aI.indoorStyle) } if (fr && aI.customStyleInfo) { if (!ed.stringifiedCustomStyleInfo) { ed.stringifiedCustomStyleInfo = JSON.stringify(aI.customStyleInfo) } } if (ed["stringifiedFeatureStyle" + fs]) { i.featureStyle = ed["stringifiedFeatureStyle" + fs] } i.iconSetInfo = ed["stringifiedIconSetInfo" + fq]; i.indoorStyle = ed.stringifiedIndoorStyle; if (fr && ed.stringifiedCustomStyleInfo) { i.customMapStyle = ed.stringifiedCustomStyleInfo } i.iconInfo = { wordSpaceRatio: this.wordSpaceRatio, textSizeRatio: this.textSizeRatio }; i.mapStyleId = fs; fo.isSendFS = true } fo.postMessage(i) } else { var fp = { url: e, tileInfo: fn, tileKey: fu, cbk: ft }; this.arrPendingData.push(fp) } } }; x.extend(ed.prototype, aC); function cx(i) { this.tileLayers = []; this.map = i; var e = this.config = be[this.map.mapType]; this.errorUrl = e.errorUrl; this.tileSize = e.tileSize; this.baseUnits = e.baseUnits; this.baseZoomLevel = e.zoomLevelBase; this.tileURLs = e.tileUrls; this.tilesInfoCache = {}; this.loadDelay = 10; this._labelTextCanvas = null } aI.register(function (i) { if (i._renderType !== "webgl") { return } var e = i.tileMgr = new cx(i); i.addEventListener("addtilelayer", function (fo) { e.addWebGLLayer(fo.target) }); i.addEventListener("removetilelayer", function (fo) { e.removeWebGLLayer(fo.target) }); i.on("update", function fn(fo) { if (!aI["FeatureStyle" + this.config.style] && !aI.customStyleLoaded) { return } e.loadLayersData({ zoomChanged: fo.changedStatus.onzoom_changed ? true : false }) }); i.on("style_changed", function () { e.loadLayersData() }) }); x.extend(cx.prototype, { addWebGLLayer: function (fo) { this.tileLayers.push(fo); fo.initDrawData(); if (this.tileLayers.length > 1) { for (var fn = 1; fn < this.tileLayers.length; fn++) { if (this.tileLayers[fn].isFlat) { this.map.setDisplayOptions({ isFlat: true }); break } } } var e = this.map.config.style; if (aI["FeatureStyle" + e]) { this.loadLayersData() } else { var fp = this; this.map.loadMapStyleFiles(function () { fp.loadLayersData() }) } }, removeWebGLLayer: function (fq) { var fr = false; for (var fp = 0, fo = this.tileLayers.length; fp < fo; fp++) { if (fq === this.tileLayers[fp]) { fr = true; this.tileLayers.splice(fp, 1); break } } if (fr === false) { return } fq.destroyDrawData(); if (aI["FeatureStyle" + this.map.config.style]) { this.loadLayersData() } if (this.tileLayers.length === 1) { this.map.setDisplayOptions({ isFlat: false }) } else { var e = false; for (var fp = 1; fp < this.tileLayers.length; fp++) { if (this.tileLayers[fp].isFlat) { e = true; break } } this.map.setDisplayOptions({ isFlat: e }) } var fn = new aB("onrefresh"); fn.source = "removewebgllayer"; this.map.fire(fn) }, getLabelTextCanvas: function () { if (!this._labelTextCanvas) { this._labelTextCanvas = new r(this.map) } return this._labelTextCanvas }, loadLayersData: function (i) { if (this.map.suspendLoad) { return } var fo = this; i = i || {}; var fn = !!i.zoomChanged; var e = (fn === true || this.map.getTilt() > 50); if (!e) { if (!this.syncLoadTimer) { this.syncLoadTimer = setTimeout(function () { fo._loadLayersFromCache(fn); fo.syncLoadTimer = null }, 40) } } else { this._loadLayersFromCache(fn) } console.log("----load"); this.timer = window.setTimeout(function () { if (this.timeN) { if (new Date().getTime - this.timeN < 1000) { return } this.timeN = new Date().getTime } var fq = fo.tileLayers.length; fo.tilesInfoCache = {}; for (var fr = 0; fr < fq; fr++) { var ft = fo.tileLayers[fr]; var fs = ft.tileType; var fp = null; if (fo.tilesInfoCache[fs.getName()]) { fp = fo.tilesInfoCache[fs.getName()] } else { fp = fo.calcTilesInfo(fs); fo.tilesInfoCache[fs.getName()] = fp } ft.loadLayerData(fp, false, fn) } fo.timer = null }, this.loadDelay); if (d9() && fn) { this.loadDelay = 200 } else { this.loadDelay = 80 } }, _loadLayersFromCache: function (fp) { this.map._featureMgr.clearData(); var fs = this.tileLayers; fs.sort(function (ft, i) { return ft.zIndex - i.zIndex > 0 }); var fn = fs.length; this.tilesInfoCache = {}; for (var fo = 0; fo < fn; fo++) { var fr = fs[fo]; var fq = fr.tileType; var e = null; if (this.tilesInfoCache[fq.getName()]) { e = this.tilesInfoCache[fq.getName()] } else { e = this.calcTilesInfo(fq); this.tilesInfoCache[fq.getName()] = e } fr.loadLayerData(e, true, fp) } }, calcTilesInfo: function (fz) { var fL = this.map; var fR = fL.getMapType(); var fM = be[fR]; var fG = fL.getZoom(); var e = Math.floor(fG); var fq = fz.getDataZoom(fG); var f1 = fz.getName(); fq = dO(fq, fM.minDataZoom, fM.maxDataZoom); var fU = e; if (fz._name === "web") { fU = fq } var fK = fz.getTileSize(fG); var fp = fz.getBaseTileSize(fG); var fD = fz.getMercatorSize(fG, fq); var fC; var fS; var fJ; var fW; var fN = fL.getCenterIn(); if (fR !== BMAP_SATELLITE_MAP) { fN = cE.calcLoopCenterPoint(fN) } var fH = Math.floor(fN.lng / fD); var fs = Math.floor(fN.lat / fD); var fI = fL.getBoundsIn(); var fP = 0; var fn = 0; fI = cE.calcLoopMapBounds(fI, fL.getCenter()); if (fI.ne.lng > cE._mc180X) { var fx = cE.getSpaceDistanceInPixel(fq); fP = Math.ceil(fx / fp) } if (fI.sw.lng < cE._mcM180X) { var fx = cE.getSpaceDistanceInPixel(fq); fn = Math.ceil(fx / fp) } var fu = [Math.floor(fI.sw.lng / fD) - fn, Math.floor(fI.sw.lat / fD)]; var fZ = [Math.floor(fI.ne.lng / fD) + fP, Math.floor(fI.ne.lat / fD)]; fC = fu[0]; fS = fZ[0] + 1; fJ = fu[1]; fW = fZ[1] + 1; var fy = []; for (var fv = fC; fv < fS; fv++) { if (cE.isTileBlank(fv, fq, fp) === true) { continue } for (var fA = fJ; fA < fW; fA++) { var fw = { col: fv, row: fA, zoom: fq, useZoom: fU, tileTypeName: f1, loopOffsetX: 0, tileSize: fK, baseTileSize: fp, mercatorSize: fD }; fy.push(fw); var fQ = "id_" + fv + "_" + fA + "_" + fq; fy[fQ] = true } } if (fR !== BMAP_SATELLITE_MAP) { fy = cE.calcLoopTiles(fy, fq, fp, fD) } if (fq === 3) { for (var fY = 0, fX = fy.length; fY < fX; fY++) { var fv = fy[fY].col; var fA = fy[fY].row; var fT = cE.calcLoopParam(fv, fq); var fr = fT.T; var fE = fv >= 0 ? fv - fr : fv + fr; var fF = "id_" + fE + "_" + fA + "_" + fq; if (!fy[fF]) { var fw = { col: fE, row: fA, zoom: fq, useZoom: fU, loopOffsetX: 0, tileSize: fK, baseTileSize: fp, mercatorSize: fD }; fy.push(fw); fy[fF] = true } } } if (this.map._tilt > 0) { for (var fY = 0; fY < fy.length; fY++) { var ft = fy[fY]; var fV = ft.col; var f0 = ft.row; var fO = []; fO.minX = fV * fD; fO.maxX = (fV + 1) * fD; fO.minY = f0 * fD; fO.maxY = (f0 + 1) * fD; var fo = new e5(0, 0); fo.lng = (fO.minX + fO.maxX) / 2; fo.lat = (fO.minY + fO.maxY) / 2; var fB = fL.pointToPixelIn(fo); if (fB.x > 0 && fB.x < this.map.width && fB.y > 0 && fB.y < this.map.height) { continue } if (fO.minX < fN.lng && fO.maxX > fN.lng && fO.minY < fN.lat && fO.maxY > fN.lat) { continue } if (!this.ifTileInMapBounds(fO, fI, fV, f0)) { fy.splice(fY, 1); fY-- } } } fy.sort((function (i) { return function (f2, f3) { return ((0.4 * Math.abs(f2.col - i[0]) + 0.6 * Math.abs(f2.row - i[1])) - (0.4 * Math.abs(f3.col - i[0]) + 0.6 * Math.abs(f3.row - i[1]))) } })([fH, fs])); fy.zoom = fq; fy.tileTypeName = f1; return fy }, getCurrentViewTilesInfo: function (i) { var e = this.tilesInfoCache[i.getName()]; if (!e) { return this.calcTilesInfo(i) } return e }, ifTileInMapBounds: function (e, fq, fn, fp) { var i = fq.normalizedBottomLeft; var fB = fq.normalizedTopRight; var ft = fq.normalizedTopLeft; var fr = fq.normalizedBottomRight; var fo = false; var fA = new e5(e.minX, e.minY); var fx = new e5(e.maxX, e.maxY); var fs = new e5(fx.lng, fA.lat); var fy = new e5(fA.lng, fx.lat); var fv = [fy, fx, fs, fA]; for (var fz = 0, fu = fv.length; fz < fu; fz++) { var fw = fz + 1; if (fw === fu) { fw = 0 } var fC = fz; var fD = ev(fv[fw], fv[fC], ft, i); if (fD) { fo = true; break } fD = ev(fv[fw], fv[fC], fr, fB); if (fD) { fo = true; break } fD = ev(fv[fw], fv[fC], fB, ft); if (fD) { fo = true; break } fD = ev(fv[fw], fv[fC], i, fr); if (fD) { fo = true; break } } return fo }, getTileLayer: function (fp) { for (var fo = 0, e = this.tileLayers.length; fo < e; fo++) { var fn = this.tileLayers[fo]; if (fn.mapType === fp) { return fn } } return null } }); function am(e) { this._map = e; this._spotsId = null; this._init() } am.prototype._init = function () { var e = this._map; e.addEventListener("onspotsdataready", function (fn) { var i = fn.spots; if (this._spotsId) { e.removeSpots(this._spotsId) } this._spotsId = e.addSpots(i) }) }; aI.register(function (e) { if (!e.config.enableIconClick) { return } e._mapIcon = new am(e) }); function ap(e) { this._indoorData = {}; this._map = e; this.currentUid = null; this.currentFloor = null; this._indoorControl = null; this.enterMethod = null; this.showMask = false; this._isMobile = d9(); this._autoEnterZoom = 19; if (this._isMobile) { this._autoEnterZoom = 17 } this._init(e); window._indoorMgr = this } ap.prototype._init = function (i) { var e = this; i.on("indoor_status_changed", function (fr) { var fn = fr.uid; var fp = fr.floor; if (fn === null) { fn = e.currentUid; if (e._indoorData[fn]) { fp = e._indoorData[fn].defaultFloor } if (e._indoorControl) { e._indoorControl.hide() } e.currentUid = null; e.currentFloor = null; e.enterMethod = null } else { if (e._indoorData[fn]) { var fq = e._indoorData[fn]; fp = (typeof fp === "number") ? fp : fq.defaultFloor; if (!e._indoorControl) { if (i.config.showControls && i._displayOptions.indoor) { e._indoorControl = new ew(i, fq) } } else { e._indoorControl.setInfo(fq); e._indoorControl.show() } e.currentUid = fn; e.currentFloor = fp } } if (!e._indoorData || !e._indoorData[fn] || e._indoorData[fn].currentFloor === fp) { this.fire(new aB("onrefresh")); return } var fo = new aB("onindoor_data_refresh"); fo.uid = fn; fo.floor = fp; fo.tileKey = e._indoorData[fn].tileKey; e._indoorData[fn].currentFloor = fp; e.currentFloor = fp; this.fire(fo) }); i.on("spotclick", function (fo) { var fn = null; if (fo.curAreaSpot && this.areaSpots[fo.curAreaSpot]) { fn = this.areaSpots[fo.curAreaSpot].userData.uid } if (fn === e.currentUid) { if (fo.curAreaSpot) { e.enterMethod = "byClick" } return } if (fn === null) { if (e.currentUid && e.enterMethod === "byClick") { i.showIndoor(null); e.enterMethod = null } } else { e.enterMethod = "byClick"; if (e.currentUid) { i.showIndoor(e.currentUid, e._indoorData[e.currentUid].defaultFloor) } i.showIndoor(fn, e._indoorData[fn].defaultFloor) } }); i.on("moveend", function () { if (this.getZoom() >= e._autoEnterZoom) { e._checkIndoorByMove() } }); i.on("zoomend", function () { if (this.getZoom() >= e._autoEnterZoom) { e._checkIndoorByMove() } else { if (e.enterMethod !== "byClick" && e.currentUid !== null) { this.showIndoor(null) } } }) }; ap.prototype._checkIndoorByMove = function () { var fn = this._map; var fu = fn.getSize(); var fz = { x: fu.width / 2, y: fu.height / 2 }; var fy = Math.max(fu.width, fu.height); var fA = []; for (var fv in this._indoorData) { var e = this._indoorData[fv].center; var fo = fn.pointToPixelIn(new aI.Point(e[0], e[1])); var fr = eJ(fz, fo); fA.push({ uid: fv, distance: fr }) } if (fA.length === 0) { return } fA.sort(function (fB, i) { return fB.distance - i.distance }); var fq = fA[0]; var fw = fn.getCenterIn(); var fp = false; for (var ft = 0; ft < this._indoorData[fq.uid].contour.length; ft++) { if (b2([fw.lng, fw.lat], this._indoorData[fq.uid].contour[ft])) { fp = true; break } } if (fp === false && fq.uid === "e96b44200baa3b4082288acc") { var fs = this._indoorData[fq.uid].boundsMin; var fx = this._indoorData[fq.uid].boundsMax; if (fw.lng > fs[0] && fw.lat > fs[1] && fw.lng < fx[0] && fw.lat < fx[1]) { fp = true } } if (fp) { if (this.enterMethod !== "byClick") { if (this.currentUid !== null && this.currentUid !== fq.uid) { this._map.showIndoor(this.currentUid, this._indoorData[this.currentUid].defaultFloor) } if (this.currentUid !== fq.uid) { this._map.showIndoor(fq.uid, this._indoorData[fq.uid].defaultFloor) } this.enterMethod = "byMove" } } else { if (this.enterMethod !== "byClick") { this._map.showIndoor(null) } } }; ap.prototype.setData = function (fo) { if (fo === null) { return } for (var fn in fo) { if (fn === "tileInfo") { continue } var fp = fo[fn].tileKey; if (this._indoorData[fn]) { if (!this._indoorData[fn][fp]) { this._indoorData[fn].tileKeys.push(fp); this._indoorData[fn][fp] = true } } else { this._indoorData[fn] = fo[fn]; this._indoorData[fn].tileKeys = [fo[fn].tileKey]; this._indoorData[fn][fp] = true; for (var e = 0; e < this._indoorData[fn].contour.length; e++) { this._map.addAreaSpot(this._indoorData[fn].contour[e], { id: fn + e, userData: { uid: fn } }) } } } if (this._map.getZoom() >= this._autoEnterZoom) { this._checkIndoorByMove() } }; ap.prototype.removeData = function (fn, fp) { if (!this._indoorData[fn]) { return } var fo = this._indoorData[fn]; for (var e = 0; e < fo.tileKeys.length; e++) { if (fo.tileKeys[e] === fp) { fo.tileKeys.splice(e, 1); break } } delete fo[fp]; if (fo.tileKeys.length === 0) { delete this._indoorData[fn] } }; ap.prototype.getIndoorData = function (e) { return this._indoorData[e] || null }; ap.prototype.getData = function () { return this._indoorData }; aI.register(function (e) { e._indoorMgr = new ap(e) }); var cQ = (function () { var fo = {}; var fx = {}; var ft = {}; function fv(fz) { if (Object.prototype.toString.call(fz) === "[object Object]") { for (var fy in fz) { return false } return true } else { return false } } function fu(fE, fF, fI, fB, fH) { fB = fB || FS; var fz; if (fB) { fz = fw(fE, fF, fI, fB) } else { fz = fn(fE, fF, fI, fH) } var fD = fz.drawId; var fy = fz.style; var fG = fz.styleUpdate; var fJ = []; if (!fD) { return fJ } for (var fA = 0; fA < fD.length; fA++) { var fC = fG[fD[fA]] || fy[fD[fA]]; if (fC) { switch (fF) { case "polygon": fC = fp(fC, fE); break; case "line": fC = fs(fC, fE); break; case "pointText": fC = fq(fC, fE); break; case "point": fC = e(fC, fE); break; case "polygon3d": fC = fr(fC, fE); break }if (fC) { fJ[fJ.length] = fC } } } return fJ } function fw(fz, fB, fC, fy) { var fA = fy[2]; switch (fB) { case "point": fA = fA[0]; break; case "pointText": fA = fA[1]; break; case "line": fA = fA[3]; break; case "polygon": fA = fA[4]; break; case "polygon3d": fA = fA[5]; break }var fE = fC - 1; if (fB === "line" && fC === 12) { fE = fC } var fF = fy[1][fE][0]; var fD = fF[fz]; if (!fD) { if (fB === "point" || fB === "pointText") { fF = fy[1][fC][0]; fD = fF[fz] } } return { drawId: fD, style: fA, styleUpdate: [] } } function fn(fC, fD, fG, fF) { if (!fF) { return { drawId: null, style: [], styleUpdate: [] } } var fE; var fA = fF.baseFs; if (fv(fF.zoomRegion)) { fE = fF.StyleBody || [] } else { fE = fF.zoomStyleBody[fG] || [] } var fz = fA[2]; switch (fD) { case "point": fz = fz[0]; fE = fE[0] || {}; break; case "pointText": fz = fz[1]; fE = fE[1] || {}; break; case "line": fz = fz[3]; fE = fE[3] || {}; break; case "polygon": fz = fz[4]; fE = fE[4] || {}; break; case "polygon3d": fz = fz[5]; fE = fE[5] || {}; break }var fy = fA[1][fG - 1][0]; var fB = fy[fC]; return { drawId: fB, style: fz, styleUpdate: fE } } function fq(fz, fy) { if (!fz || fz.length === 0) { return null } return { sid: fy, fontRgba: i(fz[0]), haloRgba: i(fz[1]), backRgba: i(fz[2]), fontSize: fz[3], haloSize: fz[4], fontWeight: fz[5], fontStyle: fz[6], density: fz[7] } } function e(fz, fy) { return { sid: fy, rank: fz[0], ucflag: fz[1], icon: fz[2], iconType: fz[3], nineGG: fz[4], density: fz[5], zoom: fz[6] } } function fs(fz, fy) { return { sid: fy, borderRgba: i(fz[0]), fillRgba: i(fz[1]), borderWidth: fz[2], fillWidth: fz[3], borderCap: fz[4], fillCap: fz[5], haveBorderLine: fz[6], haveBorderTexture: fz[7], haveFillTexture: fz[8], isUseBorderRgba: fz[9], isUseFillRgba: fz[10], borderTexture: fz[11], fillTexture: fz[12], borderTextureType: fz[13], fillTextureType: fz[14], isRealWidth: fz[15], haveArrow: fz[16], needRound: fz[17], realBorderWidth: fz[18] } } function fp(fz, fy) { return { sid: fy, fillRgba: i(fz[0]), borderRgba: i(fz[1]), borderWidth: fz[2], borderTexture: fz[3], borderTextureType: fz[4], waterStyle: fz[5], haloStyle: fz[6], textureStyle: fz[7], thickRgba: i(fz[8]) } } function fr(fz, fy) { return { sid: fy, filter: fz[0], ratio: fz[1], haveBorder: fz[2], borderWidth: fz[3], borderRgba: i(fz[4]), fillTop: i(fz[5]), fillSide: i(fz[6]), polyTexture: fz[7] } } function i(fD) { var fC = fD; if (ft[fC]) { return ft[fC] } fD = fD >>> 0; var fB = (fD) & 255; var fA = (fD >> 8) & 255; var fy = (fD >> 16) & 255; var fz = (fD >> 24) & 255; ft[fC] = [fB, fA, fy, fz]; return ft[fC] } return { getStyleFromCache: function (fF, fA, fD, fE, fz, fC, fy) { fF = fF || "default"; var fB = fF + "-" + fA + "-" + fD + "-" + fE; if (fC) { fB += "-indoor" } if (fz) { if (!fx[fB]) { fx[fB] = fu(fA, fD, fE, fz) } return fx[fB] } if (!fo[fB]) { fo[fB] = fu(fA, fD, fE, fz, fy) } return fo[fB] } } })(); aI.register(function (i) { var e = new co(i) }); function co(e) { e.container.appendChild(this.render()); this.bind(e) } co.prototype.render = function () { var i = document.createElement("div"); i.className = "click-ripple-container"; var e = document.createElement("div"); e.className = "click-ripple"; i.appendChild(e); this._div = i; this._ripple = e; return i }; co.prototype.bind = function (i) { var e = this; i.addEventListener("spotclick", function (fn) { if (!fn.spots || fn.spots.length === 0) { return } e._div.style.left = fn.pixel.x + "px"; e._div.style.top = fn.pixel.y + "px"; x.ac(e._ripple, "ripple-playing") }); x.on(e._ripple, "transitionend", function () { x.rc(e._ripple, "ripple-playing") }) }; function d7(e) { cK.call(this); if (!e) { return } this._opts = {}; this._map = e; this._maxLat = 84.6; this._minLat = -80.6; this._maxLatMC = cR.convertLL2MC(new bS(this._maxLat, 0)).lat; this._minLatMC = cR.convertLL2MC(new bS(this._minLat, 0)).lat } d7.inherits(cK, "ToolbarItem"); x.extend(d7.prototype, { open: function () { if (this._isOpen == true) { return true } if (this._map._toolInUse) { return false } this._map._toolInUse = true; this._isOpen = true; return true }, close: function () { if (!this._isOpen) { return } this._map._toolInUse = false; this._isOpen = false }, _checkStr: function (e) { if (!e) { return "" } return e.replace(/</g, "&lt;").replace(/>/g, "&gt;") } }); function eE(fn, i) { d7.call(this, fn); i = i || {}; this._opts = x.extend(x.extend(this._opts || {}, { autoClear: false, tips: "测距", followText: "单击确定起点，双击结束绘制", unit: "metric", showResult: true, lineColor: "blue", lineStroke: 2, opacity: 1, lineStyle: "solid", cursor: dp.distCursor, styleCodes: { lnCode: 0, spCode: 0, slCode: 0, tlCode: 0 }, enableMassClear: true }), i); if (this._opts.showResult === false) { if (typeof i.tips === "undefined") { this._opts.tips = "绘制折线" } if (!i.cursor) { this._opts.cursor = "crosshair" } } if (this._opts.lineStroke <= 0) { this._opts.lineStroke = 2 } if (this._opts.opacity > 1) { this._opts.opacity = 1 } else { if (this._opts.opacity < 0) { this._opts.opacity = 0 } } if (this._opts.lineStyle !== "solid" && this._opts.lineStyle !== "dashed") { this._opts.lineStyle = "solid" } this._checked = false; this._drawing = null; this.followTitle = null; this._totalDis = {}; this._points = []; this._paths = []; this._dots = []; this._segDistance = []; this._overlays = []; this._units = { metric: { name: "metric", conv: 1, incon: 1000, u1: "米", u2: "公里" }, us: { name: "us", conv: 3.2808, incon: 5279.856, u1: "英尺", u2: "英里" } }; if (!this._units[this._opts.unit]) { this._opts.unit = "metric" } this._dLineColor = "#ff6319"; this._dLineStroke = 3; this._dOpacity = 0.8; this._dLineStyle = "solid"; this._dCursor = dp.distCursor; if (this._opts.showResult) { this._opts.followText = "单击确定起点" } this._followTextM = "单击确定地点，双击结束"; this._sectionMarkerTip = "单击可删除此点，拖拽可调整位置"; this._movingTimerId = null; if (this._opts.showResult) { this.text = "测距" } else { this.text = "绘线" } this._isOpen = false; var e = this; cI.load("tools", function () { e._draw() }) } eE.inherits(d7, "PolylineTItem"); x.extend(eE.prototype, { setLineColor: function (e) { this._opts.lineColor = e }, setLineStroke: function (e) { if (Math.round(e) > 0) { this._opts.lineStroke = Math.round(e) } }, setOpacity: function (e) { if (e >= 0 && e <= 1) { this._opts.opacity = e } }, setLineStyle: function (e) { if (e === "solid" || e === "dashed") { this._opts.lineStyle = e } }, clear: function () { for (var fn = 0, e = this._overlays.length; fn < e; fn++) { if (this._overlays[fn]) { this._map.removeOverlay(this._overlays[fn]) } } this._overlays.length = 0; for (var fn = 0, e = this._dots.length; fn < e; fn++) { if (this._dots[fn] && this._dots[fn].parentNode) { this._dots[fn].parentNode.removeChild(this._dots[fn]) } } this._dots.length = 0 }, setCursor: function (e) { if (this._opts.showResult === true) { return } this._opts.cursor = e }, getCursor: function () { if (this._opts.showResult === true) { return this._dCursor } var e = this._opts.cursor.match(/^url\((.+)\)(,.*)?/); if (e !== null) { return e[1] } else { return this._opts.cursor } }, showResult: function (e) { this._opts.showResult = !!e } }); function bv() { var fp = 3; var fw = 256; var fo = Math.pow(2, 18 - fp) * fw; var fx = 2; var fv = (fx + 1) * fo; var fn = cR.convertLL2MC(new e5(180, 0)); var ft = fn.lng; var fr = fv - ft; var fu = -3; var e = fu * fo; var fq = cR.convertLL2MC(new e5(-180, 0)); var fs = fq.lng; var i = fs - e; this._validPixels = ft / Math.pow(2, 18 - fp); this._mc180X = ft; this._mcM180X = fs; this._loopOffset = fr + i; this._mcTSpan = ft - fs; this._spaceDistance = fr; this._mSpaceDistance = i } bv.prototype = { calcLoopParam: function (fn, i, fu) { fu = fu || 256; var fr = 0; var fo = 3; var fq = 6; var fp = fq * Math.pow(2, (i - fo)) * 256 / fu; var ft = fp / 2 - 1; var fs = -fp / 2; while (fn > ft) { fn -= fp; fr -= this._loopOffset } while (fn < fs) { fn += fp; fr += this._loopOffset } var e = fr; fr = Math.round(fr / Math.pow(2, 18 - i)); return { offsetX: fr, geoOffsetX: e, col: fn, T: fp, maxCol: ft, minCol: fs } }, calcLoopCenterPoint: function (i) { var e = i.lng; while (e > this._mc180X) { e -= this._mcTSpan } while (e < this._mcM180X) { e += this._mcTSpan } i.lng = e; return i }, calcLoopMapBounds: function (fn, fo) { var i = fo || fn.getCenter(); var e = fn.sw.lng; var fp = fn.ne.lng; while (i.lng > this._mc180X) { i.lng -= this._mcTSpan; e -= this._mcTSpan; fp -= this._mcTSpan } while (i.lng < this._mcM180X) { i.lng += this._mcTSpan; e += this._mcTSpan; fp += this._mcTSpan } fn.sw.lng = e; fn.ne.lng = fp; if (fn.pointBottomLeft) { fn.pointBottomLeft = this.calcLoopCenterPoint(fn.pointBottomLeft); fn.pointTopLeft = this.calcLoopCenterPoint(fn.pointTopLeft); fn.pointTopRight = this.calcLoopCenterPoint(fn.pointTopRight); fn.pointBottomRight = this.calcLoopCenterPoint(fn.pointBottomRight) } return fn }, calcLoopTiles: function (fw, e, fA, ft) { fA = fA || 256; var fp = ft || Math.pow(2, 18 - e) * fA; var fv = Math.floor(this._mc180X / fp); var fr = Math.floor(this._mcM180X / fp); var fx = Math.floor(this._loopOffset / fp); var fy = []; for (var fs = 0; fs < fw.length; fs++) { var fz = fw[fs]; var fo = fz[0]; var fB = fz[1]; if (fo >= fv) { var fu = fo + fx; if (this.isTileBlank(fu, e, fA) === true) { continue } var fn = "id_" + fu + "_" + fB + "_" + e; if (!fw[fn]) { fw[fn] = true; fy.push([fu, fB, e, 0]) } } else { if (fo <= fr) { var fu = fo - fx; if (this.isTileBlank(fu, e, fA) === true) { continue } var fn = "id_" + fu + "_" + fB + "_" + e; if (!fw[fn]) { fw[fn] = true; fy.push([fu, fB, e, 0]) } } } } for (var fs = 0, fq = fy.length; fs < fq; fs++) { fw.push(fy[fs]) } for (var fs = fw.length - 1; fs >= 0; fs--) { var fo = fw[fs][0]; if (this.isTileBlank(fo, e, fA)) { fw.splice(fs, 1) } } return fw }, isTileBlank: function (fn, fp, e) { var fq = Math.pow(2, fp - 3); var i = Math.round(this._validPixels * fq); var fo = 6 * fq * 256 / e; while (fn > fo / 2 - 1) { fn -= fo } while (fn < -(fo / 2)) { fn += fo } if (fn > 0 && fn * e > i) { return true } if (fn < 0 && Math.abs((fn + 1) * e) > i) { return true } return false }, isAddWidth: function (e, i) { return e < this._mcM180X || i > this._mc180X }, getSpaceDistanceInPixel: function (i) { var e = Math.round((this._spaceDistance + this._mSpaceDistance) / Math.pow(2, 18 - i)); return e } }; var cE = new bv(); var bk = (function () { var e = true; var fo = 256; var fq = ad("ditu", "normalTraffic"); var fn = fq.udt; var fr = "https://sp3.baidu.com/7_AZsjOpB1gCo2Kml5_Y_DAcsMJiwa/traffic/"; var fp = [[2, "79,210,125,1", 3, 2, 0, [], 0, 0], [2, "79,210,125,1", 3, 2, 0, [], 0, 0], [2, "79,210,125,1", 4, 2, 0, [], 0, 0], [2, "79,210,125,1", 5, 2, 0, [], 0, 0], [2, "79,210,125,1", 6, 2, 0, [], 0, 0], [2, "255,208,69,1", 3, 2, 0, [], 0, 0], [2, "255,208,69,1", 3, 2, 0, [], 0, 0], [2, "255,208,69,1", 4, 2, 0, [], 0, 0], [2, "255,208,69,1", 5, 2, 0, [], 0, 0], [2, "255,208,69,1", 6, 2, 0, [], 0, 0], [2, "232,14,14,1", 3, 2, 0, [], 0, 0], [2, "232,14,14,1", 3, 2, 0, [], 0, 0], [2, "232,14,14,1", 4, 2, 0, [], 0, 0], [2, "232,14,14,1", 5, 2, 0, [], 0, 0], [2, "232,14,14,1", 6, 2, 0, [], 0, 0], [2, "181,0,0,1", 3, 2, 0, [], 0, 0], [2, "181,0,0,1", 3, 2, 0, [], 0, 0], [2, "181,0,0,1", 4, 2, 0, [], 0, 0], [2, "181,0,0,1", 5, 2, 0, [], 0, 0], [2, "181,0,0,1", 6, 2, 0, [], 0, 0], [2, "255,255,255,1", 4, 0, 0, [], 0, 0], [2, "255,255,255,1", 5.5, 0, 0, [], 0, 0], [2, "255,255,255,1", 7, 0, 0, [], 0, 0], [2, "255,255,255,1", 8.5, 0, 0, [], 0, 0], [2, "255,255,255,1", 10, 0, 0, [], 0, 0]]; var i = new bI({ transparentPng: true, dataType: 2, cacheSize: 256, clipTile: true }); i.zIndex = 2; i.getTilesUrl = function (fu, fv) { if (!fu || fv < 7) { return null } var ft = fu.x; var fw = fu.y; var fs = fr + "?qt=vtraffic&z=" + fv + "&x=" + ft + "&y=" + fw + "&udt=" + fn; return fs }; i.processData = function (fv) { var fz = fv.content; var fx = 10; if (typeof fv.precision === "number") { fx = fv.precision * 10 } var fG = { road: [[], []] }; if (!fz) { return fG } var fE = fz.tf; if (!fE) { return fG } for (var fw = 0; fw < fE.length; fw++) { var fF = fE[fw][1]; var fD = []; var fB = 0; var fA = 0; var fC = fp[fE[fw][3]]; for (var fu = 0, fs = fF.length; fu < fs / 2; fu++) { fB += fF[fu * 2] / fx; fA += fF[fu * 2 + 1] / fx; fD.push(fB, 256 - fA) } var ft = fC[1].split(","); ft[3] = ft[3] * 255; var fy = fC[2] / 2; fG.road[0].push([fD, 1, 2, [255, 255, 255, 255], fy + 2]); fG.road[1].push([fD, 1, 2, ft, fy]) } return fG }; return i })(); aI.register(function (i) { if (i.config && i.config.isOverviewMap) { return } if (i.isLoaded()) { dM(i) } else { i.addEventListener("load", function () { dM(this) }) } i.cityName = "中国"; i.cCode = "1"; var e = {}; e.enableRequest = true; e.request = function () { if (e.enableRequest) { e.enableRequest = false; setTimeout(function () { e._request() }, 500) } }; e._request = function () { var fo = i.getBoundsIn(); var fq = i.getZoom(); var fn = fo.getSouthWest(); var fp = fo.getNorthEast(); bA.request(function (ft) { if (ft.current_city["code"] >= 9000 && ft.current_city["code"] <= 9378) { ft.current_city["name"] = "台湾省" } if (ft.current_city["code"] >= 20000 && ft.current_city["code"] <= 20499) { ft.current_city["name"] = "新加坡" } if (ft.current_city["code"] >= 20500 && ft.current_city["code"] <= 25999) { ft.current_city["name"] = "泰国" } if (ft.current_city["code"] >= 26000 && ft.current_city["code"] <= 29999) { ft.current_city["name"] = "日本" } if (ft.current_city["code"] >= 30000 && ft.current_city["code"] <= 30999) { ft.current_city["name"] = "韩国" } if (ft.current_city["code"] >= 31000 && ft.current_city["code"] <= 37000) { ft.current_city["name"] = "亚太" } if (ft.current_city["code"] >= 46609 && ft.current_city["code"] <= 52505) { ft.current_city["name"] = "欧洲" } if (ft.current_city["code"] >= 39509 && ft.current_city["code"] <= 53500) { ft.current_city["name"] = "南美洲" } if (ft.current_city["code"] >= 54000 && ft.current_city["code"] <= 70000) { ft.current_city["name"] = "北美洲" } if (ft.current_city["code"] === 54003 && ft.current_city["code"] >= 60731 && ft.current_city["code"] <= 61123) { ft.current_city["name"] = "美国" } if (ft.current_city["code"] === 54015 || ft.current_city["code"] >= 57970 && ft.current_city["code"] <= 60223) { ft.current_city["name"] = "加拿大" } if (ft.current_city["code"] === 54025 || ft.current_city["code"] >= 54338 && ft.current_city["code"] <= 57374) { ft.current_city["name"] = "墨西哥" } e.enableRequest = true; if (ft && ft.current_city) { var fs = ft.current_city["name"]; var fr = ft.current_city["code"]; if (fr !== i.cCode) { i.dispatchEvent("citychange", { name: fs, code: fr }) } i.cityName = fs; i.cCode = ft.current_city["code"]; if (!d9()) { cY(i) } } }, { qt: "cen", b: fn.lng + "," + fn.lat + ";" + fp.lng + "," + fp.lat, l: fq }, "", "", true) }; i.addEventListener("load", function (fn) { e.request() }); i.addEventListener("moveend", function (fn) { e.request() }); i.addEventListener("zoomend", function (fn) { e.request() }); e.request() }); function dM(i) { if (i.temp.copyadded) { return } i.temp.copyadded = true; if (!i.cpyCtrl) { var fo = new cH(2, 2); i.config.cpyCtrlOffset = fo; if (d9()) { fo.width = 72; fo.height = 0 } var fn = new cp({ offset: fo, printable: true }); i.cpyCtrl = fn } if (!d9()) { cY(i); i.addEventListener("maptypechange", function () { cY(i) }) } i.addControl(fn); var e = new O(); e._opts = { printable: true }; i.logoCtrl = e; i.addControl(e); i.addEventListener("resize", function () { if (this.getSize().width >= 300 && i.getSize().height >= 100) { e.show(); fn.setOffset(i.config.cpyCtrlOffset) } else { e.hide(); fn.setOffset(new cH(4, 2)) } }); if (i.getSize().width >= 300 && i.getSize().height >= 100) { e.show() } else { e.hide(); fn.setOffset(new cH(4, 2)) } i.addEventListener("oncopyrightoffsetchange", function (fp) { i.logoCtrl.setOffset(fp.target.logo); i.cpyCtrl.setOffset(fp.target.cpy) }); i.dispatchEvent(new aB("hidecopyright")) } function cY(fD) { if (!fD.cpyCtrl) { var fL = new cH(2, 2); if (d9()) { fL.width = 72; fL.height = 0 } var fG = new cp({ offset: fL, printable: true }); fD.cpyCtrl = fG } var fU = fD.cityName || "中国"; var fE = fD.getMapType(); var fF = ["常州市", "南昌市", "乌鲁木齐市", "无锡市", "福州市", "泉州市", "珠海市", "贵阳市"]; var fx = ["北京市", "上海市", "广州市", "深圳市", "宁波市", "石家庄市", "沈阳市", "长春市", "青岛市", "温州市", "台州市", "金华市", "佛山市", "中山市", "昆明市", "南宁市", "苏州市", "西安市", "济南市", "郑州市", "合肥市", "呼和浩特市", "杭州市", "成都市", "武汉市", "长沙市", "天津市", "南京市", "重庆市", "大连市", "东莞市", "厦门市"]; var fz = ["香港特别行政区"]; var ft = ["台湾省"]; var fM = ["日本"]; var fS = ["韩国"]; var fH = ["泰国"]; var fK = ["亚太"]; var fu = ["新加坡"]; var fT = ["欧洲"]; var fo = ["南美洲"]; var fP = ["北美洲"]; var fn = ["美国"]; var fJ = ["墨西哥"]; var fr = ["加拿大"]; for (var fQ in fF) { if (fF[fQ] === fU) { var fA = true; break } } for (var fQ in fx) { if (fx[fQ] === fU) { var fp = true; break } } for (var fQ in fz) { if (fz[fQ] === fU) { var fW = true; break } } if (ft[0] === fU) { var fO = true } if (fu[0] === fU) { var i = true } if (fM[0] === fU) { var fw = true } if (fS[0] === fU) { var fC = true } if (fH[0] === fU) { var fB = true } if (fK[0] === fU) { var fs = true } if (fT[0] === fU) { var fy = true } if (fo[0] === fU) { var fv = true } if (fP[0] === fU) { var e = true } if (fn[0] === fU) { var fR = true } if (fr[0] === fU) { var fN = true } if (fJ[0] === fU) { var fq = true } var fV = ["&copy;&nbsp;2019 Baidu - GS(2018)5572号 - 甲测资字1100930 - 京ICP证030173号 - Data &copy; "]; var fI = "rgba(255, 255, 255, 0.701961)"; if (fD.getZoom() <= 9) { fV = ["&copy;&nbsp;2019 Baidu - GS(2018)5572号 - 甲测资字1100930 - 京ICP证030173号 - Data &copy; "] } else { if (fO) { fV = ["&copy;&nbsp;2019 Baidu - GS(2018)5572号 - 甲测资字1100930 - 京ICP证030173号 - Data &copy; "] } else { if (fw || fC) { fV = ["&copy;&nbsp;2019 Baidu - GS(2018)5572号 - 甲测资字1100930 - 京ICP证030173号 - Data &copy; "] } else { if (i || fB) { fV = ["&copy;&nbsp;2019 Baidu - GS(2018)5572号 - 甲测资字1100930 - 京ICP证030173号 - Data &copy; "] } else { if (fs) { fV = ["&copy;&nbsp;2019 Baidu - GS(2018)5572号 - 甲测资字1100930 - 京ICP证030173号 - Data &copy; "] } else { if (fy) { fV = ["&copy;&nbsp;2019 Baidu - GS(2018)5572号 - 甲测资字1100930 - 京ICP证030173号 - Data &copy; "] } else { if (fv) { fV = ["&copy;&nbsp;2019 Baidu - GS(2018)5572号 - 甲测资字1100930 - 京ICP证030173号 - Data &copy; "] } else { if (e) { fV = ["&copy;&nbsp;2019 Baidu - GS(2018)5572号 - 甲测资字1100930 - 京ICP证030173号 - Data &copy; "] } } } } } } } } if (fD.getZoom() <= 9) { fV.push("长地万方"); fV.push(' &amp; <a target="_blank" href="http://www.openstreetmap.org/">OpenStreetMap</a>'); fV.push(' &amp; <a target="_blank" href="http://corporate.navteq.com/supplier_terms.html">HERE</a>'); if (fE === BMAP_SATELLITE_MAP || fE === BMAP_HYBRID_MAP) { fV.push(' &amp; <a target="_blank" href="http://www.eso.org/public/">ESO</a>'); fI = "rgba(0,0,0,.7)" } } else { if (fw || fC) { fV.push('<a target="_blank" href="http://www.openstreetmap.org/">OpenStreetMap</a>') } else { if (i || fB) { fV.push('<a target="_blank" href="http://corporate.navteq.com/supplier_terms.html">HERE</a>') } else { if (fs) { fV.push('<a target="_blank" href="http://corporate.navteq.com/supplier_terms.html">HERE</a>'); fV.push(' &amp; <a target="_blank" href="https://www.mapbox.com/">Mapbox</a>') } else { if (fy) { fV.push('<a target="_blank" href="http://www.openstreetmap.org/">OpenStreetMap</a>'); fV.push(' &amp; <a target="_blank" href="https://www.mapbox.com/">Mapbox</a>') } else { if (fv) { fV.push('<a target="_blank" href="http://www.openstreetmap.org/">OpenStreetMap</a>'); fV.push(' &amp; <a target="_blank" href="https://www.mapbox.com/">Mapbox</a>') } else { if (fR || fq || fN) { fV.push('<a target="_blank" href="http://corporate.navteq.com/supplier_terms.html">HERE</a>'); fV.push(' &amp; <a target="_blank" href="https://www.mapbox.com/">Mapbox</a>') } else { if (e) { fV.push('<a target="_blank" href="http://www.openstreetmap.org/">OpenStreetMap</a>'); fV.push(' &amp; <a target="_blank" href="https://www.mapbox.com/">Mapbox</a>') } else { fV.push("长地万方"); if (fA) { fV.push(' &amp; <a target="_blank" href="http://www.palmcity.cn/palmcity/">PalmCity</a>') } if (fW) { fV.push(' &amp; <a target="_blank" href="http://www.mapking.com/HongKong/eng/home/MapKing_Webmap.html">MapKing</a>') } if (fO) { fV.push(' &amp; <a target="_blank" href="http://corporate.navteq.com/supplier_terms.html">HERE</a>'); fV.push(' &amp; <a target="_blank" href="http://www.localking.com.tw/about/localking.aspx">樂客LocalKing</a>') } if (fE === BMAP_SATELLITE_MAP || fE === BMAP_HYBRID_MAP) { fI = "rgba(0,0,0,.7)" } } } } } } } } } fV.unshift('<span style="background: ' + fI + ';padding: 0px 1px;line-height: 16px;display: inline;height: 16px;">'); fV.push("</span>"); fV = fV.join(""); fD.cpyCtrl.addCopyright({ id: 1, content: fV }) } aI.Map = bV; aI.MapType = be; aI.Point = e5; aI.Pixel = cP; aI.Size = cH; aI.Bounds = cw; aI.TileLayer = bI; aI.Copyright = bT; aI.Projection = aI.Project = cR; aI.RenderTypeUtils = aA; aI.Overlay = aH; aI.Label = dW; aI.Marker = ac; aI.Icon = eS; aI.Polyline = T; aI.PolylineMultipart = dC; aI.Polygon = eP; aI.InfoWindow = W; aI.SimpleInfoWindow = fg; aI.Circle = cn; aI.GroundOverlay = cz; aI.Control = az; aI.NavigationControl = cb; aI.NavigationControl3D = dg; aI.CopyrightControl = cp; aI.ScaleControl = eW; aI.MapTypeControl = aT; aI.ZoomControl = by; aI.LocationControl = aR; aI.LogoControl = O; aI.DistanceTool = eE; aI.ContextMenu = bl; aI.MenuItem = dJ; aI.OperationMask = cO; aI.Animation = l; aI.ViewAnimation = bG; aI.Transitions = bq; aI.Event = aB; aI.trafficLayer = bk; aI.verify(); aI.apiLoad(); window._groundOverlay = 1; x.extend(cz.prototype, { _draw: function () { if (!this.map) { return } if (!this.domElement) { this._addDom() } var fq = this.map.getZoom(); if (fq < this._config.displayOnMinLevel || fq > this._config.displayOnMaxLevel) { this.hide(); return } var fn = this._config.bounds.getSouthWest(); var fp = this._config.bounds.getNorthEast(); var fr = { x: this.map.pointToOverlayPixel(fn).x, y: this.map.pointToOverlayPixel(fp).y }; var i = { x: this.map.pointToOverlayPixel(fp).x, y: this.map.pointToOverlayPixel(fn).y }; var fo = i.x - fr.x; var e = i.y - fr.y; this.domElement.style.left = fr.x + "px"; this.domElement.style.top = fr.y + "px"; this.domElement.style.width = fo + "px"; this.domElement.style.height = e + "px"; this.show() }, draw: function () { this._draw() }, _addDom: function () { if (this.domElement) { return } this.domElement = document.createElement("div"); var i = this.domElement.style; i.cssText = "position: absolute; -moz-user-select: none; overflow: hidden;"; i.zIndex = aH.getZIndex(this._config.bounds.getSouthWest().lat); if (this._config.opacity || this._config.opacity === 0) { i.opacity = this._config.opacity; i.filter = "alpha(opacity=" + (parseInt(this._config.opacity, 10) * 100) + ")" } this._imgElement = document.createElement("img"); this._imgElement.style.width = "100%"; this._imgElement.style.webkitUserDrag = "none"; if (this._config.stretch) { this._imgElement.style.height = "100%" } this.domElement.appendChild(this._imgElement); var e = this; this._imgElement.onload = function (fn) { e._imgElementWidth = e._imgElement.naturalWidth || e._imgElement.width; e._imgElementHeight = e._imgElement.naturalHeight || e._imgElement.height }; if (this._config.imageURL) { this._imgElement.src = this._config.imageURL } this.map.getPanes().labelPane.appendChild(this.domElement); var e = this; x.on(this.domElement, "click", function (fn) { e.dispatchEvent(new aB("click"), fn) }); x.on(this.domElement, "dblclick", function (fn) { e.dispatchEvent(new aB("dblclick"), fn) }) }, setBounds: function (e) { this._config.bounds = e; if (this.map) { this._draw() } this.domElement.style.zIndex = aH.getZIndex(this._config.bounds.getSouthWest().lat) }, getBounds: function () { return this._config.bounds }, setOpacity: function (e) { this._config.opacity = e; this.domElement.style.opacity = e; this.domElement.style.filter = "alpha(opacity=" + (parseInt(e, 10) * 100) + ")" }, getOpacity: function (e) { return this._config.opacity }, setImageURL: function (e) { this._config.imageURL = e; if (this._imgElement) { this._imgElement.src = e } }, getImageURL: function () { return this._config.imageURL }, setDisplayOnMinLevel: function (e) { this._config.displayOnMinLevel = e }, getDisplayOnMinLevel: function () { return this._config.displayOnMinLevel }, setDisplayOnMaxLevel: function (e) { this._config.displayOnMaxLevel = e }, getDisplayOnMaxLevel: function () { return this._config.displayOnMaxLevel } }); cz.prototype.setBounds = cz.prototype.setBounds; cz.prototype.getBounds = cz.prototype.getBounds; cz.prototype.setOpacity = cz.prototype.setOpacity; cz.prototype.getOpacity = cz.prototype.getOpacity; cz.prototype.setImageURL = cz.prototype.setImageURL; cz.prototype.getImageURL = cz.prototype.getImageURL; cz.prototype.setDispalyOnMinLevel = cz.prototype.setDispalyOnMinLevel; cz.prototype.setDispalyOnMaxLevel = cz.prototype.setDispalyOnMaxLevel; window._groundOverlay = 2; })(BMapGL, "BMapGL");